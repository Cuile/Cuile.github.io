<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on 瘦了就帅了</title><link>https://blog.cuile.com/tags/python/</link><description>Recent content in Python on 瘦了就帅了</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 10 May 2022 16:30:13 +0800</lastBuildDate><atom:link href="https://blog.cuile.com/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Django 开发简介</title><link>https://blog.cuile.com/posts/django/django_development_introduction/</link><pubDate>Tue, 10 May 2022 16:30:13 +0800</pubDate><guid>https://blog.cuile.com/posts/django/django_development_introduction/</guid><description>
1 开发环境 开发环境还是建议使用 Docker 来搭建，方便快捷。 不过 Django 的官方镜像已经弃用了，官方建议新版本使用 Python 官方提供的镜像来构建。
Django 的 LTS 版本是 3.2.13，Python 稳定版本镜像是 3.9.12-buster ，所以建议使用这两个版本来构建 Django 环境。
1.1 环境搭建 可以参考[https://github.com/Cuile/Docker-to-Python/tree/master/Django]，提供了 Dockerfil、yml 文件，还提供全套使用命令。
1.2 配置项 修改配置后，建议使用项目调试的方式启动，不要使用快捷命令，项目正常启动稳定运行后，再使用快捷命令。
ALLOWED_HOSTS = [&amp;#39;*&amp;#39;] # 任意地址都可以访问 Django LANGUAGE_CODE = &amp;#39;en-us&amp;#39; # 这个与多语种有关，在项目初始阶段不要修改，后续添加了多语种支持再修改，否则会导致无法启动。 # 具体参考[http://www.i18nguy.com/unicode/language-identifiers.html]，有个傻逼教程，上来就改成 zh-CN 果然导致项目无法正常启动。 TIME_ZONE = &amp;#39;Asia/Shanghai&amp;#39; # 时区，上海就代表北京时间，这个不能写错，写错就启动不了 # 具体参考[https://en.wikipedia.org/wiki/List_of_tz_database_time_zones]，这里是标准的，有个傻逼教程非给写成 Asia/Beijing 导致怎么都起不来，太TMD的二逼了。 2 常用命令 # 创建项目 $ django-admin startproject xxx $ cd xxx # 生成项目 $ python manage.py startapp websrc # 运行项目测试 $ python manage.</description></item><item><title>urllib.parse.urlencode 使用详解</title><link>https://blog.cuile.com/posts/urllib.parse.urlencode_manual/</link><pubDate>Mon, 17 Jan 2022 15:24:58 +0800</pubDate><guid>https://blog.cuile.com/posts/urllib.parse.urlencode_manual/</guid><description>
urllib.parse.urlencode(query, doseq=False, safe='', encoding=None, errors=None, quote_via=quote_plus) urllib.parse.urlencode 将对象或两元素序列转换为百分比编码的ASCII文本字符串，字符串是由'&amp;amp;&amp;lsquo;字符分隔的一系列 key=value 对，其中 key 和 value 都使用 quote_via 函数引用。
GET 请求 import urllib params = urllib.parse.urlencode({&amp;#39;spam&amp;#39;: 1, &amp;#39;eggs&amp;#39;: 2, &amp;#39;bacon&amp;#39;: 0}) url = &amp;#34;http://www.musi-cal.com/cgi-bin/query?%s&amp;#34; % params with urllib.request.urlopen(url) as f: print(f.read().decode(&amp;#39;utf-8&amp;#39;)) POST 请求 import urllib.request import urllib.parse data = urllib.parse.urlencode({&amp;#39;spam&amp;#39;: 1, &amp;#39;eggs&amp;#39;: 2, &amp;#39;bacon&amp;#39;: 0}) data = data.encode(&amp;#39;ascii&amp;#39;) with urllib.request.urlopen(&amp;#34;http://requestb.in/xrbl82xr&amp;#34;, data) as f: print(f.read().decode(&amp;#39;utf-8&amp;#39;)) 如果结果字符串要用作具有 urlopen() 函数的POST操作的 data，则它应该被编码为字节，否则将导致 TypeError。
默认情况下 urlencode 函数使用 quote_plus() 函数进行编码，也可以选用 quote() 函数进行编码，两者最大的不同在于对特定字符的处理。</description></item><item><title>在pypi上发布自己的Python库</title><link>https://blog.cuile.com/posts/release_pypi_package/</link><pubDate>Fri, 11 May 2018 14:49:57 +0800</pubDate><guid>https://blog.cuile.com/posts/release_pypi_package/</guid><description>
Python 的 pypi.python.org 站点终于要退休了，而新的接任者 pypi.org 无论从美观、风格上都让人大大的喜欢，终于在审美一这项上及格了。
而且新的 pypi.org 能够正确的渲染 Markdown 格式的描述，实在是让人欣慰，终于可以和 Github 同步了，不用在麻烦的转换一次了。
下面就来聊聊，如何正确的把库发布到 pypi.org 上：
1. 注册 pypi.org 账号 嗯，这是正确的废话！
2. 编写 setup.py setup.py 的内容比较重要，但其它的细节不谈，主要聊聊 long_description 部分，这部分是对库能力的详细描述。
如果说 keywords 和 description 能提高别人搜索到项目的概率的话，那 long_description 就在很大程度上决定别人对你对项目有没有进一步的想法了。
在针对 long_description 的网上介绍中，对具体使用方法明确写出的是少之又少，所以我今天就特别举例说明一下。
2.1 setup.py #!/usr/bin/env python # coding: utf-8 from setuptools import setup setup( name=&amp;#39;sequence2hash&amp;#39;, version=&amp;#39;1.1.2&amp;#39;, keywords=&amp;#39;tuple dict list sequence hash key/value&amp;#39;, packages=[&amp;#39;sequence2hash&amp;#39;], url=&amp;#39;https://github.com/Cuile/sequence2hash&amp;#39;, description=&amp;#39;This tool converts a valid value in a sequence to a hash and contains a path to a valid value in the key field&amp;#39;, long_description_content_type=&amp;#39;text/markdown&amp;#39;, long_description=open(&amp;#39;README.</description></item></channel></rss>