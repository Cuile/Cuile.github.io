<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on 瘦了就帅了</title><link>https://cuile.github.io/tags/python/</link><description>Recent content in python on 瘦了就帅了</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Sun, 16 Mar 2025 11:07:37 +0800</lastBuildDate><atom:link href="https://cuile.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Nuitka 使用手册</title><link>https://cuile.github.io/posts/python/nuitka/</link><pubDate>Sun, 16 Mar 2025 11:07:37 +0800</pubDate><guid>https://cuile.github.io/posts/python/nuitka/</guid><description>
Usage: python.exe -m nuitka [--mode=compilation_mode] [--run] [options] main_module.py Note: For general plugin help (they often have their own command line options too), consider the output of '--help-plugins'. Options: 选项： --help show this help message and exit --version Show version information and important details for bug reports, then exit. Defaults to off. --module Create an importable binary extension module executable instead of a program. Defaults to off. 创建</description></item><item><title>VScode 在 Docker 容器内开发</title><link>https://cuile.github.io/posts/vscode/vscode_develop_in_docker/</link><pubDate>Sat, 25 Nov 2023 00:24:10 +0800</pubDate><guid>https://cuile.github.io/posts/vscode/vscode_develop_in_docker/</guid><description>
在 Docker 的容器内开发，相当于使用VSCode的远程开发能力，好处非常多。 开发环境统一、可维护性强 后期部署简单 1. 安装 Docker 各系统安装 Docker 的教程很多，这里</description></item><item><title>VSCode 配置 Python 开发环境</title><link>https://cuile.github.io/posts/vscode/vscode_configures_python_development_environment/</link><pubDate>Sat, 25 Nov 2023 00:24:10 +0800</pubDate><guid>https://cuile.github.io/posts/vscode/vscode_configures_python_development_environment/</guid><description>
使用 VSCode 开发 Python 是替代 PyCharm 的一个很好选择，有丰富的扩展和第三方工具可以使用，安装配置好它们，会让开发工作事半功倍。下面列举推荐安装的扩展和工具： 扩</description></item><item><title>Django crontab 使用说明</title><link>https://cuile.github.io/posts/django/django_crontab/</link><pubDate>Sun, 22 Jan 2023 16:35:36 +0800</pubDate><guid>https://cuile.github.io/posts/django/django_crontab/</guid><description>
参考文档 kraiz/django-crontab 使用django-crontab建立定时任务 Linux crontab 命令</description></item><item><title>Docker 环境 Django 开发简介</title><link>https://cuile.github.io/posts/django/django_development_introduction/</link><pubDate>Tue, 10 May 2022 16:30:13 +0800</pubDate><guid>https://cuile.github.io/posts/django/django_development_introduction/</guid><description>
1 准备环境 开发环境还是建议使用 Docker 来搭建，方便快捷。 不过 Django 的官方镜像已经弃用了，官方建议新版本使用 Python 官方提供的镜像来构建。 1Docker 2 ┗ Python == 3.9.12-buster 3 ┗ Django ==</description></item></channel></rss>