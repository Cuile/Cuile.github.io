<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Nuitka on 瘦了就帅了</title><link>https://blog.cuile.com/tags/nuitka/</link><description>Recent content in Nuitka on 瘦了就帅了</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sun, 05 Oct 2025 02:09:22 +0000</lastBuildDate><atom:link href="https://blog.cuile.com/tags/nuitka/index.xml" rel="self" type="application/rss+xml"/><item><title>Nuitka 参数列表</title><link>https://blog.cuile.com/post/python/nuitka/</link><pubDate>Sun, 16 Mar 2025 11:07:37 +0800</pubDate><guid>https://blog.cuile.com/post/python/nuitka/</guid><description>&lt;p>Usage: python.exe -m nuitka [&amp;ndash;mode=compilation_mode] [&amp;ndash;run] [options] main_module.py&lt;/p>
&lt;pre>&lt;code>Note: For general plugin help (they often have their own command line options too), consider the output of '--help-plugins'.
&lt;/code>&lt;/pre>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>Options:&lt;/th>
 &lt;th>选项：&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;help&lt;/td>
 &lt;td>show this help message and exit&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;version&lt;/td>
 &lt;td>Show version information and important details for bug reports, then exit. Defaults to off.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;module&lt;/td>
 &lt;td>Create an importable binary extension module executable instead of a program. Defaults to off.&lt;/td>
 &lt;td>创建可导入的二进制扩展模块可执行文件，而不是程序。默认为关闭。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;mode=COMPILATION_MODE&lt;/td>
 &lt;td>Mode in which to compile. Accelerated runs in your Python installation and epends on it. Standalone creates a folder with an executable contained to run it. Onefile creates a single executable to deploy. App is onefile except on macOS where it&amp;rsquo;s not to be used. Module makes a module, and package includes also all sub-modules and sub-packages. Default is &amp;lsquo;accelerated&amp;rsquo;.&lt;/td>
 &lt;td>编译模式。Accelerated 在 Python 安装中运行并依附于它。Standalone 会创建一个包含可执行文件的文件夹，以便运行。Onefile 创建单个可执行文件以进行部署。App 就是 onefile，在 macOS 上不使用。Module 制作一个模块，软件包也包括所有子模块和子软件包。默认为 “accelerated”。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;standalone&lt;/td>
 &lt;td>Enable standalone mode for output. This allows you to transfer the created binary to other machines without it using an existing Python installation. This also means it will become big. It implies these option: &amp;ldquo;&amp;ndash;follow-imports&amp;rdquo; and &amp;ldquo;&amp;ndash;python-flag=no_site&amp;rdquo;. Defaults to off.&lt;/td>
 &lt;td>启用独立输出模式。这样就可以将创建的二进制文件传输到其他机器上，而无需使用现有的 Python 安装。这也意味着它将变得很大。这意味着需要这些选项： “follow-imports“ 和 ”&amp;ndash;python-flag=no_site&amp;quot;。默认为关闭。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;onefile&lt;/td>
 &lt;td>On top of standalone mode, enable onefile mode. This means not a folder, but a compressed executable is created and used. Defaults to off.&lt;/td>
 &lt;td>在独立模式的基础上，启用单文件模式。这意味着创建和使用的不是文件夹，而是压缩后的可执行文件。默认为关闭。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;python-flag=FLAG&lt;/td>
 &lt;td>Python flags to use. Default is what you are using to run Nuitka, this enforces a specific mode. These are options that also exist to standard Python executable. Currently supported: &amp;ldquo;-S&amp;rdquo; (alias &amp;ldquo;no_site&amp;rdquo;), &amp;ldquo;static_hashes&amp;rdquo; (do not use hash randomization), &amp;ldquo;no_warnings&amp;rdquo; (do not give Python run time warnings), &amp;ldquo;-O&amp;rdquo; (alias &amp;ldquo;no_asserts&amp;rdquo;), &amp;ldquo;no_docstrings&amp;rdquo; (do not use doc strings), &amp;ldquo;-u&amp;rdquo; (alias &amp;ldquo;unbuffered&amp;rdquo;), &amp;ldquo;isolated&amp;rdquo; (do not load outside code) and &amp;ldquo;-m&amp;rdquo; (package mode, compile as &amp;ldquo;package.&lt;strong>main&lt;/strong>&amp;rdquo;). Default empty.&lt;/td>
 &lt;td>要使用的 Python 标志。默认值是运行 Nuitka 时使用的值，它强制执行特定的模式。这些选项也存在于标准 Python 可执行文件中。目前支持 “-S“（别名 ”no_site“）、”static_hashes“（不使用哈希随机化）、”no_warnings“（不给出 Python 运行时警告）、”-O“（别名 ”no_asserts“）、”no_docstrings“（不使用文档字符串）、”-u“（别名 ”unbuffered“）、”isol isolated“（不加载外部代码）和”-m“（包模式，编译为 ”package.&lt;strong>main&lt;/strong>&amp;quot;）。默认为空。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;python-debug&lt;/td>
 &lt;td>Use debug version or not. Default uses what you are using to run Nuitka, most likely a non-debug version. Only for debugging and testing purposes.&lt;/td>
 &lt;td>是否使用调试版本。默认使用运行 Nuitka 的版本，很可能是非调试版本。仅用于调试和测试目的。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;python-for-scons=PATH&lt;/td>
 &lt;td>When compiling with Python 3.4 provide the path of a Python binary to use for Scons. Otherwise Nuitka can use what you run Nuitka with, or find Python installation, e.g. from Windows registry. On Windows, a Python 3.5 or higher is needed. On non-Windows, a Python 2.6 or 2.7 will do as well.&lt;/td>
 &lt;td>使用 Python 3.4 编译时，请提供 Scons 使用的 Python 二进制文件的路径。否则，Nuitka 可以使用您运行 Nuitka 时所使用的路径，或者从 Windows 注册表中查找 Python 的安装路径。在 Windows 上，需要 Python 3.5 或更高版本。在非 Windows 下，Python 2.6 或 2.7 也可以。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;main=PATH&lt;/td>
 &lt;td>If specified once, this takes the place of the positional argument, i.e. the filename to compile. When given multiple times, it enables &amp;ldquo;multidist&amp;rdquo; (see User Manual) it allows you to create binaries that depending on file name or invocation name.&lt;/td>
 &lt;td>如果只指定一次，它将取代位置参数，即要编译的文件名。如果多次指定，则会启用 “multidist”（参见《用户手册》），允许根据文件名或调用名创建二进制文件。&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>Backend C compiler choice:&lt;/th>
 &lt;th>后端 C 编译器选择：&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;clang&lt;/td>
 &lt;td>Enforce the use of clang. On Windows this requires a working Visual Studio version to piggy back on. Defaults to off.&lt;/td>
 &lt;td>强制使用 clang。在 Windows 环境下，这需要一个正常运行的 Visual Studio 版本作为辅助。默认为关闭。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;mingw64&lt;/td>
 &lt;td>Enforce the use of MinGW64 on Windows. Defaults to off unless MSYS2 with MinGW Python is used.&lt;/td>
 &lt;td>强制在 Windows 上使用 MinGW64。默认为关闭，除非使用带有 MinGW Python 的 MSYS2。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;msvc=MSVC_VERSION&lt;/td>
 &lt;td>Enforce the use of specific MSVC version on Windows. Allowed values are e.g. &amp;ldquo;14.3&amp;rdquo; (MSVC 2022) and other MSVC version numbers, specify &amp;ldquo;list&amp;rdquo; for a list of installed compilers, or use &amp;ldquo;latest&amp;rdquo;. Defaults to latest MSVC being used if installed, otherwise MinGW64 is used.&lt;/td>
 &lt;td>强制在 Windows 上使用特定的 MSVC 版本。允许的值包括 “14.3”（MSVC 2022）和其他 MSVC 版本号，指定 “list ”表示已安装的编译器列表，或使用 “latest”。 如果已安装，默认使用最新的 MSVC，否则使用 MinGW64。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;jobs=N&lt;/td>
 &lt;td>Specify the allowed number of parallel C compiler jobs. Negative values are system CPU minus the given value. Defaults to the full system CPU count unless low memory mode is activated, then it defaults to 1.&lt;/td>
 &lt;td>指定允许的 C 编译器并行作业数。负值为系统 CPU 减去给定值。默认为整个系统 CPU 数量，除非激活了低内存模式，否则默认为 1。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;lto=choice&lt;/td>
 &lt;td>Use link time optimizations (MSVC, gcc, clang). Allowed values are &amp;ldquo;yes&amp;rdquo;, &amp;ldquo;no&amp;rdquo;, and &amp;ldquo;auto&amp;rdquo; (when it&amp;rsquo;s known to work). Defaults to &amp;ldquo;auto&amp;rdquo;.&lt;/td>
 &lt;td>使用链接时间优化（MSVC、gcc、clang）。允许的值有 “是”、“否 ”和 “自动”（已知有效时）。默认为 “自动”。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;static-libpython=choice&lt;/td>
 &lt;td>Use static link library of Python. Allowed values are &amp;ldquo;yes&amp;rdquo;, &amp;ldquo;no&amp;rdquo;, and &amp;ldquo;auto&amp;rdquo; (when it&amp;rsquo;s known to work). Defaults to &amp;ldquo;auto&amp;rdquo;.&lt;/td>
 &lt;td>使用 Python 的静态链接库。允许的值有 “yes”、“no ”和 “auto”（已知有效时）。默认为 “auto”。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;cf-protection=PROTECTION_MODE&lt;/td>
 &lt;td>This option is gcc specific. For the gcc compiler, select the &amp;ldquo;cf-protection&amp;rdquo; mode. Default &amp;ldquo;auto&amp;rdquo; is to use the gcc default value, but you can override it, e.g. to disable it with &amp;ldquo;none&amp;rdquo; value. Refer to gcc documentation for &amp;ldquo;-fcf-protection&amp;rdquo; for the details.&lt;/td>
 &lt;td>该选项针对 gcc。对于 gcc 编译器，请选择 “cf-protection ”模式。默认值为 “auto”，即使用 gcc 的默认值，但也可以覆盖它，例如使用 “none ”值禁用它。详情请参阅 gcc 文档中的“-fcf-protection”。&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>Onefile options:&lt;/th>
 &lt;th>Onefile 选项：&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;onefile-tempdir-spec=ONEFILE_TEMPDIR_SPEC&lt;/td>
 &lt;td>Use this as a folder to unpack to in onefile mode. Defaults to &amp;lsquo;{TEMP}/onefile_{PID}_{TIME}&amp;rsquo;, i.e. user temporary directory and being non-static it&amp;rsquo;s removed. Use e.g. a string like &amp;lsquo;{CACHE_DIR}/{COMPANY}/{PRODUCT}/{VERSION}&amp;rsquo; which is a good static cache path, this will then not be removed.&lt;/td>
 &lt;td>在单文件模式下，将其作为解压到的文件夹。默认为“{TEMP}/onefile_{PID}_{TIME}”，即用户临时目录，非静态时会被移除。例如，使用类似“{CACHE_DIR}/{COMPANY}/{PRODUCT}/{VERSION}”的字符串，这是一个很好的静态缓存路径，因此不会被移除。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;onefile-child-grace-time=GRACE_TIME_MS&lt;/td>
 &lt;td>When stopping the child, e.g. due to CTRL-C or shutdown, etc. the Python code gets a &amp;ldquo;KeyboardInterrupt&amp;rdquo;, that it may handle e.g. to flush data. This is the amount of time in ms, before the child it killed in the hard way. Unit is ms, and default 5000.&lt;/td>
 &lt;td>当停止子进程时，例如，由于 CTRL-C 或关机等原因，Python 代码会收到一个 “KeyboardInterrupt”（键盘中断），它可以处理这个中断，例如，刷新数据。这是以毫秒为单位的时间量，在子进程被强制杀死之前。单位为 ms，默认为 5000。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;onefile-no-compression&lt;/td>
 &lt;td>When creating the onefile, disable compression of the payload. This is mostly for debug purposes, or to save time. Default is off.&lt;/td>
 &lt;td>创建 onefile 时，禁用对有效载荷的压缩。这主要是为了调试或节省时间。默认为关闭。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;onefile-as-archive&lt;/td>
 &lt;td>When creating the onefile, use an archive format, that can be unpacked with nuitka-onefile-unpack&amp;quot; rather than a stream that only the onefile program itself unpacks. Default is off.&lt;/td>
 &lt;td>创建 onefile 时，使用可以用 nuitka-onefile-unpack 解压的压缩包格式，而不是只能由 onefile 程序自己解压的流格式。默认为关闭。&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>Data files:&lt;/th>
 &lt;th>数据文件：&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;include-package-data=PACKAGE&lt;/td>
 &lt;td>Include data files for the given package name. DLLs and extension modules are not data files and never included like this. Can use patterns the filenames as indicated below. Data files of packages are not included by default, but package configuration can do it. This will only include non-DLL, non-extension modules, i.e. actual data files. After a &amp;ldquo;:&amp;rdquo; optionally a filename pattern can be given as well, selecting only matching files. Examples: &amp;ldquo;&amp;ndash;include-package-data=package_name&amp;rdquo; (all files) &amp;ldquo;&amp;ndash;include-package-data=package_name:*.txt&amp;rdquo; (only certain type) &amp;ldquo;&amp;ndash;include-package-data=package_name:some_filename.dat&amp;rdquo; (concrete file) Default empty.&lt;/td>
 &lt;td>包括指定软件包名称的数据文件。动态链接库和扩展模块不是数据文件，因此不会像这样被包含。可以使用如下所示的文件名模式。默认情况下不包含软件包的数据文件，但软件包配置可以这样做。这只会包含非 DLL、非扩展模块，即实际的数据文件。在“: ”后还可选择给出文件名模式，只选择匹配的文件。例如 “&amp;ndash;include-package-data=package_name“（所有文件） ”&amp;ndash;include-package-data=package_name:*.txt“（仅特定类型） ”&amp;ndash;include-package-data=package_name:some_filename.dat&amp;quot;（具体文件） 默认为空。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;include-data-files=DESC&lt;/td>
 &lt;td>Include data files by filenames in the distribution. There are many allowed forms. With &amp;lsquo;&amp;ndash;include-data-files=/path/to/file/&lt;em>.txt=folder_name/some.txt&amp;rsquo; it will copy a single file and complain if it&amp;rsquo;s multiple. With &amp;lsquo;&amp;ndash;include-data-files=/path/to/files/&lt;/em>.txt=folder_name/&amp;rsquo; it will put all matching files into that folder. For recursive copy there is a form with 3 values that &amp;lsquo;&amp;ndash;include-data-files=/path/to/scan=folder_name/=**/*.txt&amp;rsquo; that will preserve directory structure. Default empty.&lt;/td>
 &lt;td>按文件名将数据文件包含在分发文件中。允许的形式有很多种。如果使用“&amp;ndash;include-data-files=/path/to/file/&lt;em>.txt=folder_name/some.txt”，它将复制单个文件，如果是多个文件则会抱怨。如果使用“&amp;ndash;include-data-files=/path/to/files/&lt;/em>.txt=folder_name/”，则会将所有匹配文件放入该文件夹。对于递归复制，“&amp;ndash;include-data-files=/path/to/scan=folder_name/=**/*.txt ”表格包含 3 个值，将保留目录结构。默认为空。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;include-data-dir=DIRECTORY&lt;/td>
 &lt;td>Include data files from complete directory in the distribution. This is recursive. Check &amp;lsquo;&amp;ndash;include-data-files&amp;rsquo; with patterns if you want non-recursive inclusion. An example would be &amp;lsquo;&amp;ndash;include-data-dir=/path/some_dir=data/some_dir&amp;rsquo; for plain copy, of the whole directory. All non-code files are copied, if you want to use &amp;lsquo;&amp;ndash;noinclude-data-files&amp;rsquo; option to remove them. Default empty.&lt;/td>
 &lt;td>包含发行版中完整目录下的数据文件。这是递归的。如果想要非递归包含，请勾选带有模式的“&amp;ndash;include-data-files”。例如，“&amp;ndash;include-data-dir=/path/some_dir=data/some_dir ”是对整个目录的纯复制。如果想使用“&amp;ndash;noinclude-data-files ”选项删除非代码文件，则会复制所有非代码文件。默认为空。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;noinclude-data-files=PATTERN&lt;/td>
 &lt;td>Do not include data files matching the filename pattern given. This is against the target filename, not source paths. So to ignore a file pattern from package data for &amp;lsquo;package_name&amp;rsquo; should be matched as &amp;lsquo;package_name/*.txt&amp;rsquo;. Or for the whole directory simply use &amp;lsquo;package_name&amp;rsquo;. Default empty.&lt;/td>
 &lt;td>不包含与给定文件名模式匹配的数据文件。这针对的是目标文件名，而不是源路径。因此，要忽略 “package_name ”的软件包数据中的文件模式，应匹配为 “package_name/*.txt”。或者，对于整个目录，只需使用 “package_name ”即可。默认为空。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;include-onefile-external-data=PATTERN&lt;/td>
 &lt;td>Include the specified data file patterns outside of the onefile binary, rather than on the inside. Makes only sense in case of &amp;lsquo;&amp;ndash;onefile&amp;rsquo; compilation. First files have to be specified as included with other &lt;code>--include-*data*&lt;/code> options, and then this refers to target paths inside the distribution. Default empty.&lt;/td>
 &lt;td>将指定的数据文件模式包含在 onefile 二进制文件的外部，而不是内部。只有在“&amp;ndash;onefile ”编译时才有意义。首先，必须使用其他 &lt;code>--include-*data*&lt;/code>选项指定包含的文件，然后才会引用发行版内部的目标路径。默认为空。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;list-package-data=LIST_PACKAGE_DATA&lt;/td>
 &lt;td>Output the data files found for a given package name.Default not done.&lt;/td>
 &lt;td>输出为给定软件包名称找到的数据文件，默认为未完成。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;include-raw-dir=DIRECTORY&lt;/td>
 &lt;td>Include raw directories completely in the distribution. This is recursive. Check &amp;lsquo;&amp;ndash;include-data-dir&amp;rsquo; to use the sane option. Default empty.&lt;/td>
 &lt;td>将原始目录完全包含在发行版中。这是递归的。选中“&amp;ndash;include-data-dir ”以使用正常选项。默认为空。&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>Compilation choices:&lt;/th>
 &lt;th>编译选择：&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;user-package-configuration-file=YAML_FILENAME&lt;/td>
 &lt;td>User provided Yaml file with package configuration. You can include DLLs, remove bloat, add hidden dependencies. Check the Nuitka Package Configuration Manual for a complete description of the format to use. Can be given multiple times. Defaults to empty.&lt;/td>
 &lt;td>用户提供的 Yaml 文件包含软件包配置。您可以包含 DLL、删除臃肿、添加隐藏的依赖关系。有关使用格式的完整说明，请查阅《Nuitka 软件包配置手册》。可多次给出。默认为空。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;full-compat&lt;/td>
 &lt;td>Enforce absolute compatibility with CPython. Do not even allow minor deviations from CPython behavior, e.g. not having better tracebacks or exception messages which are not really incompatible, but only different or worse. This is intended for tests only and should &lt;em>not&lt;/em> be used.&lt;/td>
 &lt;td>确保与 CPython 绝对兼容。甚至不允许与 CPython 行为有细微的偏差，例如，不允许有更好的跟踪回溯或异常消息，这些并不是真正的不兼容，而只是不同或更糟而已。这仅用于测试，&lt;em>不&lt;/em>应使用。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;file-reference-choice=FILE_MODE&lt;/td>
 &lt;td>Select what value &amp;ldquo;&lt;strong>file&lt;/strong>&amp;rdquo; is going to be. With &amp;ldquo;runtime&amp;rdquo; (default for standalone binary mode and module mode), the created binaries and modules, use the location of themselves to deduct the value of &amp;ldquo;&lt;strong>file&lt;/strong>&amp;rdquo;. Included packages pretend to be in directories below that location. This allows you to include data files in deployments. If you merely seek acceleration, it&amp;rsquo;s better for you to use the &amp;ldquo;original&amp;rdquo; value, where the source files location will be used. With &amp;ldquo;frozen&amp;rdquo; a notation &amp;ldquo;&lt;!-- raw HTML omitted -->&amp;rdquo; is used. For compatibility reasons, the &amp;ldquo;&lt;strong>file&lt;/strong>&amp;rdquo; value will always have &amp;ldquo;.py&amp;rdquo; suffix independent of what it really is.&lt;/td>
 &lt;td>选择“&lt;strong>file&lt;/strong>”的值。如果使用 “runtime”（独立二进制文件模式和模块模式的默认值），创建的二进制文件和模块将使用自己的位置来扣除“&lt;strong>file&lt;/strong>”的值。包含的软件包会假装位于该位置下方的目录中。这样就可以在部署中包含数据文件。如果只是为了加速，最好使用&amp;quot;original&amp;quot;值，即使用源文件的位置。在使用 “frozen ”时，会使用“&lt;!-- raw HTML omitted -->”符号。出于兼容性考虑，“&lt;strong>file&lt;/strong>”值的后缀始终是“.py”，与实际内容无关。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;module-name-choice=MODULE_NAME_MODE&lt;/td>
 &lt;td>Select what value &amp;ldquo;&lt;strong>name&lt;/strong>&amp;rdquo; and &amp;ldquo;&lt;strong>package&lt;/strong>&amp;rdquo; are going to be. With &amp;ldquo;runtime&amp;rdquo; (default for module mode), the created module uses the parent package to deduce the value of &amp;ldquo;&lt;strong>package&lt;/strong>&amp;rdquo;, to be fully compatible. The value &amp;ldquo;original&amp;rdquo; (default for other modes) allows for more static optimization to happen, but is incompatible for modules that normally can be loaded into any package.&lt;/td>
 &lt;td>选择“&lt;strong>name&lt;/strong>”和“&lt;strong>package&lt;/strong>”的值。如果使用 “runtime”（模块模式的默认值），创建的模块会使用父软件包来推断“&lt;strong>package&lt;/strong>”的值，以实现完全兼容。&amp;ldquo;original&amp;quot;值（其他模式的默认值）允许进行更多的静态优化，但对于通常可以加载到任何软件包的模块来说是不兼容的。&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>General OS controls:&lt;/th>
 &lt;th>一般操作系统控制：&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;force-stdout-spec=FORCE_STDOUT_SPEC&lt;/td>
 &lt;td>Force standard output of the program to go to this location. Useful for programs with disabled console and programs using the Windows Services Plugin of Nuitka commercial. Defaults to not active, use e.g. &amp;lsquo;{PROGRAM_BASE}.out.txt&amp;rsquo;, i.e. file near your program, check User Manual for full list of available values.&lt;/td>
 &lt;td>强制程序的标准输出到此位置。对于禁用控制台的程序和使用 Nuitka 商业版 Windows 服务插件的程序非常有用。默认情况下不激活，例如使用“{PROGRAM_BASE}.out.txt”，即程序附近的文件，查看《用户手册》以获取可用值的完整列表。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;force-stderr-spec=FORCE_STDERR_SPEC&lt;/td>
 &lt;td>Force standard error of the program to go to this location. Useful for programs with disabled console and programs using the Windows Services Plugin of Nuitka commercial. Defaults to not active, use e.g. &amp;lsquo;{PROGRAM_BASE}.err.txt&amp;rsquo;, i.e. file near your program, check User Manual for full list of available values.&lt;/td>
 &lt;td>强制程序的标准错误转到此位置。对于禁用控制台的程序和使用 Nuitka commercial 的 Windows 服务插件的程序非常有用。默认值为 “未激活”，例如使用“{PROGRAM_BASE}.err.txt”，即程序附近的文件，查看《用户手册》以获取可用值的完整列表。&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>Deployment control:&lt;/th>
 &lt;th>发布控制：&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;deployment&lt;/td>
 &lt;td>Disable code aimed at making finding compatibility issues easier. This will e.g. prevent execution with &amp;ldquo;-c&amp;rdquo; argument, which is often used by code that attempts run a module, and causes a program to start itself over and over potentially. Disable once you deploy to end users, for finding typical issues, this is very helpful during development. Default off.&lt;/td>
 &lt;td>禁用旨在更容易发现兼容性问题的代码。例如，这将阻止“-c ”参数的执行，“-c ”参数通常被试图运行模块的代码所使用，并可能导致程序一次又一次地自动启动。一旦部署给最终用户，则禁用该功能，以查找典型问题，这在开发过程中非常有用。默认关闭。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;no-deployment-flag=FLAG&lt;/td>
 &lt;td>Keep deployment mode, but disable selectively parts of it. Errors from deployment mode will output these identifiers. Default empty.&lt;/td>
 &lt;td>保留部署模式，但有选择地禁用部分功能。部署模式下的错误将输出这些标识符。默认为空。&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>Environment control:&lt;/th>
 &lt;th>环境控制：&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;force-runtime-environment-variable=VARIABLE_SPEC&lt;/td>
 &lt;td>Force an environment variables to a given value. Default empty.&lt;/td>
 &lt;td>强制环境变量为给定值。默认为空。&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>Windows specific controls:&lt;/th>
 &lt;th>Windows 专用控制：&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;windows-console-mode=CONSOLE_MODE&lt;/td>
 &lt;td>Select console mode to use. Default mode is &amp;lsquo;force&amp;rsquo; and creates a console window unless the program was started from one. With &amp;lsquo;disable&amp;rsquo; it doesn&amp;rsquo;t create or use a console at all. With &amp;lsquo;attach&amp;rsquo; an existing console will be used for outputs. With &amp;lsquo;hide&amp;rsquo; a newly spawned console will be hidden and an already existing console will behave like &amp;lsquo;force&amp;rsquo;. Default is &amp;lsquo;force&amp;rsquo;.&lt;/td>
 &lt;td>选择要使用的控制台模式。默认模式为 “force”，会创建一个控制台窗口，除非程序是从控制台窗口启动的。如果使用 “disable”模式，则根本不会创建或使用控制台。使用 “attach”时，将使用现有的控制台进行输出。如果使用 “hide”，新生成的控制台将被隐藏，而已经存在的控制台的行为与 “force ”类似。默认为 “force”。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;windows-icon-from-ico=ICON_PATH&lt;/td>
 &lt;td>Add executable icon. Can be given multiple times for different resolutions or files with multiple icons inside. In the later case, you may also suffix with #&lt;!-- raw HTML omitted --> where n is an integer index starting from 1, specifying a specific icon to be included, and all others to be ignored.&lt;/td>
 &lt;td>添加可执行图标。对于不同分辨率或包含多个图标的文件，可以多次添加。在后一种情况下，还可以使用 #&lt;!-- raw HTML omitted --> 作为后缀，其中 n 是一个从 1 开始的整数索引，用于指定要包含的特定图标，而忽略其他所有图标。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;windows-icon-from-exe=ICON_EXE_PATH&lt;/td>
 &lt;td>Copy executable icons from this existing executable (Windows only).&lt;/td>
 &lt;td>从现有可执行文件中复制可执行文件图标（仅限 Windows）。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;onefile-windows-splash-screen-image=SPLASH_SCREEN_IMAGE&lt;/td>
 &lt;td>When compiling for Windows and onefile, show this while loading the application. Defaults to off.&lt;/td>
 &lt;td>为 Windows 和 onefile 编译时，在加载应用程序时显示此选项。默认为关闭。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;windows-uac-admin&lt;/td>
 &lt;td>Request Windows User Control, to grant admin rights on execution. (Windows only). Defaults to off.&lt;/td>
 &lt;td>请求 Windows 用户控制，授予执行管理权限。（仅限 Windows）。默认为关闭。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;windows-uac-uiaccess&lt;/td>
 &lt;td>Request Windows User Control, to enforce running from a few folders only, remote desktop access. (Windows only). Defaults to off.&lt;/td>
 &lt;td>请求 Windows 用户控制，以强制执行仅从少数文件夹运行的远程桌面访问。&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>macOS specific controls&lt;/th>
 &lt;th>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;macos-create-app-bundle&lt;/td>
 &lt;td>When compiling for macOS, create a bundle rather than a plain binary application. This is the only way to unlock the disabling of console, get high DPI graphics, etc. and implies standalone mode. Defaults to off.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;macos-target-arch=MACOS_TARGET_ARCH&lt;/td>
 &lt;td>What architectures is this to supposed to run on. Default and limit is what the running Python allows for. Default is &amp;ldquo;native&amp;rdquo; which is the architecture the Python is run with.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;macos-app-icon=ICON_PATH&lt;/td>
 &lt;td>Add icon for the application bundle to use. Can be given only one time. Defaults to Python icon if available.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;macos-signed-app-name=MACOS_SIGNED_APP_NAME&lt;/td>
 &lt;td>Name of the application to use for macOS signing. Follow &amp;ldquo;com.YourCompany.AppName&amp;rdquo; naming results for best results, as these have to be globally unique, and will potentially grant protected API accesses.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;macos-app-name=MACOS_APP_NAME&lt;/td>
 &lt;td>Name of the product to use in macOS bundle information. Defaults to base filename of the binary.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;macos-app-mode=APP_MODE&lt;/td>
 &lt;td>Mode of application for the application bundle. When launching a Window, and appearing in Docker is desired, default value &amp;ldquo;gui&amp;rdquo; is a good fit. Without a Window ever, the application is a &amp;ldquo;background&amp;rdquo; application. For UI elements that get to display later, &amp;ldquo;ui-element&amp;rdquo; is in-between. The application will not appear in dock, but get full access to desktop when it does open a Window later.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;macos-sign-identity=MACOS_APP_VERSION&lt;/td>
 &lt;td>When signing on macOS, by default an ad-hoc identify will be used, but with this option your get to specify another identity to use. The signing of code is now mandatory on macOS and cannot be disabled. Use &amp;ldquo;auto&amp;rdquo; to detect your only identity installed. Default &amp;ldquo;ad-hoc&amp;rdquo; if not given.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;macos-sign-notarization&lt;/td>
 &lt;td>When signing for notarization, using a proper TeamID identity from Apple, use the required runtime signing option, such that it can be accepted.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;macos-app-version=MACOS_APP_VERSION&lt;/td>
 &lt;td>Product version to use in macOS bundle information. Defaults to &amp;ldquo;1.0&amp;rdquo; if not given.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;macos-app-protected-resource=RESOURCE_DESC&lt;/td>
 &lt;td>Request an entitlement for access to a macOS protected resources, e.g. &amp;ldquo;NSMicrophoneUsageDescription:Microphone access for recording audio.&amp;rdquo; requests access to the microphone and provides an informative text for the user, why that is needed. Before the colon, is an OS identifier for an access right, then the informative text. Legal values can be found on &lt;a href="https://developer.apple.com/documentation/bundleresources/information_property_list/protected_resources">https://developer.apple.com/documentation/bundleresources/information_property_list/protected_resources&lt;/a> and the option can be specified multiple times. Default empty.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>Linux specific controls&lt;/th>
 &lt;th>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;linux-icon=ICON_PATH&lt;/td>
 &lt;td>Add executable icon for onefile binary to use. Can be given only one time. Defaults to Python icon if available.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>Control the following into imported modules:&lt;/th>
 &lt;th>以下内容控制模块导入：&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;follow-imports&lt;/td>
 &lt;td>Descend into all imported modules. Defaults to on in standalone mode, otherwise off.&lt;/td>
 &lt;td>深入所有导入的模块。独立模式下默认开启，否则关闭。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;follow-import-to=MODULE/PACKAGE&lt;/td>
 &lt;td>Follow to that module if used, or if a package, to the whole package. Can be given multiple times. Default empty.&lt;/td>
 &lt;td>如果使用模块，则指向该模块；如果使用软件包，则指向整个软件包。可多次给出。默认为空。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;nofollow-import-to=MODULE/PACKAGE&lt;/td>
 &lt;td>Do not follow to that module name even if used, or if a package name, to the whole package in any case, overrides all other options. This can also contain patterns, e.g. &amp;ldquo;*.tests&amp;rdquo;. Can be given multiple times. Default empty.&lt;/td>
 &lt;td>即使使用了该模块名，也不要跟随；如果使用了软件包名，则无论如何都要跟随整个软件包，并优先于所有其他选项。也可以包含模式，如 “*.tests”。可多次输入。默认为空。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;nofollow-imports&lt;/td>
 &lt;td>Do not descend into any imported modules at all, overrides all other inclusion options and not usable for standalone mode. Defaults to off.&lt;/td>
 &lt;td>完全不深入任何导入模块，优先于所有其他包含选项，不能用于独立模式。默认为关闭。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;follow-stdlib&lt;/td>
 &lt;td>Also descend into imported modules from standard library. This will increase the compilation time by a lot and is also not well tested at this time and sometimes won&amp;rsquo;t work. Defaults to off.&lt;/td>
 &lt;td>还可以从标准库中导入模块。这将大大增加编译时间，而且目前尚未经过充分测试，有时可能无法正常工作。默认为关闭。&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>Control the inclusion of modules and packages in result:&lt;/th>
 &lt;th>控制结果中模块和包的包含情况：&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;include-package=PACKAGE&lt;/td>
 &lt;td>Include a whole package. Give as a Python namespace, e.g. &amp;ldquo;some_package.sub_package&amp;rdquo; and Nuitka will then find it and include it and all the modules found below that disk location in the binary or extension module it creates, and make it available for import by the code. To avoid unwanted sub packages, e.g. tests you can e.g. do this &amp;ldquo;&amp;ndash;nofollow-import-to=*.tests&amp;rdquo;. Default empty.&lt;/td>
 &lt;td>包含整个包。将其作为 Python 命名空间提供，例如 “some_package.sub_package”，Nuitka 将会找到它并将其包含在生成的二进制文件或扩展模块中，同时包含该磁盘位置下所有找到的模块，并使其可供代码导入。为了避免包含不需要的子包（例如测试包），你可以使用例如 “&amp;ndash;nofollow-import-to=*.tests”。默认值为空。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;include-module=MODULE&lt;/td>
 &lt;td>Include a single module. Give as a Python namespace, e.g. &amp;ldquo;some_package.some_module&amp;rdquo; and Nuitka will then find it and include it in the binary or extension module it creates, and make it available for import by the code. Default empty.&lt;/td>
 &lt;td>包含一个模块。以 Python 命名空间的形式提供，例如 “some_package.some_module”，Nuitka 将会找到该模块并将其包含在生成的二进制文件或扩展模块中，并使其可供代码导入。默认值为空。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;include-plugin-directory=MODULE/PACKAGE&lt;/td>
 &lt;td>Include also the code found in that directory, considering as if they are each given as a main file. Overrides all other inclusion options. You ought to prefer other inclusion options, that go by names, rather than filenames, those find things through being in &amp;ldquo;sys.path&amp;rdquo;. This option is for very special use cases only. Can be given multiple times. Default empty.&lt;/td>
 &lt;td>还应包含该目录中的代码，视其为各自的主文件。覆盖所有其他包含选项。您应优先使用以名称而非文件名进行包含的选项，这些选项通过位于“sys.path”中来查找文件。此选项仅适用于非常特殊的用例。可多次指定。默认值为空。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;include-plugin-files=PATTERN&lt;/td>
 &lt;td>Include into files matching the PATTERN. Overrides all other follow options. Can be given multiple times. Default empty.&lt;/td>
 &lt;td>将符合模式的文件包含进来。覆盖所有其他跟随选项。可以多次指定。默认值为空。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;prefer-source-code&lt;/td>
 &lt;td>For already compiled extension modules, where there is both a source file and an extension module, normally the extension module is used, but it should be better to compile the module from available source code for best performance. If not desired, there is &amp;ndash;no-prefer-source-code to disable warnings about it. Default off.&lt;/td>
 &lt;td>对于已经编译的扩展模块，当同时存在源文件和扩展模块时，通常会使用扩展模块，但为了获得最佳性能，建议从可用的源代码重新编译该模块。如果不希望这样做，可以使用 &amp;ndash;no-prefer-source-code 选项来禁用相关警告。默认关闭。&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>Metadata support&lt;/th>
 &lt;th>元数据支持&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;include-distribution-metadata=DISTRIBUTION&lt;/td>
 &lt;td>Include metadata information for the given distribution name. Some packages check metadata for presence, version, entry points, etc. and without this option given, it only works when it&amp;rsquo;s recognized at compile time which is not always happening. This of course only makes sense for packages that are included in the compilation. Default empty.&lt;/td>
 &lt;td>为给定的分发名称包含元数据信息。某些包会检查元数据以确认其存在、版本、入口点等信息。如果未指定此选项，它仅在编译时被识别时才有效，而这种情况并不总是发生。当然，这仅适用于在编译过程中包含的包。默认值为空。&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>DLL files&lt;/th>
 &lt;th>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;noinclude-dlls=PATTERN&lt;/td>
 &lt;td>Do not include DLL files matching the filename pattern given. This is against the target filename, not source paths. So ignore a DLL &amp;lsquo;someDLL&amp;rsquo; contained in the package &amp;lsquo;package_name&amp;rsquo; it should be matched as &amp;lsquo;package_name/someDLL.*&amp;rsquo;. Default empty.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;list-package-dlls=LIST_PACKAGE_DLLS&lt;/td>
 &lt;td>Output the DLLs found for a given package name. Default not done.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;list-package-exe=LIST_PACKAGE_EXE&lt;/td>
 &lt;td>Output the EXEs found for a given package name. Default not done.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>Control the warnings to be given by Nuitka&lt;/th>
 &lt;th>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;warn-implicit-exceptions&lt;/td>
 &lt;td>Enable warnings for implicit exceptions detected at compile time.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;warn-unusual-code&lt;/td>
 &lt;td>Enable warnings for unusual code detected at compile time.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;assume-yes-for-downloads&lt;/td>
 &lt;td>Allow Nuitka to download external code if necessary, e.g. dependency walker, ccache, and even gcc on Windows. To disable, redirect input from nul device, e.g. &amp;ldquo;&amp;lt;/dev/null&amp;rdquo; or &amp;ldquo;&amp;lt;NUL:&amp;rdquo;. Default is to prompt.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;nowarn-mnemonic=MNEMONIC&lt;/td>
 &lt;td>Disable warning for a given mnemonic. These are given to make sure you are aware of certain topics, and typically point to the Nuitka website. The mnemonic is the part of the URL at the end, without the HTML suffix. Can be given multiple times and accepts shell pattern. Default empty.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>Immediate execution after compilation&lt;/th>
 &lt;th>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;run&lt;/td>
 &lt;td>Execute immediately the created binary (or import the compiled module). Defaults to off.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;debugger&lt;/td>
 &lt;td>Execute inside a debugger, e.g. &amp;ldquo;gdb&amp;rdquo; or &amp;ldquo;lldb&amp;rdquo; to automatically get a stack trace. The debugger is automatically chosen unless specified by name with the NUITKA_DEBUGGER_CHOICE environment variable. Defaults to off.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>Output choices&lt;/th>
 &lt;th>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;output-filename=FILENAME&lt;/td>
 &lt;td>Specify how the executable should be named. For extension modules there is no choice, also not for standalone mode and using it will be an error. This may include path information that needs to exist though. Defaults to &amp;lsquo;&amp;lt;program_name&amp;gt;.exe&amp;rsquo; on this platform.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;output-dir=DIRECTORY&lt;/td>
 &lt;td>Specify where intermediate and final output files should be put. The DIRECTORY will be populated with build folder, dist folder, binaries, etc. Defaults to current directory.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;remove-output&lt;/td>
 &lt;td>Removes the build directory after producing the module or exe file. Defaults to off.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;no-pyi-file&lt;/td>
 &lt;td>Do not create a &amp;lsquo;.pyi&amp;rsquo; file for extension modules created by Nuitka. This is used to detect implicit imports. Defaults to off.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;no-pyi-stubs&lt;/td>
 &lt;td>Do not use stubgen when creating a &amp;lsquo;.pyi&amp;rsquo; file for extension modules created by Nuitka. They expose your API, but stubgen may cause issues. Defaults to off.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>Debug features&lt;/th>
 &lt;th>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;debug&lt;/td>
 &lt;td>Executing all self checks possible to find errors in Nuitka, do not use for production. Defaults to off.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;no-debug-immortal-assumptions&lt;/td>
 &lt;td>Disable check normally done with &amp;ldquo;&amp;ndash;debug&amp;rdquo;. With Python3.12+ do not check known immortal object assumptions. Some C libraries corrupt them. Defaults to check being made if &amp;ldquo;&amp;ndash;debug&amp;rdquo; is on.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;unstripped&lt;/td>
 &lt;td>Keep debug info in the resulting object file for better debugger interaction. Defaults to off.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;profile&lt;/td>
 &lt;td>Enable vmprof based profiling of time spent. Not working currently. Defaults to off.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;trace-execution&lt;/td>
 &lt;td>Traced execution output, output the line of code before executing it. Defaults to off.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;xml=XML_FILENAME&lt;/td>
 &lt;td>Write the internal program structure, result of optimization in XML form to given filename.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;experimental=FLAG&lt;/td>
 &lt;td>Use features declared as &amp;rsquo;experimental&amp;rsquo;. May have no effect if no experimental features are present in the code. Uses secret tags (check source) per experimented feature.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;low-memory&lt;/td>
 &lt;td>Attempt to use less memory, by forking less C compilation jobs and using options that use less memory. For use on embedded machines. Use this in case of out of memory problems. Defaults to off.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;create-environment-from-report=CREATE_ENVIRONMENT_FROM_REPORT&lt;/td>
 &lt;td>Create a new virtualenv in that non-existing path from the report file given with e.g. &amp;lsquo;&amp;ndash;report=compilation-report.xml&amp;rsquo;. Default not done.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;generate-c-only&lt;/td>
 &lt;td>Generate only C source code, and do not compile it to binary or module. This is for debugging and code coverage analysis that doesn&amp;rsquo;t waste CPU. Defaults to off. Do not think you can use this directly.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>Nuitka Development features&lt;/th>
 &lt;th>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;devel-missing-code-helpers&lt;/td>
 &lt;td>Report warnings for code helpers for types that were attempted, but don&amp;rsquo;t exist. This helps to identify opportunities for improving optimization of generated code from type knowledge not used. Default False.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;devel-missing-trust&lt;/td>
 &lt;td>Report warnings for imports that could be trusted, but currently are not. This is to identify opportunities for improving handling of hard modules, where this sometimes could allow more static optimization. Default False.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;devel-recompile-c-only&lt;/td>
 &lt;td>This is not incremental compilation, but for Nuitka development only. Takes existing files and simply compiles them as C again after doing the Python steps. Allows compiling edited C files for manual debugging changes to the generated source. Allows us to add printing, check and print values, but it is now what users would want. Depends on compiling Python source to determine which files it should look at.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;devel-internal-graph&lt;/td>
 &lt;td>Create graph of optimization process internals, do not use for whole programs, but only for small test cases. Defaults to off.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>Cache Control&lt;/th>
 &lt;th>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;disable-cache=DISABLED_CACHES&lt;/td>
 &lt;td>Disable selected caches, specify &amp;ldquo;all&amp;rdquo; for all cached. Currently allowed values are: &amp;ldquo;all&amp;rdquo;,&amp;ldquo;ccache&amp;rdquo;,&amp;ldquo;bytecode&amp;rdquo;,&amp;ldquo;compression&amp;rdquo;,&amp;ldquo;dll-dependencies&amp;rdquo;. can be given multiple times or with comma separated values. Default none.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;clean-cache=CLEAN_CACHES&lt;/td>
 &lt;td>Clean the given caches before executing, specify &amp;ldquo;all&amp;rdquo; for all cached. Currently allowed values are: &amp;ldquo;all&amp;rdquo;,&amp;ldquo;ccache&amp;rdquo;,&amp;ldquo;bytecode&amp;rdquo;,&amp;ldquo;compression&amp;rdquo;,&amp;ldquo;dll-dependencies&amp;rdquo;. can be given multiple times or with comma separated values. Default none.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;force-dll-dependency-cache-update&lt;/td>
 &lt;td>For an update of the dependency walker cache. Will result in much longer times to create the distribution folder, but might be used in case the cache is suspect to cause errors or known to need an update.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>PGO compilation choices&lt;/th>
 &lt;th>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;pgo-c&lt;/td>
 &lt;td>Enables C level profile guided optimization (PGO), by executing a dedicated build first for a profiling run, and then using the result to feedback into the C compilation. Note: This is experimental and not working with standalone modes of Nuitka yet. Defaults to off.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;pgo-args=PGO_ARGS&lt;/td>
 &lt;td>Arguments to be passed in case of profile guided optimization. These are passed to the special built executable during the PGO profiling run. Default empty.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;pgo-executable=PGO_EXECUTABLE&lt;/td>
 &lt;td>Command to execute when collecting profile information. Use this only, if you need to launch it through a script that prepares it to run. Default use created program.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>Tracing features&lt;/th>
 &lt;th>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;report=REPORT_FILENAME&lt;/td>
 &lt;td>Report module, data files, compilation, plugin, etc. details in an XML output file. This is also super useful for issue reporting. These reports can e.g. be used to re-create the environment easily using it with &amp;lsquo;&amp;ndash;create-environment-from-report&amp;rsquo;, but contain a lot of information. Default is off.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;report-diffable&lt;/td>
 &lt;td>Report data in diffable form, i.e. no timing or memory usage values that vary from run to run. Default is off.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;report-user-provided=KEY_VALUE&lt;/td>
 &lt;td>Report data from you. This can be given multiple times and be anything in &amp;lsquo;key=value&amp;rsquo; form, where key should be an identifier, e.g. use &amp;lsquo;&amp;ndash;report-user-provided=pipenv-lock-hash=64a5e4&amp;rsquo; to track some input values. Default is empty.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;report-template=REPORT_DESC&lt;/td>
 &lt;td>Report via template. Provide template and output filename &amp;rsquo;template.rst.j2:output.rst&amp;rsquo;. For built-in templates, check the User Manual for what these are. Can be given multiple times. Default is empty.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;quiet&lt;/td>
 &lt;td>Disable all information outputs, but show warnings. Defaults to off.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;show-scons&lt;/td>
 &lt;td>Run the C building backend Scons with verbose information, showing the executed commands, detected compilers. Defaults to off.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;no-progressbar&lt;/td>
 &lt;td>Disable progress bars. Defaults to off.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;show-progress&lt;/td>
 &lt;td>Obsolete: Provide progress information and statistics. Disables normal progress bar. Defaults to off.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;show-memory&lt;/td>
 &lt;td>Provide memory information and statistics. Defaults to off.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;show-modules&lt;/td>
 &lt;td>Provide information for included modules and DLLs Obsolete: You should use &amp;lsquo;&amp;ndash;report&amp;rsquo; file instead. Defaults to off.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;show-modules-output=PATH&lt;/td>
 &lt;td>Where to output &amp;lsquo;&amp;ndash;show-modules&amp;rsquo;, should be a filename. Default is standard output.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;verbose&lt;/td>
 &lt;td>Output details of actions taken, esp. in optimizations. Can become a lot. Defaults to off.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;verbose-output=PATH&lt;/td>
 &lt;td>Where to output from &amp;lsquo;&amp;ndash;verbose&amp;rsquo;, should be a filename. Default is standard output.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>Binary Version Information&lt;/th>
 &lt;th>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;company-name=COMPANY_NAME&lt;/td>
 &lt;td>Name of the company to use in version information. Defaults to unused.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;product-name=PRODUCT_NAME&lt;/td>
 &lt;td>Name of the product to use in version information. Defaults to base filename of the binary.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;file-version=FILE_VERSION&lt;/td>
 &lt;td>File version to use in version information. Must be a sequence of up to 4 numbers, e.g. 1.0 or 1.0.0.0, no more digits are allowed, no strings are allowed. Defaults to unused.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;product-version=PRODUCT_VERSION&lt;/td>
 &lt;td>Product version to use in version information. Same rules as for file version. Defaults to unused.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;file-description=FILE_DESCRIPTION&lt;/td>
 &lt;td>Description of the file used in version information. Windows only at this time. Defaults to binary filename.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;copyright=COPYRIGHT_TEXT&lt;/td>
 &lt;td>Copyright used in version information. Windows/macOS only at this time. Defaults to not present.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;trademarks=TRADEMARK_TEXT&lt;/td>
 &lt;td>Trademark used in version information. Windows/macOS only at this time. Defaults to not present.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>Plugin control&lt;/th>
 &lt;th>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;enable-plugins=PLUGIN_NAME&lt;/td>
 &lt;td>Enabled plugins. Must be plug-in names. Use &amp;lsquo;&amp;ndash;plugin-list&amp;rsquo; to query the full list and exit. Default empty.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;disable-plugins=PLUGIN_NAME&lt;/td>
 &lt;td>Disabled plugins. Must be plug-in names. Use &amp;lsquo;&amp;ndash;plugin-list&amp;rsquo; to query the full list and exit. Most standard plugins are not a good idea to disable. Default empty.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;user-plugin=PATH&lt;/td>
 &lt;td>The file name of user plugin. Can be given multiple times. Default empty.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;plugin-list&lt;/td>
 &lt;td>Show list of all available plugins and exit. Defaults to off.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;plugin-no-detection&lt;/td>
 &lt;td>Plugins can detect if they might be used, and the you can disable the warning via &amp;ldquo;&amp;ndash;disable-plugin=plugin-that-warned&amp;rdquo;, or you can use this option to disable the mechanism entirely, which also speeds up compilation slightly of course as this detection code is run in vain once you are certain of which plugins to use. Defaults to off.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;module-parameter=MODULE_PARAMETERS&lt;/td>
 &lt;td>Provide a module parameter. You are asked by some packages to provide extra decisions. Format is currently &amp;ndash;module-parameter=module.name-option-name=value Default empty.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;show-source-changes=SHOW_SOURCE_CHANGES&lt;/td>
 &lt;td>Show source changes to original Python file content before compilation. Mostly intended for developing plugins and Nuitka package configuration. Use e.g. &amp;lsquo;&amp;ndash;show-source-changes=numpy.**&amp;rsquo; to see all changes below a given namespace or use &amp;lsquo;*&amp;rsquo; to see everything which can get a lot. Default empty.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>Cross compilation&lt;/th>
 &lt;th>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;target=TARGET_DESC&lt;/td>
 &lt;td>Cross compilation target. Highly experimental and in development, not supposed to work yet. We are working on &amp;lsquo;&amp;ndash;target=wasi&amp;rsquo; and nothing else yet.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>Plugin options of &amp;lsquo;anti-bloat&amp;rsquo; (categories: core)&lt;/th>
 &lt;th>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;show-anti-bloat-changes&lt;/td>
 &lt;td>Annotate what changes are done by the plugin.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;noinclude-setuptools-mode=NOINCLUDE_SETUPTOOLS_MODE&lt;/td>
 &lt;td>What to do if a &amp;lsquo;setuptools&amp;rsquo; or import is encountered. This package can be big with dependencies, and should definitely be avoided. Also handles &amp;lsquo;setuptools_scm&amp;rsquo;.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;noinclude-pytest-mode=NOINCLUDE_PYTEST_MODE&lt;/td>
 &lt;td>What to do if a &amp;lsquo;pytest&amp;rsquo; import is encountered. This package can be big with dependencies, and should definitely be avoided. Also handles &amp;rsquo;nose&amp;rsquo; imports.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;noinclude-unittest-mode=NOINCLUDE_UNITTEST_MODE&lt;/td>
 &lt;td>What to do if a unittest import is encountered. This package can be big with dependencies, and should definitely be avoided.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;noinclude-pydoc-mode=NOINCLUDE_PYDOC_MODE&lt;/td>
 &lt;td>What to do if a pydoc import is encountered. This package use is mark of useless code for deployments and should be avoided.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;noinclude-IPython-mode=NOINCLUDE_IPYTHON_MODE&lt;/td>
 &lt;td>What to do if a IPython import is encountered. This package can be big with dependencies, and should definitely be avoided.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;noinclude-dask-mode=NOINCLUDE_DASK_MODE&lt;/td>
 &lt;td>What to do if a &amp;lsquo;dask&amp;rsquo; import is encountered. This package can be big with dependencies, and should definitely be avoided.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;noinclude-numba-mode=NOINCLUDE_NUMBA_MODE&lt;/td>
 &lt;td>What to do if a &amp;rsquo;numba&amp;rsquo; import is encountered. This package can be big with dependencies, and is currently not working for standalone. This package is big with dependencies, and should definitely be avoided.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;noinclude-default-mode=NOINCLUDE_DEFAULT_MODE&lt;/td>
 &lt;td>This actually provides the default &amp;ldquo;warning&amp;rdquo; value for above options, and can be used to turn all of these on.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;ndash;noinclude-custom-mode=CUSTOM_CHOICES&lt;/td>
 &lt;td>What to do if a specific import is encountered. Format is module name, which can and should be a top level package and then one choice, &amp;ldquo;error&amp;rdquo;, &amp;ldquo;warning&amp;rdquo;, &amp;ldquo;nofollow&amp;rdquo;, e.g. PyQt5:error.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>Plugin options of &amp;lsquo;playwright&amp;rsquo; (categories: package-support)&lt;/th>
 &lt;th>“playwright”插件选项（分类：包支持）&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;playwright-include-browser=INCLUDE_BROWSERS&lt;/td>
 &lt;td>Playwright browser to include by name. Can be specified multiple times. Use &amp;ldquo;all&amp;rdquo; to include all installed browsers or use &amp;ldquo;none&amp;rdquo; to exclude all browsers.&lt;/td>
 &lt;td>Playwright浏览器按名称包含。可多次指定。使用“all”包含所有已安装的浏览器，或使用“none”排除所有浏览器。&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>Plugin options of &amp;lsquo;spacy&amp;rsquo; (categories: package-support)&lt;/th>
 &lt;th>&amp;lsquo;spacy&amp;rsquo; 插件选项（分类：包支持）&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&amp;ndash;spacy-language-model=INCLUDE_LANGUAGE_MODELS&lt;/td>
 &lt;td>Spacy language models to use. Can be specified multiple times. Use &amp;lsquo;all&amp;rsquo; to include all downloaded models.&lt;/td>
 &lt;td>可用的Spacy语言模型。可以多次指定。使用&amp;rsquo;all&amp;rsquo;以包含所有已下载的模型。&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item></channel></rss>