<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on 瘦了就帅了</title><link>https://blog.cuile.com/tags/docker/</link><description>Recent content in Docker on 瘦了就帅了</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 10 May 2022 16:30:13 +0800</lastBuildDate><atom:link href="https://blog.cuile.com/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Django 开发简介</title><link>https://blog.cuile.com/posts/django/django_development_introduction/</link><pubDate>Tue, 10 May 2022 16:30:13 +0800</pubDate><guid>https://blog.cuile.com/posts/django/django_development_introduction/</guid><description>
开发环境 开发环境还是建议使用 Docker 来搭建，方便快捷。 不过 Django 的官方镜像已经弃用了，官方建议新版本使用 Python 官方提供的镜像来构建。
Django 的 LTS 版本是 3.2.13，Python 稳定版本镜像是 3.9.12-buster ，所以建议使用这两个版本来构建 Django 环境。
环境搭建 可以参考[https://github.com/Cuile/Docker-to-Python/tree/master/Django]，提供了 Dockerfil、yml 文件，还提供全套使用命令。
配置项 修改配置后，建议使用项目调试的方式启动，不要使用快捷命令，项目正常启动稳定运行后，再使用快捷命令。
ALLOWED_HOSTS = [&amp;#39;*&amp;#39;] # 任意地址都可以访问 Django LANGUAGE_CODE = &amp;#39;en-us&amp;#39; # 这个与多语种有关，在项目初始阶段不要修改，后续添加了多语种支持再修改，否则会导致无法启动。 # 具体参考[http://www.i18nguy.com/unicode/language-identifiers.html]，有个傻逼教程，上来就改成 zh-CN 果然导致项目无法正常启动。 TIME_ZONE = &amp;#39;Asia/Shanghai&amp;#39; # 时区，上海就代表北京时间，这个不能写错，写错就启动不了 # 具体参考[https://en.wikipedia.org/wiki/List_of_tz_database_time_zones]，这里是标准的，有个傻逼教程非给写成 Asia/Beijing 导致怎么都起不来，太TMD的二逼了。 常用命令 # 创建项目 $ django-admin startproject xxx $ cd xxx # 生成项目 $ python manage.py startapp websrc # 运行项目测试 $ python manage.</description></item><item><title>CentOS 7 安装 Docker</title><link>https://blog.cuile.com/posts/docker/docker_install_centos/</link><pubDate>Fri, 06 May 2022 11:05:23 +0800</pubDate><guid>https://blog.cuile.com/posts/docker/docker_install_centos/</guid><description>
其实网上相关的文章已经非常多了，所以这篇文章的作用只是记录和明确一条确定可行的操作路径，为以后的操作节省时间，毕竟像我一样大部分人都不是专业的系统管理员，能够快速解决问题就可以了，并不想做过多的专业研究与探索。
本操作手册是官方手册与网上手册的结合版本，集两家之所长，亲自操作可用。
1.系统准备 查看系统版本 $ cat /etc/redhat-release &amp;gt; CentOS Linux release 7.6.1810 (Core) // CentOs 7 以上版本 查看系统内核版本 $ uname -r &amp;gt; 4.10.4-1.el7.elrepo.x86_64 // 内核版本要&amp;gt;3.10 2.卸载旧版本 $ yum remove docker \ docker-client \ docker-client-latest \ docker-common \ docker-latest \ docker-latest-logrotate \ docker-logrotate \ docker-selinux \ docker-engine-selinux \ docker-engine 3.安装依赖包 $ yum install -y yum-utils \ device-mapper-persistent-data \ lvm2 4.</description></item><item><title>Docker使用命令</title><link>https://blog.cuile.com/posts/docker/docker_cli/</link><pubDate>Thu, 13 Jan 2022 22:20:52 +0800</pubDate><guid>https://blog.cuile.com/posts/docker/docker_cli/</guid><description>
镜像列表 $ docker image ls -a # or $ docker images 容器列表 $ docker container ls -a # or $ docker ps 删除冗余镜像 $ docker system prune 创建桥接网络 $ docker network create [name] Docker快捷命令 $ echo &amp;#34;alias d-ll=&amp;#39;docker image ls -a; echo; docker container ls -a&amp;#39;&amp;#34; &amp;gt;&amp;gt; ~/.bashrc \ &amp;amp;&amp;amp; echo &amp;#34;alias d-ps=&amp;#39;docker ps&amp;#39;&amp;#34; &amp;gt;&amp;gt; ~/.bashrc \ &amp;amp;&amp;amp; echo &amp;#34;alias d-clean=&amp;#39;docker system prune -f&amp;#39;&amp;#34; &amp;gt;&amp;gt; ~/.bashrc \ &amp;amp;&amp;amp; echo &amp;#34;alias d-rm=&amp;#39;_a(){ docker image rm $1; echo; docker container rm $1; }; _a&amp;#39;&amp;#34; &amp;gt;&amp;gt; ~/.</description></item></channel></rss>