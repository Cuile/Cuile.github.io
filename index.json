[{"authors":null,"categories":null,"content":"PostgreSQL 频繁读写数据库的定期维护 是的，频繁读写的 PostgreSQL 数据库绝对需要定期维护。这是保证数据库长期稳定运行、维持高性能和避免数据损坏的关键措施。\n🔧 必须的定期维护任务 1. VACUUM 维护（最重要） -- 常规VACUUM（推荐每日执行） VACUUM ANALYZE; -- 针对特定表的VACUUM VACUUM ANALYZE your_busiest_table; -- 彻底的VACUUM（建议每周或每月） VACUUM FULL VERBOSE; 2. ANALYZE 统计信息更新 -- 更新统计信息（查询优化器需要） ANALYZE VERBOSE; -- 针对特定表 ANALYZE VERBOSE your_busiest_table; 3. 索引维护 -- 重建碎片化严重的索引 REINDEX INDEX your_index_name; REINDEX TABLE your_table_name; -- 并发重建（PostgreSQL 12+） REINDEX INDEX CONCURRENTLY your_index_name; 📅 推荐维护计划 每日维护 -- 自动VACUUM通常足够，但可以补充 VACUUM ANALYZE; 每周维护 -- 更彻底的维护 VACUUM FULL ANALYZE; CHECKPOINT; 每月维护 -- 全面维护 REINDEX DATABASE your_database; VACUUM FULL VERBOSE; ANALYZE VERBOSE; ⚙️ 自动化维护配置 1. 调整 autovacuum 设置（postgresql.conf） # 针对频繁读写数据库的优化设置 autovacuum = on autovacuum_vacuum_scale_factor = 0.1 autovacuum_analyze_scale_factor = 0.05 autovacuum_vacuum_cost_delay = 10ms autovacuum_vacuum_cost_limit = 1000 2. 使用 pg_cron 扩展定时任务 -- 安装pg_cron CREATE EXTENSION pg_cron; -- 每天凌晨3点执行VACUUM SELECT cron.schedule(\u0026#39;0 3 * * *\u0026#39;, \u0026#39;VACUUM ANALYZE\u0026#39;); -- 每周日凌晨2点执行维护 SELECT cron.schedule(\u0026#39;0 2 * * 0\u0026#39;, \u0026#39;VACUUM FULL ANALYZE\u0026#39;); 3. 操作系统定时任务（crontab） # 每天执行维护 0 2 * * * psql -d your_db -c \u0026#34;VACUUM ANALYZE\u0026#34; # 每周执行全面维护 0 3 * * 0 psql -d your_db -c \u0026#34;VACUUM FULL ANALYZE; REINDEX DATABASE your_db\u0026#34; 📊 监控和维护检查 1. 监控数据库状态 -- 检查表膨胀情况 SELECT schemaname, tablename, n_dead_tup, n_live_tup, round(n_dead_tup::numeric/n_live_tup::numeric*100, 2) as dead_ratio FROM pg_stat_user_tables ORDER BY dead_ratio DESC; -- 检查索引状态 SELECT schemaname, tablename, indexname, idx_scan, idx_tup_read, idx_tup_fetch FROM pg_stat_user_indexes; 2. 检查 autovacuum 效果 -- 查看autovacuum统计信息 SELECT relname, last_vacuum, last_autovacuum, last_analyze, last_autoanalyze FROM pg_stat_user_tables; 🚨 维护注意事项 维护时间窗口：选择业务低峰期进行 VACUUM FULL 谨慎使用：会锁表，影响业务 监控维护影响：使用 VERBOSE 选项查看详细情况 备份优先：重要维护前先备份数据 🎯 针对频繁读写数据库的特殊维护 -- 针对热点表增加维护频率 ALTER TABLE your_busy_table SET ( autovacuum_vacuum_scale_factor = 0.05, autovacuum_analyze_scale_factor = 0.02 ); -- 监控长事务和锁 SELECT * FROM pg_locks WHERE granted = false; SELECT * FROM pg_stat_activity WHERE state \u0026lt;\u0026gt; \u0026#39;idle\u0026#39;; 💡 维护最佳实践 定期检查：每周检查数据库状态 自动化：尽可能自动化维护任务 文档化：记录维护历史和问题 测试：在测试环境验证维护脚本 容量规划：定期评估存储增长趋势 总结：对于频繁读写的 PostgreSQL 数据库，定期维护不是可选项，而是必需品。通过合理的维护计划，可以确保数据库的性能稳定性和数据完整性。\n","date":1758378366,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"0e7fd0b9ed89585893c0ddd82ba7cb4a","permalink":"https://blog.cuile.com/post/database/postgresql_manual/","publishdate":"2025-09-20T22:26:06+08:00","relpermalink":"/post/database/postgresql_manual/","section":"post","summary":"PostgreSQL 频繁读写数据库的定期维护 是的，频繁读写的 PostgreSQL 数据库绝对需要定期维护。这是保证数据库长期稳定运行、维持高性能和避免数据损坏的关键措施。\n🔧 必须的定期维护任务 1. VACUUM 维护（最重要） -- 常规VACUUM（推荐每日执行） VACUUM ANALYZE; -- 针对特定表的VACUUM VACUUM ANALYZE your_busiest_table; -- 彻底的VACUUM（建议每周或每月） VACUUM FULL VERBOSE; 2. ANALYZE 统计信息更新 -- 更新统计信息（查询优化器需要） ANALYZE VERBOSE; -- 针对特定表 ANALYZE VERBOSE your_busiest_table; 3. 索引维护 -- 重建碎片化严重的索引 REINDEX INDEX your_index_name; REINDEX TABLE your_table_name; -- 并发重建（PostgreSQL 12+） REINDEX INDEX CONCURRENTLY your_index_name; 📅 推荐维护计划 每日维护 -- 自动VACUUM通常足够，但可以补充 VACUUM ANALYZE; 每周维护 -- 更彻底的维护 VACUUM FULL ANALYZE; CHECKPOINT; 每月维护 -- 全面维护 REINDEX DATABASE your_database; VACUUM FULL VERBOSE; ANALYZE VERBOSE; ⚙️ 自动化维护配置 1. 调整 autovacuum 设置（postgresql.conf） # 针对频繁读写数据库的优化设置 autovacuum = on autovacuum_vacuum_scale_factor = 0.1 autovacuum_analyze_scale_factor = 0.05 autovacuum_vacuum_cost_delay = 10ms autovacuum_vacuum_cost_limit = 1000 2. 使用 pg_cron 扩展定时任务 -- 安装pg_cron CREATE EXTENSION pg_cron; -- 每天凌晨3点执行VACUUM SELECT cron.schedule('0 3 * * *', 'VACUUM ANALYZE'); -- 每周日凌晨2点执行维护 SELECT cron.schedule('0 2 * * 0', 'VACUUM FULL ANALYZE'); 3. 操作系统定时任务（crontab） # 每天执行维护 0 2 * * * psql -d your_db -c \"VACUUM ANALYZE\" # 每周执行全面维护 0 3 * * 0 psql -d your_db -c \"VACUUM FULL ANALYZE; REINDEX DATABASE your_db\" 📊 监控和维护检查 1. 监控数据库状态 -- 检查表膨胀情况 SELECT schemaname, tablename, n_dead_tup, n_live_tup, round(n_dead_tup::numeric/n_live_tup::numeric*100, 2) as dead_ratio FROM pg_stat_user_tables ORDER BY dead_ratio DESC; -- 检查索引状态 SELECT schemaname, tablename, indexname, idx_scan, idx_tup_read, idx_tup_fetch FROM pg_stat_user_indexes; 2. 检查 autovacuum 效果 -- 查看autovacuum统计信息 SELECT relname, last_vacuum, last_autovacuum, last_analyze, last_autoanalyze FROM pg_stat_user_tables; 🚨 维护注意事项 维护时间窗口：选择业务低峰期进行 VACUUM FULL 谨慎使用：会锁表，影响业务 监控维护影响：使用 VERBOSE 选项查看详细情况 备份优先：重要维护前先备份数据 🎯 针对频繁读写数据库的特殊维护 -- 针对热点表增加维护频率 ALTER TABLE your_busy_table SET ( autovacuum_vacuum_scale_factor = 0.05, autovacuum_analyze_scale_factor = 0.02 ); -- 监控长事务和锁 SELECT * FROM pg_locks WHERE granted = false; SELECT * FROM pg_stat_activity WHERE state \u003c\u003e 'idle'; 💡 维护最佳实践 定期检查：每周检查数据库状态 自动化：尽可能自动化维护任务 文档化：记录维护历史和问题 测试：在测试环境验证维护脚本 容量规划：定期评估存储增长趋势 总结：对于频繁读写的 PostgreSQL 数据库，定期维护不是可选项，而是必需品。通过合理的维护计划，可以确保数据库的性能稳定性和数据完整性。\n","tags":["postgresql","database"],"title":"PostgreSQL维护手册","type":"post"},{"authors":null,"categories":null,"content":"Debian 12 只安装VNC及i3桌面，就可以低成本的实现远程桌面环境\n安装 # 安装通用工具 apt-get install -y nano net-tools bzip2 procps apt-utils iputils-ping netcat-openbsd # 安装中文字体 apt-get install -y locales fonts-wqy-microhei fonts-wqy-zenhei xfonts-wqy \u0026amp;\u0026amp; \\ sed -i -e \u0026#34;s/# zh_CN.UTF-8 UTF-8/zh_CN.UTF-8 UTF-8/\u0026#34; /etc/locale.gen \u0026amp;\u0026amp; \\ locale-gen zh_CN.UTF-8 \u0026amp;\u0026amp;\\ update-locale LANG=zh_CN.UTF-8 LANGUAGE=zh_CN:zh LC_ALL=zh_CN.UTF-8 # 安装VNC apt-get install -y tigervnc-standalone-server # 安装i3桌面 apt-get install -y i3-wm i3status i3blocks dmenu xfonts-base terminator dbus-x11 libdbus-glib-1-2 ; apt-get purge -y pm-utils *screensaver* apt-get clean 配置i3桌面 ~/.config/i3/config\n# This file has been auto-generated by i3-config-wizard(1). # It will not be overwritten, so edit it as you like. # # Should you change your keyboard layout some time, delete # this file and re-run i3-config-wizard(1). # # i3 config file (v4) # # Please see https://i3wm.org/docs/userguide.html for a complete reference! set $mod Mod1 # Font for window titles. Will also be used by the bar unless a different font # is used in the bar {} block below. # This font is widely installed, provides lots of unicode glyphs, right-to-left # text rendering and scalability on retina/hidpi displays (thanks to pango). #font pango:DejaVu Sans Mono 8 font pango:monospace 8 # Start XDG autostart .desktop files using dex. See also # https://wiki.archlinux.org/index.php/XDG_Autostart # exec --no-startup-id dex --autostart --environment i3 # The combination of xss-lock, nm-applet and pactl is a popular choice, so # they are included here as an example. Modify as you see fit. # xss-lock grabs a logind suspend inhibit lock and will use i3lock to lock the # screen before suspend. Use loginctl lock-session to lock your screen. # exec --no-startup-id xss-lock --transfer-sleep-lock -- i3lock --nofork # NetworkManager is the most popular way to manage wireless networks on Linux, # and nm-applet is a desktop environment-independent system tray GUI for it. # exec --no-startup-id nm-applet # Use pactl to adjust volume in PulseAudio. # set $refresh_i3status killall -SIGUSR1 i3status # bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% \u0026amp;\u0026amp; $refresh_i3status # bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% \u0026amp;\u0026amp; $refresh_i3status # bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle \u0026amp;\u0026amp; $refresh_i3status # bindsym XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle \u0026amp;\u0026amp; $refresh_i3status # Use Mouse+$mod to drag floating windows to their wanted position floating_modifier $mod # move tiling windows via drag \u0026amp; drop by left-clicking into the title bar, # or left-clicking anywhere into the window while holding the floating modifier. tiling_drag modifier titlebar # start a terminal bindsym $mod+Return exec i3-sensible-terminal # kill focused window bindsym $mod+Shift+q kill # start dmenu (a program launcher) bindsym $mod+d exec --no-startup-id dmenu_run # A more modern dmenu replacement is rofi: # bindcode $mod+40 exec \u0026#34;rofi -modi drun,run -show drun\u0026#34; # There also is i3-dmenu-desktop which only displays applications shipping a # .desktop file. It is a wrapper around dmenu, so you need that installed. # bindcode $mod+40 exec --no-startup-id i3-dmenu-desktop # change focus bindsym $mod+j focus left bindsym $mod+k focus down bindsym $mod+l focus up bindsym $mod+semicolon focus right # alternatively, you can use the cursor keys: bindsym $mod+Left focus left bindsym $mod+Down focus down bindsym $mod+Up focus up bindsym $mod+Right focus right # move focused window bindsym $mod+Shift+j move left bindsym $mod+Shift+k move down bindsym $mod+Shift+l move up bindsym $mod+Shift+semicolon move right # alternatively, you can use the cursor keys: bindsym $mod+Shift+Left move left bindsym $mod+Shift+Down move down bindsym $mod+Shift+Up move up bindsym $mod+Shift+Right move right # split in horizontal orientation bindsym $mod+h split h # split in vertical orientation bindsym $mod+v split v # enter fullscreen mode for the focused container bindsym $mod+f fullscreen toggle # change container layout (stacked, tabbed, toggle split) bindsym $mod+s layout stacking bindsym $mod+w layout tabbed bindsym $mod+e layout toggle split # toggle tiling / floating bindsym $mod+Shift+space floating toggle # change focus between tiling / floating windows bindsym $mod+space focus mode_toggle # focus the parent container bindsym $mod+a focus parent # focus the child container #bindsym $mod+d focus child # Define names for default workspaces for which we configure key bindings later on. # We use variables to avoid repeating the names in multiple places. set $ws1 \u0026#34;1\u0026#34; set $ws2 \u0026#34;2\u0026#34; set $ws3 \u0026#34;3\u0026#34; set $ws4 \u0026#34;4\u0026#34; set $ws5 \u0026#34;5\u0026#34; set $ws6 \u0026#34;6\u0026#34; set $ws7 \u0026#34;7\u0026#34; set $ws8 \u0026#34;8\u0026#34; set $ws9 \u0026#34;9\u0026#34; set $ws10 \u0026#34;10\u0026#34; # switch to workspace bindsym $mod+1 workspace number $ws1 bindsym $mod+2 workspace number $ws2 bindsym $mod+3 workspace number $ws3 bindsym …","date":1754996497,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"2a16098c1bfc8b3ff7e7e2f8d56e3095","permalink":"https://blog.cuile.com/post/linux/vnc/","publishdate":"2025-08-12T19:01:37+08:00","relpermalink":"/post/linux/vnc/","section":"post","summary":"Debian 12 只安装VNC及i3桌面，就可以低成本的实现远程桌面环境\n安装 # 安装通用工具 apt-get install -y nano net-tools bzip2 procps apt-utils iputils-ping netcat-openbsd # 安装中文字体 apt-get install -y locales fonts-wqy-microhei fonts-wqy-zenhei xfonts-wqy \u0026\u0026 \\ sed -i -e \"s/# zh_CN.UTF-8 UTF-8/zh_CN.UTF-8 UTF-8/\" /etc/locale.gen \u0026\u0026 \\ locale-gen zh_CN.UTF-8 \u0026\u0026\\ update-locale LANG=zh_CN.UTF-8 LANGUAGE=zh_CN:zh LC_ALL=zh_CN.UTF-8 # 安装VNC apt-get install -y tigervnc-standalone-server # 安装i3桌面 apt-get install -y i3-wm i3status i3blocks dmenu xfonts-base terminator dbus-x11 libdbus-glib-1-2 ; apt-get purge -y pm-utils *screensaver* apt-get clean 配置i3桌面 ~/.config/i3/config\n","tags":["linux","vnc","tigerVNC","i3","debian"],"title":"Debian 12 极简远程桌面","type":"post"},{"authors":null,"categories":null,"content":"修改CT虚拟机 修改特权容器 nano /etc/pve/lxc/\u0026lt;CTID\u0026gt;.conf 删除或注释掉 unprivileged: 1 这一行。 确保没有 lxc.idmap 相关的UID/GID映射配置（如有则删除）。 CT虚拟机必须是特权容器，但创建CT虚拟机时，默认为非特权容器，要特别注意！！！\n安装 apt update # 安装 Podman apt install -y podman pipx iptables # iptables必须安装，否则netavark无法运行 # 安装 podman-compose apt install pipx \\ \u0026amp;\u0026amp; pipx install podman-compose \\ \u0026amp;\u0026amp; echo \u0026#39;export PATH=\u0026#34;$HOME/.local/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bashrc \\ \u0026amp;\u0026amp; . ~/.bashrc # 验证安装 podman version ; podman-compose version # 防火墙一定要加这条，否则容器之间的名称解析无法工作 iptables -A INPUT -p udp -m udp --dport 53 -j ACCEPT 配置 # 配置国内镜像源 sed -E -i.bak \\ -e \u0026#39;s/^# (unqualified-search-registries = ).+$/\\1[\u0026#34;docker.io\u0026#34;]/\u0026#39; \\ -e \u0026#39;s/^# (\\[\\[registry\\]\\])$/\\1/\u0026#39; \\ -e \u0026#39;s/^# (prefix = ).+\u0026#34;$/\\1\u0026#34;docker.io\u0026#34;/\u0026#39; \\ -e \u0026#39;0,\\/^# (location = ).+\u0026#34;$/s//\\1\u0026#34;docker.1ms.run\u0026#34;/\u0026#39; \\ -e \u0026#39;0,\\/^# (\\[\\[registry.mirror\\]\\])$/s//\\1/\u0026#39; \\ -e \u0026#39;0,\\/^# (location = ).*\u0026#34;$/s//\\1\u0026#34;registry.cn-hangzhou.aliyuncs.com\u0026#34;/\u0026#39; \\ /etc/containers/registries.conf # nano /etc/containers/registries.conf unqualified-search-registries = [\u0026#34;docker.io\u0026#34;] [[registry]] prefix = \u0026#34;docker.io\u0026#34; location = \u0026#34;docker.1ms.run\u0026#34; [[registry.mirror]] location = \u0026#34;registry.cn-hangzhou.aliyuncs.com\u0026#34; # 可选备用 其实命令与Docker一致，非常方便好用。\nDocker / Podman 安装与换源 国内 Docker 服务状态 \u0026amp; 镜像加速监控 ","date":1753181379,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"00893aaa9505be232d502f9b8aef61cb","permalink":"https://blog.cuile.com/post/container/podman/","publishdate":"2025-07-22T18:49:39+08:00","relpermalink":"/post/container/podman/","section":"post","summary":"修改CT虚拟机 修改特权容器 nano /etc/pve/lxc/\u003cCTID\u003e.conf 删除或注释掉 unprivileged: 1 这一行。 确保没有 lxc.idmap 相关的UID/GID映射配置（如有则删除）。 CT虚拟机必须是特权容器，但创建CT虚拟机时，默认为非特权容器，要特别注意！！！\n安装 apt update # 安装 Podman apt install -y podman pipx iptables # iptables必须安装，否则netavark无法运行 # 安装 podman-compose apt install pipx \\ \u0026\u0026 pipx install podman-compose \\ \u0026\u0026 echo 'export PATH=\"$HOME/.local/bin:$PATH\"' \u003e\u003e ~/.bashrc \\ \u0026\u0026 . ~/.bashrc # 验证安装 podman version ; podman-compose version # 防火墙一定要加这条，否则容器之间的名称解析无法工作 iptables -A INPUT -p udp -m udp --dport 53 -j ACCEPT 配置 # 配置国内镜像源 sed -E -i.bak \\ -e 's/^# (unqualified-search-registries = ).+$/\\1[\"docker.io\"]/' \\ -e 's/^# (\\[\\[registry\\]\\])$/\\1/' \\ -e 's/^# (prefix = ).+\"$/\\1\"docker.io\"/' \\ -e '0,\\/^# (location = ).+\"$/s//\\1\"docker.1ms.run\"/' \\ -e '0,\\/^# (\\[\\[registry.mirror\\]\\])$/s//\\1/' \\ -e '0,\\/^# (location = ).*\"$/s//\\1\"registry.cn-hangzhou.aliyuncs.com\"/' \\ /etc/containers/registries.conf # nano /etc/containers/registries.conf unqualified-search-registries = [\"docker.io\"] [[registry]] prefix = \"docker.io\" location = \"docker.1ms.run\" [[registry.mirror]] location = \"registry.cn-hangzhou.aliyuncs.com\" # 可选备用 其实命令与Docker一致，非常方便好用。\n","tags":["linux","podman","container"],"title":"PVE CT虚拟机环境下Podman的安装","type":"post"},{"authors":null,"categories":null,"content":" 安装 OpenSSH 客户端 # 检查是否已安装 OpenSSH 客户端 \u0026gt; Get-WindowsCapability -Online | Where-Object Name -like \u0026#39;OpenSSH.Client*\u0026#39; # 安装 OpenSSH 客户端 \u0026gt; Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0 # 验证安装 \u0026gt; ssh -V 安装 OpenSSH 服务器 # 检查是否已安装 OpenSSH 服务器 \u0026gt; Get-WindowsCapability -Online | Where-Object Name -like \u0026#39;OpenSSH.Server*\u0026#39; # 安装 OpenSSH 服务器 \u0026gt; Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0 # 启动 SSH 服务并设置为自动启动 \u0026gt; Start-Service sshd \u0026gt; Set-Service -Name sshd -StartupType Automatic # 检查服务状态 \u0026gt; Get-Service sshd # 重启服务 \u0026gt; Restart-Service sshd 配置防火墙（允许 SSH 端口 22） # 允许入站 SSH 连接 \u0026gt; New-NetFirewallRule -Name \u0026#34;OpenSSH-Server\u0026#34; -DisplayName \u0026#34;OpenSSH Server (sshd)\u0026#34; -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22 ","date":1752689198,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"fdf26740ab9fdc3af12566af50c584de","permalink":"https://blog.cuile.com/post/windows/openssh/","publishdate":"2025-07-17T02:06:38+08:00","relpermalink":"/post/windows/openssh/","section":"post","summary":" 安装 OpenSSH 客户端 # 检查是否已安装 OpenSSH 客户端 \u003e Get-WindowsCapability -Online | Where-Object Name -like 'OpenSSH.Client*' # 安装 OpenSSH 客户端 \u003e Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0 # 验证安装 \u003e ssh -V 安装 OpenSSH 服务器 # 检查是否已安装 OpenSSH 服务器 \u003e Get-WindowsCapability -Online | Where-Object Name -like 'OpenSSH.Server*' # 安装 OpenSSH 服务器 \u003e Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0 # 启动 SSH 服务并设置为自动启动 \u003e Start-Service sshd \u003e Set-Service -Name sshd -StartupType Automatic # 检查服务状态 \u003e Get-Service sshd # 重启服务 \u003e Restart-Service sshd 配置防火墙（允许 SSH 端口 22） # 允许入站 SSH 连接 \u003e New-NetFirewallRule -Name \"OpenSSH-Server\" -DisplayName \"OpenSSH Server (sshd)\" -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22 ","tags":["windows","openssh"],"title":"OpenSSH的安装与使用","type":"post"},{"authors":null,"categories":null,"content":"安装 Windows 1. 下载 推荐使用 PowerShell1\n# 下载并安装 VC++ Redistributable，需要管理员模式 Invoke-WebRequest -Uri \u0026#34;https://aka.ms/vs/17/release/vc_redist.x64.exe\u0026#34; -OutFile \u0026#34;$env:TEMP\\vc_redist.x64.exe\u0026#34; Start-Process -Wait -FilePath \u0026#34;$env:TEMP\\vc_redist.x64.exe\u0026#34; -ArgumentList \u0026#34;/install\u0026#34;, \u0026#34;/quiet\u0026#34;, \u0026#34;/norestart\u0026#34; # 下载micromamba Invoke-Webrequest -URI https://micro.mamba.pm/api/micromamba/win-64/latest -OutFile micromamba.tar.bz2 # 使用7z解压 \u0026amp; \u0026#34;C:\\Program Files\\7-Zip\\7z.exe\u0026#34; x \u0026#34;micromamba.tar.bz2\u0026#34; -o\u0026#34;tmp\u0026#34; # 使用tar解压，系统内置不用安装 mkdir micromamba tar -xvf .\\tmp\\micromamba.tar -C .\\micromamba\\ .\\micromamba\\Library\\bin\\micromamba.exe --help # 查看输出 2. 安装2 .\\micromamba\\Library\\bin\\micromamba.exe shell init -s powershell -r C:\\Your\\Root\\Prefix 默认位置为 $HOME/micromamba，也就是 C:\\Users\\username\\micromamba 。\n同时会在 PowerShell 的 Profile 文件中（相当于 Bash 的 .bashrc）添加以下代码，保证每次启动 PowerShell 时，都会自动初始化 Micromamba 。\n$HOME/Documents/WindowsPowerShell/profile.ps1\n#region mamba initialize # !! Contents within this block are managed by \u0026#39;mamba shell init\u0026#39; !! $Env:MAMBA_ROOT_PREFIX = \u0026#34;C:\\Users\\username\\micromamba\u0026#34; $Env:MAMBA_EXE = \u0026#34;C:\\Users\\username\\micromamba\\Library\\bin\\micromamba.exe\u0026#34; (\u0026amp; $Env:MAMBA_EXE \u0026#39;shell\u0026#39; \u0026#39;hook\u0026#39; -s \u0026#39;powershell\u0026#39; -p $Env:MAMBA_ROOT_PREFIX) | Out-String | Invoke-Expression #endregion 加入设置 micromamba 别名的命令。 设置别名后，即方便使用，也可配合 VSCode 的配置，实现自动启动开发环境。\nSet-Alias -name conda -value micromamba Debian 1. 下载 # 下载可执行文件 curl -Ls https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj bin/micromamba mv bin/ micromamba micromamba/micromamba --help # 查看输出 2. 安装2 ~/micromamba/micromamba shell init -s bash -r ~/micromamba ~/.bashrc\n# ~/.bashrc: executed by bash(1) for non-login shells. # Note: PS1 and umask are already set in /etc/profile. You should not # need this unless you want different defaults for root. # PS1=\u0026#39;${debian_chroot:+($debian_chroot)}\\h:\\w\\$ \u0026#39; # umask 022 # You may uncomment the following lines if you want `ls\u0026#39; to be colorized: export LS_OPTIONS=\u0026#39;--color=auto\u0026#39; eval \u0026#34;$(dircolors)\u0026#34; alias ls=\u0026#39;ls $LS_OPTIONS\u0026#39; alias ll=\u0026#39;ls $LS_OPTIONS -l\u0026#39; alias l=\u0026#39;ls $LS_OPTIONS -lA\u0026#39; # # Some more alias to avoid making mistakes: # alias rm=\u0026#39;rm -i\u0026#39; # alias cp=\u0026#39;cp -i\u0026#39; # alias mv=\u0026#39;mv -i\u0026#39; PS1=\u0026#39;\\[\\e[36;40m\\][\\D{%Y-%m-%d} \\A] \\[\\e[0m\\] \\[\\e[35;40m\\]\\w\\[\\e[0m\\]\\n\\[\\e[33;40m\\][\\u@\\H]\\[\\e[0m\\] \\$ \u0026#39; eval SSH_AUTH_SOCK=/tmp/ssh-XXXXXXFcYYOW/agent.55612; export SSH_AUTH_SOCK; SSH_AGENT_PID=55613; export SSH_AGENT_PID; # \u0026gt;\u0026gt;\u0026gt; mamba initialize \u0026gt;\u0026gt;\u0026gt; # !! Contents within this block are managed by \u0026#39;micromamba shell init\u0026#39; !! export MAMBA_EXE=\u0026#39;/root/micromamba/micromamba\u0026#39;; export MAMBA_ROOT_PREFIX=\u0026#39;/root/micromamba\u0026#39;; __mamba_setup=\u0026#34;$(\u0026#34;$MAMBA_EXE\u0026#34; shell hook --shell bash --root-prefix \u0026#34;$MAMBA_ROOT_PREFIX\u0026#34; 2\u0026gt; /dev/null)\u0026#34; if [ $? -eq 0 ]; then eval \u0026#34;$__mamba_setup\u0026#34; else alias micromamba=\u0026#34;$MAMBA_EXE\u0026#34; # Fallback on help from micromamba activate fi unset __mamba_setup # \u0026lt;\u0026lt;\u0026lt; mamba initialize \u0026lt;\u0026lt;\u0026lt; echo \u0026#34;alias conda=\u0026#39;micromamba\u0026#39;\u0026#34; \u0026gt;\u0026gt; ~/.bashrc 配置 重新启动命令行环境\n# 配置包通道 conda config append channels conda-forge conda config append channels free conda config append channels defaults # 配置包目录 # windows conda config append pkgs_dirs $Env:MAMBA_ROOT_PREFIX\\pkgs # debian conda config append pkgs_dirs $MAMBA_ROOT_PREFIX/pkgs # 关闭SSL验证 conda config set ssl_verify false # 查看 micromamba 设置 conda info # 初始化base环境 conda env update -n base # 升级 conda self-update 使用 1. 创建Python环境 # env.yml name: py3.12 channels: - conda-forge - free dependencies: - python=3.12 conda create -f env.yml # or conda create -n py3.12 python=3.12 -c conda-forge -c free 2. 操作环境 # 导出 conda env export -n py3.12 --from-history py3.12.yaml # 导入 conda env create -f py3.12.yaml # 克隆 conda create -n py3.12 --clone py3.12_new # 删除 conda env remove -n py3.12 Micromamba Installation ↩︎\n使用 Micromamba 替换 Miniconda 更快配置 Python 环境 ↩︎ ↩︎\n","date":1752686290,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"8d0debe322477fb38564a05a4796c7da","permalink":"https://blog.cuile.com/post/python/micromamba/","publishdate":"2025-07-17T01:18:10+08:00","relpermalink":"/post/python/micromamba/","section":"post","summary":"安装 Windows 1. 下载 推荐使用 PowerShell1\n# 下载并安装 VC++ Redistributable，需要管理员模式 Invoke-WebRequest -Uri \"https://aka.ms/vs/17/release/vc_redist.x64.exe\" -OutFile \"$env:TEMP\\vc_redist.x64.exe\" Start-Process -Wait -FilePath \"$env:TEMP\\vc_redist.x64.exe\" -ArgumentList \"/install\", \"/quiet\", \"/norestart\" # 下载micromamba Invoke-Webrequest -URI https://micro.mamba.pm/api/micromamba/win-64/latest -OutFile micromamba.tar.bz2 # 使用7z解压 \u0026 \"C:\\Program Files\\7-Zip\\7z.exe\" x \"micromamba.tar.bz2\" -o\"tmp\" # 使用tar解压，系统内置不用安装 mkdir micromamba tar -xvf .\\tmp\\micromamba.tar -C .\\micromamba\\ .\\micromamba\\Library\\bin\\micromamba.exe --help # 查看输出 2. 安装2 .\\micromamba\\Library\\bin\\micromamba.exe shell init -s powershell -r C:\\Your\\Root\\Prefix 默认位置为 $HOME/micromamba，也就是 C:\\Users\\username\\micromamba 。\n同时会在 PowerShell 的 Profile 文件中（相当于 Bash 的 .bashrc）添加以下代码，保证每次启动 PowerShell 时，都会自动初始化 Micromamba 。\n$HOME/Documents/WindowsPowerShell/profile.ps1\n#region mamba initialize # !! Contents within this block are managed by 'mamba shell init' !! $Env:MAMBA_ROOT_PREFIX = \"C:\\Users\\username\\micromamba\" $Env:MAMBA_EXE = \"C:\\Users\\username\\micromamba\\Library\\bin\\micromamba.exe\" (\u0026 $Env:MAMBA_EXE 'shell' 'hook' -s 'powershell' -p $Env:MAMBA_ROOT_PREFIX) | Out-String | Invoke-Expression #endregion 加入设置 micromamba 别名的命令。 设置别名后，即方便使用，也可配合 VSCode 的配置，实现自动启动开发环境。\n","tags":["micromamba","python","windows"],"title":"Micromamba的安装与使用","type":"post"},{"authors":null,"categories":null,"content":"安装 1. 环境准备 # PowerShell 版本：≥5.0 \u0026gt; $PSVersionTable.PSVersion # .NET Framework：≥4.5 \u0026gt; $PSVersionTable.CLRVersion 下载 .NET Framework 注意下载“脱机安装程序”和“语言包” 在 Windows 上安装 .NET 2. 安装 \u0026gt; Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser # 普通用户安装 \u0026gt; Invoke-RestMethod -Uri https://blog.cuile.com/attachments/scripts/scoop_install.ps1 | Invoke-Expression # 管理员用户安装 \u0026gt; irm blog.cuile.com/attachments/scripts/scoop_install.ps1 -outfile \u0026#39;install.ps1\u0026#39; \u0026gt; .\\install.ps1 -RunAsAdmin # 默认安装到 C:\\Users\\\u0026lt;user\u0026gt;\\scoop # 验证安装 \u0026gt; scoop help # 安装aria2，提升下载速度 \u0026gt; scoop install aria2 # 安装7zip，提升解压成功率 \u0026gt; scoop install 7zip 强制使用7zip解压\n// ~\\.config\\scoop\\config.json { \u0026#34;7ZIPEXTRACT_USE_EXTERNAL\u0026#34;: true } 3. 使用 ","date":1752660623,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"9921f8d50e971d328604e77424f3d9fb","permalink":"https://blog.cuile.com/post/windows/scoop/","publishdate":"2025-07-16T18:10:23+08:00","relpermalink":"/post/windows/scoop/","section":"post","summary":"安装 1. 环境准备 # PowerShell 版本：≥5.0 \u003e $PSVersionTable.PSVersion # .NET Framework：≥4.5 \u003e $PSVersionTable.CLRVersion 下载 .NET Framework 注意下载“脱机安装程序”和“语言包” 在 Windows 上安装 .NET 2. 安装 \u003e Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser # 普通用户安装 \u003e Invoke-RestMethod -Uri https://blog.cuile.com/attachments/scripts/scoop_install.ps1 | Invoke-Expression # 管理员用户安装 \u003e irm blog.cuile.com/attachments/scripts/scoop_install.ps1 -outfile 'install.ps1' \u003e .\\install.ps1 -RunAsAdmin # 默认安装到 C:\\Users\\\u003cuser\u003e\\scoop # 验证安装 \u003e scoop help # 安装aria2，提升下载速度 \u003e scoop install aria2 # 安装7zip，提升解压成功率 \u003e scoop install 7zip 强制使用7zip解压\n// ~\\.config\\scoop\\config.json { \"7ZIPEXTRACT_USE_EXTERNAL\": true } 3. 使用 ","tags":["windows","scoop"],"title":"Scoop的安装与使用","type":"post"},{"authors":null,"categories":null,"content":"Usage: python.exe -m nuitka [–mode=compilation_mode] [–run] [options] main_module.py\nNote: For general plugin help (they often have their own command line options too), consider the output of \u0026#39;--help-plugins\u0026#39;. Options: 选项： –help show this help message and exit –version Show version information and important details for bug reports, then exit. Defaults to off. –module Create an importable binary extension module executable instead of a program. Defaults to off. 创建可导入的二进制扩展模块可执行文件，而不是程序。默认为关闭。 –mode=COMPILATION_MODE Mode in which to compile. Accelerated runs in your Python installation and epends on it. Standalone creates a folder with an executable contained to run it. Onefile creates a single executable to deploy. App is onefile except on macOS where it’s not to be used. Module makes a module, and package includes also all sub-modules and sub-packages. Default is ‘accelerated’. 编译模式。Accelerated 在 Python 安装中运行并依附于它。Standalone 会创建一个包含可执行文件的文件夹，以便运行。Onefile 创建单个可执行文件以进行部署。App 就是 onefile，在 macOS 上不使用。Module 制作一个模块，软件包也包括所有子模块和子软件包。默认为 “accelerated”。 –standalone Enable standalone mode for output. This allows you to transfer the created binary to other machines without it using an existing Python installation. This also means it will become big. It implies these option: “–follow-imports” and “–python-flag=no_site”. Defaults to off. 启用独立输出模式。这样就可以将创建的二进制文件传输到其他机器上，而无需使用现有的 Python 安装。这也意味着它将变得很大。这意味着需要这些选项： “follow-imports“ 和 ”–python-flag=no_site\u0026#34;。默认为关闭。 –onefile On top of standalone mode, enable onefile mode. This means not a folder, but a compressed executable is created and used. Defaults to off. 在独立模式的基础上，启用单文件模式。这意味着创建和使用的不是文件夹，而是压缩后的可执行文件。默认为关闭。 –python-flag=FLAG Python flags to use. Default is what you are using to run Nuitka, this enforces a specific mode. These are options that also exist to standard Python executable. Currently supported: “-S” (alias “no_site”), “static_hashes” (do not use hash randomization), “no_warnings” (do not give Python run time warnings), “-O” (alias “no_asserts”), “no_docstrings” (do not use doc strings), “-u” (alias “unbuffered”), “isolated” (do not load outside code) and “-m” (package mode, compile as “package.main”). Default empty. 要使用的 Python 标志。默认值是运行 Nuitka 时使用的值，它强制执行特定的模式。这些选项也存在于标准 Python 可执行文件中。目前支持 “-S“（别名 ”no_site“）、”static_hashes“（不使用哈希随机化）、”no_warnings“（不给出 Python 运行时警告）、”-O“（别名 ”no_asserts“）、”no_docstrings“（不使用文档字符串）、”-u“（别名 ”unbuffered“）、”isol isolated“（不加载外部代码）和”-m“（包模式，编译为 ”package.main\u0026#34;）。默认为空。 –python-debug Use debug version or not. Default uses what you are using to run Nuitka, most likely a non-debug version. Only for debugging and testing purposes. 是否使用调试版本。默认使用运行 Nuitka 的版本，很可能是非调试版本。仅用于调试和测试目的。 –python-for-scons=PATH When compiling with Python 3.4 provide the path of a Python binary to use for Scons. Otherwise Nuitka can use what you run Nuitka with, or find Python installation, e.g. from Windows registry. On Windows, a Python 3.5 or higher is needed. On non-Windows, a Python 2.6 or 2.7 will do as well. 使用 Python 3.4 编译时，请提供 Scons 使用的 Python 二进制文件的路径。否则，Nuitka 可以使用您运行 Nuitka 时所使用的路径，或者从 Windows 注册表中查找 Python 的安装路径。在 Windows 上，需要 Python 3.5 或更高版本。在非 Windows 下，Python 2.6 或 2.7 也可以。 –main=PATH If specified once, this takes the place of the positional argument, i.e. the filename to compile. When given multiple times, it enables “multidist” (see User Manual) it allows you to create binaries that depending on file name or invocation name. 如果只指定一次，它将取代位置参数，即要编译的文件名。如果多次指定，则会启用 “multidist”（参见《用户手册》），允许根据文件名或调用名创建二进制文件。 Backend C compiler choice: 后端 C 编译器选择： –clang Enforce the use of clang. On Windows this requires a working Visual Studio version to piggy back on. Defaults to off. 强制使用 clang。在 Windows 环境下，这需要一个正常运行的 Visual Studio 版本作为辅助。默认为关闭。 –mingw64 Enforce the use of MinGW64 on Windows. Defaults to off unless MSYS2 with MinGW Python is used. 强制在 Windows 上使用 MinGW64。默认为关闭，除非使用带有 MinGW Python 的 MSYS2。 –msvc=MSVC_VERSION Enforce the use of specific MSVC version on Windows. Allowed values are e.g. “14.3” (MSVC 2022) and other MSVC version numbers, specify “list” for a list of installed compilers, or use “latest”. Defaults to latest MSVC being used if installed, otherwise MinGW64 is used. 强制在 Windows 上使用特定的 MSVC 版本。允许的值包括 “14.3”（MSVC 2022）和其他 MSVC 版本号，指定 “list ”表示已安装的编译器列表，或使用 “latest”。 如果已安装，默认使用最新的 MSVC，否则使用 MinGW64。 –jobs=N Specify the allowed number of parallel C compiler jobs. Negative values are system CPU minus the given value. Defaults to the full system CPU count unless low memory mode is activated, then it defaults to 1. 指定允许的 C 编译器并行作业数。负值为系统 CPU 减去给定值。默认为整个系统 CPU 数量，除非激活了低内存模式，否则默认为 1。 –lto=choice Use link time optimizations (MSVC, gcc, clang). Allowed values are “yes”, “no”, and “auto” (when it’s known to work). Defaults to “auto”. 使用链接时间优化（MSVC、gcc、clang）。允许的值有 “是”、“否 ”和 “自动”（已知有效时）。默认为 “自动”。 –static-libpython=choice Use static link library of Python. Allowed values are “yes”, “no”, and “auto” (when it’s known to work). Defaults to “auto”. 使用 Python 的 …","date":1742094457,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"9f4bee864c41e314192187ba27de8d76","permalink":"https://blog.cuile.com/post/python/nuitka/","publishdate":"2025-03-16T11:07:37+08:00","relpermalink":"/post/python/nuitka/","section":"post","summary":"Usage: python.exe -m nuitka [–mode=compilation_mode] [–run] [options] main_module.py\nNote: For general plugin help (they often have their own command line options too), consider the output of '--help-plugins'. Options: 选项： –help show this help message and exit –version Show version information and important details for bug reports, then exit. Defaults to off. –module Create an importable binary extension module executable instead of a program. Defaults to off. 创建可导入的二进制扩展模块可执行文件，而不是程序。默认为关闭。 –mode=COMPILATION_MODE Mode in which to compile. Accelerated runs in your Python installation and epends on it. Standalone creates a folder with an executable contained to run it. Onefile creates a single executable to deploy. App is onefile except on macOS where it’s not to be used. Module makes a module, and package includes also all sub-modules and sub-packages. Default is ‘accelerated’. 编译模式。Accelerated 在 Python 安装中运行并依附于它。Standalone 会创建一个包含可执行文件的文件夹，以便运行。Onefile 创建单个可执行文件以进行部署。App 就是 onefile，在 macOS 上不使用。Module 制作一个模块，软件包也包括所有子模块和子软件包。默认为 “accelerated”。 –standalone Enable standalone mode for output. This allows you to transfer the created binary to other machines without it using an existing Python installation. This also means it will become big. It implies these option: “–follow-imports” and “–python-flag=no_site”. Defaults to off. 启用独立输出模式。这样就可以将创建的二进制文件传输到其他机器上，而无需使用现有的 Python 安装。这也意味着它将变得很大。这意味着需要这些选项： “follow-imports“ 和 ”–python-flag=no_site\"。默认为关闭。 –onefile On top of standalone mode, enable onefile mode. This means not a folder, but a compressed executable is created and used. Defaults to off. 在独立模式的基础上，启用单文件模式。这意味着创建和使用的不是文件夹，而是压缩后的可执行文件。默认为关闭。 –python-flag=FLAG Python flags to use. Default is what you are using to run Nuitka, this enforces a specific mode. These are options that also exist to standard Python executable. Currently supported: “-S” (alias “no_site”), “static_hashes” (do not use hash randomization), “no_warnings” (do not give Python run time warnings), “-O” (alias “no_asserts”), “no_docstrings” (do not use doc strings), “-u” (alias “unbuffered”), “isolated” (do not load outside code) and “-m” (package mode, compile as “package.main”). Default empty. 要使用的 Python 标志。默认值是运行 Nuitka 时使用的值，它强制执行特定的模式。这些选项也存在于标准 Python 可执行文件中。目前支持 “-S“（别名 ”no_site“）、”static_hashes“（不使用哈希随机化）、”no_warnings“（不给出 Python 运行时警告）、”-O“（别名 ”no_asserts“）、”no_docstrings“（不使用文档字符串）、”-u“（别名 ”unbuffered“）、”isol isolated“（不加载外部代码）和”-m“（包模式，编译为 ”package.main\"）。默认为空。 –python-debug Use debug version or not. Default uses what you are using to run Nuitka, most likely a non-debug version. Only for debugging and testing purposes. 是否使用调试版本。默认使用运行 Nuitka 的版本，很可能是非调试版本。仅用于调试和测试目的。 –python-for-scons=PATH When compiling with Python 3.4 provide the path of a Python binary to use for Scons. Otherwise Nuitka can use what you run Nuitka with, or find Python installation, e.g. from Windows registry. On Windows, a Python 3.5 or higher is needed. On non-Windows, a Python 2.6 or 2.7 will do as well. 使用 Python 3.4 编译时，请提供 Scons 使用的 Python 二进制文件的路径。否则，Nuitka 可以使用您运行 Nuitka 时所使用的路径，或者从 Windows 注册表中查找 Python 的安装路径。在 Windows 上，需要 Python 3.5 或更高版本。在非 Windows 下，Python 2.6 或 2.7 也可以。 –main=PATH If specified once, this takes the place of the positional argument, i.e. the filename to compile. When given multiple times, it enables “multidist” (see User Manual) it allows you to create binaries that depending on file name or invocation name. 如果只指定一次，它将取代位置参数，即要编译的文件名。如果多次指定，则会启用 “multidist”（参见《用户手册》），允许根据文件名或调用名创建二进制文件。 Backend C compiler choice: 后端 C 编译器选择： –clang Enforce the use of clang. On Windows this requires a working Visual Studio version to piggy back on. Defaults to off. 强制使用 clang。在 Windows 环境下，这需要一个正常运行的 Visual Studio 版本作为辅助。默认为关闭。 –mingw64 Enforce the use of MinGW64 on Windows. Defaults to off unless MSYS2 with MinGW Python is used. 强制在 Windows 上使用 MinGW64。默认为关闭，除非使用带有 MinGW Python 的 MSYS2。 –msvc=MSVC_VERSION Enforce the use of specific MSVC version on Windows. Allowed values are e.g. “14.3” (MSVC 2022) and other MSVC version numbers, specify “list” for a list of installed compilers, or use “latest”. Defaults to latest MSVC being used if installed, otherwise MinGW64 is used. 强制在 Windows 上使用特定的 MSVC 版本。允许的值包括 “14.3”（MSVC 2022）和其他 MSVC 版本号，指定 “list ”表示已安装的编译器列表，或使用 “latest”。 如果已安装，默认使用最新的 MSVC，否则使用 MinGW64。 –jobs=N Specify the allowed number of parallel C compiler jobs. Negative values are system CPU minus the given value. Defaults to the full system CPU count unless low memory mode is activated, then it defaults to 1. 指定允许的 C 编译器并行作业数。负值为系统 CPU 减去给定值。默认为整个系统 CPU 数量，除非激活了低内存模式，否则默认为 1。 –lto=choice Use link time optimizations (MSVC, gcc, clang). Allowed values are “yes”, “no”, and “auto” (when it’s known to work). Defaults to “auto”. 使用链接时间优化（MSVC、gcc、clang）。允许的值有 “是”、“否 ”和 “自动”（已知有效时）。默认为 “自动”。 –static-libpython=choice Use static link library of Python. Allowed values are “yes”, “no”, and “auto” (when it’s known to work). Defaults to “auto”. 使用 Python 的静态链接库。允许的值有 “yes”、“no ”和 “auto”（已知有效时）。默认为 “auto”。 –cf-protection=PROTECTION_MODE This option is gcc specific. For the gcc compiler, select the “cf-protection” mode. Default “auto” is to use the gcc default value, but you can override it, e.g. to disable it with “none” value. Refer to gcc documentation for “-fcf-protection” for the details. 该选项针对 gcc。对于 gcc 编译器，请选择 “cf-protection ”模式。默认值为 “auto”，即使用 gcc 的默认值，但也可以覆盖它，例如使用 “none ”值禁用它。详情请参阅 gcc 文档中的“-fcf-protection”。 Onefile options: Onefile 选项： –onefile-tempdir-spec=ONEFILE_TEMPDIR_SPEC Use this as a folder to unpack to in onefile mode. Defaults to ‘{TEMP}/onefile_{PID}_{TIME}’, i.e. user temporary directory and being non-static it’s removed. Use e.g. a string like ‘{CACHE_DIR}/{COMPANY}/{PRODUCT}/{VERSION}’ which is a good static cache path, this will then not be removed. 在单文件模式下，将其作为解压到的文件夹。默认为“{TEMP}/onefile_{PID}_{TIME}”，即用户临时目录，非静态时会被移除。例如，使用类似“{CACHE_DIR}/{COMPANY}/{PRODUCT}/{VERSION}”的字符串，这是一个很好的静态缓存路径，因此不会被移除。 –onefile-child-grace-time=GRACE_TIME_MS When stopping the child, e.g. due to CTRL-C or shutdown, etc. the Python code gets a “KeyboardInterrupt”, that it may handle e.g. to flush data. This is the amount of time in ms, before the child it killed in the hard way. Unit is ms, and default 5000. 当停止子进程时，例如，由于 CTRL-C 或关机等原因，Python 代码会收到一个 “KeyboardInterrupt”（键盘中断），它可以处理这个中断，例如，刷新数据。这是以毫秒为单位的时间量，在子进程被强制杀死之前。单位为 ms，默认为 5000。 –onefile-no-compression When creating the onefile, disable compression of the payload. This is mostly for debug purposes, or to save time. Default is off. 创建 onefile 时，禁用对有效载荷的压缩。这主要是为了调试或节省时间。默认为关闭。 –onefile-as-archive When creating the onefile, use an archive format, that can be unpacked with nuitka-onefile-unpack\" rather than a stream that only the onefile program itself unpacks. Default is off. 创建 onefile 时，使用可以用 nuitka-onefile-unpack 解压的压缩包格式，而不是只能由 onefile 程序自己解压的流格式。默认为关闭。 Data files: 数据文件： –include-package-data=PACKAGE Include data files for the given package name. DLLs and extension modules are not data files and never included like this. Can use patterns the filenames as indicated below. Data files of packages are not included by default, but package configuration can do it. This will only include non-DLL, non-extension modules, i.e. actual data files. After a “:” optionally a filename pattern can be given as well, selecting only matching files. Examples: “–include-package-data=package_name” (all files) “–include-package-data=package_name:*.txt” (only certain type) “–include-package-data=package_name:some_filename.dat” (concrete file) Default empty. 包括指定软件包名称的数据文件。动态链接库和扩展模块不是数据文件，因此不会像这样被包含。可以使用如下所示的文件名模式。默认情况下不包含软件包的数据文件，但软件包配置可以这样做。这只会包含非 DLL、非扩展模块，即实际的数据文件。在“: ”后还可选择给出文件名模式，只选择匹配的文件。例如 “–include-package-data=package_name“（所有文件） ”–include-package-data=package_name:*.txt“（仅特定类型） ”–include-package-data=package_name:some_filename.dat\"（具体文件） 默认为空。 –include-data-files=DESC Include data files by filenames in the distribution. There are many allowed forms. With ‘–include-data-files=/path/to/file/.txt=folder_name/some.txt’ it will copy a single file and complain if it’s multiple. With ‘–include-data-files=/path/to/files/.txt=folder_name/’ it will put all matching files into that folder. For recursive copy there is a form with 3 values that ‘–include-data-files=/path/to/scan=folder_name/=**/*.txt’ that will preserve directory structure. Default empty. 按文件名将数据文件包含在分发文件中。允许的形式有很多种。如果使用“–include-data-files=/path/to/file/.txt=folder_name/some.txt”，它将复制单个文件，如果是多个文件则会抱怨。如果使用“–include-data-files=/path/to/files/.txt=folder_name/”，则会将所有匹配文件放入该文件夹。对于递归复制，“–include-data-files=/path/to/scan=folder_name/=**/*.txt ”表格包含 3 个值，将保留目录结构。默认为空。 –include-data-dir=DIRECTORY Include data files from complete directory in the distribution. This is recursive. Check ‘–include-data-files’ with patterns if you want non-recursive inclusion. An example would be ‘–include-data-dir=/path/some_dir=data/some_dir’ for plain copy, of the whole directory. All non-code files are copied, if you want to use ‘–noinclude-data-files’ option to remove them. Default empty. 包含发行版中完整目录下的数据文件。这是递归的。如果想要非递归包含，请勾选带有模式的“–include-data-files”。例如，“–include-data-dir=/path/some_dir=data/some_dir ”是对整个目录的纯复制。如果想使用“–noinclude-data-files ”选项删除非代码文件，则会复制所有非代码文件。默认为空。 –noinclude-data-files=PATTERN Do not include data files matching the filename pattern given. This is against the target filename, not source paths. So to ignore a file pattern from package data for ‘package_name’ should be matched as ‘package_name/*.txt’. Or for the whole directory simply use ‘package_name’. Default empty. 不包含与给定文件名模式匹配的数据文件。这针对的是目标文件名，而不是源路径。因此，要忽略 “package_name ”的软件包数据中的文件模式，应匹配为 “package_name/*.txt”。或者，对于整个目录，只需使用 “package_name ”即可。默认为空。 –include-onefile-external-data=PATTERN Include the specified data file patterns outside of the onefile binary, rather than on the inside. Makes only sense in case of ‘–onefile’ compilation. First files have to be specified as included with other --include-*data* options, and then this refers to target paths inside the distribution. Default empty. 将指定的数据文件模式包含在 onefile 二进制文件的外部，而不是内部。只有在“–onefile ”编译时才有意义。首先，必须使用其他 --include-*data*选项指定包含的文件，然后才会引用发行版内部的目标路径。默认为空。 –list-package-data=LIST_PACKAGE_DATA Output the data files found for a given package name.Default not done. 输出为给定软件包名称找到的数据文件，默认为未完成。 –include-raw-dir=DIRECTORY Include raw directories completely in the distribution. This is recursive. Check ‘–include-data-dir’ to use the sane option. Default empty. 将原始目录完全包含在发行版中。这是递归的。选中“–include-data-dir ”以使用正常选项。默认为空。 Compilation choices: 编译选择： –user-package-configuration-file=YAML_FILENAME User provided Yaml file with package configuration. You can include DLLs, remove bloat, add hidden dependencies. Check the Nuitka Package Configuration Manual for a complete description of the format to use. Can be given multiple times. Defaults to empty. 用户提供的 Yaml 文件包含软件包配置。您可以包含 DLL、删除臃肿、添加隐藏的依赖关系。有关使用格式的完整说明，请查阅《Nuitka 软件包配置手册》。可多次给出。默认为空。 –full-compat Enforce absolute compatibility with CPython. Do not even allow minor deviations from CPython behavior, e.g. not having better tracebacks or exception messages which are not really incompatible, but only different or worse. This is intended for tests only and should not be used. 确保与 CPython 绝对兼容。甚至不允许与 CPython 行为有细微的偏差，例如，不允许有更好的跟踪回溯或异常消息，这些并不是真正的不兼容，而只是不同或更糟而已。这仅用于测试，不应使用。 –file-reference-choice=FILE_MODE Select what value “file” is going to be. With “runtime” (default for standalone binary mode and module mode), the created binaries and modules, use the location of themselves to deduct the value of “file”. Included packages pretend to be in directories below that location. This allows you to include data files in deployments. If you merely seek acceleration, it’s better for you to use the “original” value, where the source files location will be used. With “frozen” a notation “” is used. For compatibility reasons, the “file” value will always have “.py” suffix independent of what it really is. 选择“file”的值。如果使用 “runtime”（独立二进制文件模式和模块模式的默认值），创建的二进制文件和模块将使用自己的位置来扣除“file”的值。包含的软件包会假装位于该位置下方的目录中。这样就可以在部署中包含数据文件。如果只是为了加速，最好使用\"original\"值，即使用源文件的位置。在使用 “frozen ”时，会使用“”符号。出于兼容性考虑，“file”值的后缀始终是“.py”，与实际内容无关。 –module-name-choice=MODULE_NAME_MODE Select what value “name” and “package” are going to be. With “runtime” (default for module mode), the created module uses the parent package to deduce the value of “package”, to be fully compatible. The value “original” (default for other modes) allows for more static optimization to happen, but is incompatible for modules that normally can be loaded into any package. 选择“name”和“package”的值。如果使用 “runtime”（模块模式的默认值），创建的模块会使用父软件包来推断“package”的值，以实现完全兼容。“original\"值（其他模式的默认值）允许进行更多的静态优化，但对于通常可以加载到任何软件包的模块来说是不兼容的。 General OS controls: 一般操作系统控制： –force-stdout-spec=FORCE_STDOUT_SPEC Force standard output of the program to go to this location. Useful for programs with disabled console and programs using the Windows Services Plugin of Nuitka commercial. Defaults to not active, use e.g. ‘{PROGRAM_BASE}.out.txt’, i.e. file near your program, check User Manual for full list of available values. 强制程序的标准输出到此位置。对于禁用控制台的程序和使用 Nuitka 商业版 Windows 服务插件的程序非常有用。默认情况下不激活，例如使用“{PROGRAM_BASE}.out.txt”，即程序附近的文件，查看《用户手册》以获取可用值的完整列表。 –force-stderr-spec=FORCE_STDERR_SPEC Force standard error of the program to go to this location. Useful for programs with disabled console and programs using the Windows Services Plugin of Nuitka commercial. Defaults to not active, use e.g. ‘{PROGRAM_BASE}.err.txt’, i.e. file near your program, check User Manual for full list of available values. 强制程序的标准错误转到此位置。对于禁用控制台的程序和使用 Nuitka commercial 的 Windows 服务插件的程序非常有用。默认值为 “未激活”，例如使用“{PROGRAM_BASE}.err.txt”，即程序附近的文件，查看《用户手册》以获取可用值的完整列表。 Deployment control: 发布控制： –deployment Disable code aimed at making finding compatibility issues easier. This will e.g. prevent execution with “-c” argument, which is often used by code that attempts run a module, and causes a program to start itself over and over potentially. Disable once you deploy to end users, for finding typical issues, this is very helpful during development. Default off. 禁用旨在更容易发现兼容性问题的代码。例如，这将阻止“-c ”参数的执行，“-c ”参数通常被试图运行模块的代码所使用，并可能导致程序一次又一次地自动启动。一旦部署给最终用户，则禁用该功能，以查找典型问题，这在开发过程中非常有用。默认关闭。 –no-deployment-flag=FLAG Keep deployment mode, but disable selectively parts of it. Errors from deployment mode will output these identifiers. Default empty. 保留部署模式，但有选择地禁用部分功能。部署模式下的错误将输出这些标识符。默认为空。 Environment control: 环境控制： –force-runtime-environment-variable=VARIABLE_SPEC Force an environment variables to a given value. Default empty. 强制环境变量为给定值。默认为空。 Windows specific controls: Windows 专用控制： –windows-console-mode=CONSOLE_MODE Select console mode to use. Default mode is ‘force’ and creates a console window unless the program was started from one. With ‘disable’ it doesn’t create or use a console at all. With ‘attach’ an existing console will be used for outputs. With ‘hide’ a newly spawned console will be hidden and an already existing console will behave like ‘force’. Default is ‘force’. 选择要使用的控制台模式。默认模式为 “force”，会创建一个控制台窗口，除非程序是从控制台窗口启动的。如果使用 “disable”模式，则根本不会创建或使用控制台。使用 “attach”时，将使用现有的控制台进行输出。如果使用 “hide”，新生成的控制台将被隐藏，而已经存在的控制台的行为与 “force ”类似。默认为 “force”。 –windows-icon-from-ico=ICON_PATH Add executable icon. Can be given multiple times for different resolutions or files with multiple icons inside. In the later case, you may also suffix with # where n is an integer index starting from 1, specifying a specific icon to be included, and all others to be ignored. 添加可执行图标。对于不同分辨率或包含多个图标的文件，可以多次添加。在后一种情况下，还可以使用 # 作为后缀，其中 n 是一个从 1 开始的整数索引，用于指定要包含的特定图标，而忽略其他所有图标。 –windows-icon-from-exe=ICON_EXE_PATH Copy executable icons from this existing executable (Windows only). 从现有可执行文件中复制可执行文件图标（仅限 Windows）。 –onefile-windows-splash-screen-image=SPLASH_SCREEN_IMAGE When compiling for Windows and onefile, show this while loading the application. Defaults to off. 为 Windows 和 onefile 编译时，在加载应用程序时显示此选项。默认为关闭。 –windows-uac-admin Request Windows User Control, to grant admin rights on execution. (Windows only). Defaults to off. 请求 Windows 用户控制，授予执行管理权限。（仅限 Windows）。默认为关闭。 –windows-uac-uiaccess Request Windows User Control, to enforce running from a few folders only, remote desktop access. (Windows only). Defaults to off. 请求 Windows 用户控制，以强制执行仅从少数文件夹运行的远程桌面访问。 macOS specific controls –macos-create-app-bundle When compiling for macOS, create a bundle rather than a plain binary application. This is the only way to unlock the disabling of console, get high DPI graphics, etc. and implies standalone mode. Defaults to off. –macos-target-arch=MACOS_TARGET_ARCH What architectures is this to supposed to run on. Default and limit is what the running Python allows for. Default is “native” which is the architecture the Python is run with. –macos-app-icon=ICON_PATH Add icon for the application bundle to use. Can be given only one time. Defaults to Python icon if available. –macos-signed-app-name=MACOS_SIGNED_APP_NAME Name of the application to use for macOS signing. Follow “com.YourCompany.AppName” naming results for best results, as these have to be globally unique, and will potentially grant protected API accesses. –macos-app-name=MACOS_APP_NAME Name of the product to use in macOS bundle information. Defaults to base filename of the binary. –macos-app-mode=APP_MODE Mode of application for the application bundle. When launching a Window, and appearing in Docker is desired, default value “gui” is a good fit. Without a Window ever, the application is a “background” application. For UI elements that get to display later, “ui-element” is in-between. The application will not appear in dock, but get full access to desktop when it does open a Window later. –macos-sign-identity=MACOS_APP_VERSION When signing on macOS, by default an ad-hoc identify will be used, but with this option your get to specify another identity to use. The signing of code is now mandatory on macOS and cannot be disabled. Use “auto” to detect your only identity installed. Default “ad-hoc” if not given. –macos-sign-notarization When signing for notarization, using a proper TeamID identity from Apple, use the required runtime signing option, such that it can be accepted. –macos-app-version=MACOS_APP_VERSION Product version to use in macOS bundle information. Defaults to “1.0” if not given. –macos-app-protected-resource=RESOURCE_DESC Request an entitlement for access to a macOS protected resources, e.g. “NSMicrophoneUsageDescription:Microphone access for recording audio.” requests access to the microphone and provides an informative text for the user, why that is needed. Before the colon, is an OS identifier for an access right, then the informative text. Legal values can be found on https://developer.apple.com/documentation/bundleresources/information_property_list/protected_resources and the option can be specified multiple times. Default empty. Linux specific controls –linux-icon=ICON_PATH Add executable icon for onefile binary to use. Can be given only one time. Defaults to Python icon if available. Control the following into imported modules: 以下内容控制模块导入： –follow-imports Descend into all imported modules. Defaults to on in standalone mode, otherwise off. 深入所有导入的模块。独立模式下默认开启，否则关闭。 –follow-import-to=MODULE/PACKAGE Follow to that module if used, or if a package, to the whole package. Can be given multiple times. Default empty. 如果使用模块，则指向该模块；如果使用软件包，则指向整个软件包。可多次给出。默认为空。 –nofollow-import-to=MODULE/PACKAGE Do not follow to that module name even if used, or if a package name, to the whole package in any case, overrides all other options. This can also contain patterns, e.g. “*.tests”. Can be given multiple times. Default empty. 即使使用了该模块名，也不要跟随；如果使用了软件包名，则无论如何都要跟随整个软件包，并优先于所有其他选项。也可以包含模式，如 “*.tests”。可多次输入。默认为空。 –nofollow-imports Do not descend into any imported modules at all, overrides all other inclusion options and not usable for standalone mode. Defaults to off. 完全不深入任何导入模块，优先于所有其他包含选项，不能用于独立模式。默认为关闭。 –follow-stdlib Also descend into imported modules from standard library. This will increase the compilation time by a lot and is also not well tested at this time and sometimes won’t work. Defaults to off. 还可以从标准库中导入模块。这将大大增加编译时间，而且目前尚未经过充分测试，有时可能无法正常工作。默认为关闭。 Control the inclusion of modules and packages in result: 控制结果中模块和包的包含情况： –include-package=PACKAGE Include a whole package. Give as a Python namespace, e.g. “some_package.sub_package” and Nuitka will then find it and include it and all the modules found below that disk location in the binary or extension module it creates, and make it available for import by the code. To avoid unwanted sub packages, e.g. tests you can e.g. do this “–nofollow-import-to=*.tests”. Default empty. 包含整个包。将其作为 Python 命名空间提供，例如 “some_package.sub_package”，Nuitka 将会找到它并将其包含在生成的二进制文件或扩展模块中，同时包含该磁盘位置下所有找到的模块，并使其可供代码导入。为了避免包含不需要的子包（例如测试包），你可以使用例如 “–nofollow-import-to=*.tests”。默认值为空。 –include-module=MODULE Include a single module. Give as a Python namespace, e.g. “some_package.some_module” and Nuitka will then find it and include it in the binary or extension module it creates, and make it available for import by the code. Default empty. 包含一个模块。以 Python 命名空间的形式提供，例如 “some_package.some_module”，Nuitka 将会找到该模块并将其包含在生成的二进制文件或扩展模块中，并使其可供代码导入。默认值为空。 –include-plugin-directory=MODULE/PACKAGE Include also the code found in that directory, considering as if they are each given as a main file. Overrides all other inclusion options. You ought to prefer other inclusion options, that go by names, rather than filenames, those find things through being in “sys.path”. This option is for very special use cases only. Can be given multiple times. Default empty. 还应包含该目录中的代码，视其为各自的主文件。覆盖所有其他包含选项。您应优先使用以名称而非文件名进行包含的选项，这些选项通过位于“sys.path”中来查找文件。此选项仅适用于非常特殊的用例。可多次指定。默认值为空。 –include-plugin-files=PATTERN Include into files matching the PATTERN. Overrides all other follow options. Can be given multiple times. Default empty. 将符合模式的文件包含进来。覆盖所有其他跟随选项。可以多次指定。默认值为空。 –prefer-source-code For already compiled extension modules, where there is both a source file and an extension module, normally the extension module is used, but it should be better to compile the module from available source code for best performance. If not desired, there is –no-prefer-source-code to disable warnings about it. Default off. 对于已经编译的扩展模块，当同时存在源文件和扩展模块时，通常会使用扩展模块，但为了获得最佳性能，建议从可用的源代码重新编译该模块。如果不希望这样做，可以使用 –no-prefer-source-code 选项来禁用相关警告。默认关闭。 Metadata support 元数据支持 –include-distribution-metadata=DISTRIBUTION Include metadata information for the given distribution name. Some packages check metadata for presence, version, entry points, etc. and without this option given, it only works when it’s recognized at compile time which is not always happening. This of course only makes sense for packages that are included in the compilation. Default empty. 为给定的分发名称包含元数据信息。某些包会检查元数据以确认其存在、版本、入口点等信息。如果未指定此选项，它仅在编译时被识别时才有效，而这种情况并不总是发生。当然，这仅适用于在编译过程中包含的包。默认值为空。 DLL files –noinclude-dlls=PATTERN Do not include DLL files matching the filename pattern given. This is against the target filename, not source paths. So ignore a DLL ‘someDLL’ contained in the package ‘package_name’ it should be matched as ‘package_name/someDLL.*’. Default empty. –list-package-dlls=LIST_PACKAGE_DLLS Output the DLLs found for a given package name. Default not done. –list-package-exe=LIST_PACKAGE_EXE Output the EXEs found for a given package name. Default not done. Control the warnings to be given by Nuitka –warn-implicit-exceptions Enable warnings for implicit exceptions detected at compile time. –warn-unusual-code Enable warnings for unusual code detected at compile time. –assume-yes-for-downloads Allow Nuitka to download external code if necessary, e.g. dependency walker, ccache, and even gcc on Windows. To disable, redirect input from nul device, e.g. “\u003c/dev/null” or “\u003cNUL:”. Default is to prompt. –nowarn-mnemonic=MNEMONIC Disable warning for a given mnemonic. These are given to make sure you are aware of certain topics, and typically point to the Nuitka website. The mnemonic is the part of the URL at the end, without the HTML suffix. Can be given multiple times and accepts shell pattern. Default empty. Immediate execution after compilation –run Execute immediately the created binary (or import the compiled module). Defaults to off. –debugger Execute inside a debugger, e.g. “gdb” or “lldb” to automatically get a stack trace. The debugger is automatically chosen unless specified by name with the NUITKA_DEBUGGER_CHOICE environment variable. Defaults to off. Output choices –output-filename=FILENAME Specify how the executable should be named. For extension modules there is no choice, also not for standalone mode and using it will be an error. This may include path information that needs to exist though. Defaults to ‘\u003cprogram_name\u003e.exe’ on this platform. –output-dir=DIRECTORY Specify where intermediate and final output files should be put. The DIRECTORY will be populated with build folder, dist folder, binaries, etc. Defaults to current directory. –remove-output Removes the build directory after producing the module or exe file. Defaults to off. –no-pyi-file Do not create a ‘.pyi’ file for extension modules created by Nuitka. This is used to detect implicit imports. Defaults to off. –no-pyi-stubs Do not use stubgen when creating a ‘.pyi’ file for extension modules created by Nuitka. They expose your API, but stubgen may cause issues. Defaults to off. Debug features –debug Executing all self checks possible to find errors in Nuitka, do not use for production. Defaults to off. –no-debug-immortal-assumptions Disable check normally done with “–debug”. With Python3.12+ do not check known immortal object assumptions. Some C libraries corrupt them. Defaults to check being made if “–debug” is on. –unstripped Keep debug info in the resulting object file for better debugger interaction. Defaults to off. –profile Enable vmprof based profiling of time spent. Not working currently. Defaults to off. –trace-execution Traced execution output, output the line of code before executing it. Defaults to off. –xml=XML_FILENAME Write the internal program structure, result of optimization in XML form to given filename. –experimental=FLAG Use features declared as ’experimental’. May have no effect if no experimental features are present in the code. Uses secret tags (check source) per experimented feature. –low-memory Attempt to use less memory, by forking less C compilation jobs and using options that use less memory. For use on embedded machines. Use this in case of out of memory problems. Defaults to off. –create-environment-from-report=CREATE_ENVIRONMENT_FROM_REPORT Create a new virtualenv in that non-existing path from the report file given with e.g. ‘–report=compilation-report.xml’. Default not done. –generate-c-only Generate only C source code, and do not compile it to binary or module. This is for debugging and code coverage analysis that doesn’t waste CPU. Defaults to off. Do not think you can use this directly. Nuitka Development features –devel-missing-code-helpers Report warnings for code helpers for types that were attempted, but don’t exist. This helps to identify opportunities for improving optimization of generated code from type knowledge not used. Default False. –devel-missing-trust Report warnings for imports that could be trusted, but currently are not. This is to identify opportunities for improving handling of hard modules, where this sometimes could allow more static optimization. Default False. –devel-recompile-c-only This is not incremental compilation, but for Nuitka development only. Takes existing files and simply compiles them as C again after doing the Python steps. Allows compiling edited C files for manual debugging changes to the generated source. Allows us to add printing, check and print values, but it is now what users would want. Depends on compiling Python source to determine which files it should look at. –devel-internal-graph Create graph of optimization process internals, do not use for whole programs, but only for small test cases. Defaults to off. Cache Control –disable-cache=DISABLED_CACHES Disable selected caches, specify “all” for all cached. Currently allowed values are: “all”,“ccache”,“bytecode”,“compression”,“dll-dependencies”. can be given multiple times or with comma separated values. Default none. –clean-cache=CLEAN_CACHES Clean the given caches before executing, specify “all” for all cached. Currently allowed values are: “all”,“ccache”,“bytecode”,“compression”,“dll-dependencies”. can be given multiple times or with comma separated values. Default none. –force-dll-dependency-cache-update For an update of the dependency walker cache. Will result in much longer times to create the distribution folder, but might be used in case the cache is suspect to cause errors or known to need an update. PGO compilation choices –pgo-c Enables C level profile guided optimization (PGO), by executing a dedicated build first for a profiling run, and then using the result to feedback into the C compilation. Note: This is experimental and not working with standalone modes of Nuitka yet. Defaults to off. –pgo-args=PGO_ARGS Arguments to be passed in case of profile guided optimization. These are passed to the special built executable during the PGO profiling run. Default empty. –pgo-executable=PGO_EXECUTABLE Command to execute when collecting profile information. Use this only, if you need to launch it through a script that prepares it to run. Default use created program. Tracing features –report=REPORT_FILENAME Report module, data files, compilation, plugin, etc. details in an XML output file. This is also super useful for issue reporting. These reports can e.g. be used to re-create the environment easily using it with ‘–create-environment-from-report’, but contain a lot of information. Default is off. –report-diffable Report data in diffable form, i.e. no timing or memory usage values that vary from run to run. Default is off. –report-user-provided=KEY_VALUE Report data from you. This can be given multiple times and be anything in ‘key=value’ form, where key should be an identifier, e.g. use ‘–report-user-provided=pipenv-lock-hash=64a5e4’ to track some input values. Default is empty. –report-template=REPORT_DESC Report via template. Provide template and output filename ’template.rst.j2:output.rst’. For built-in templates, check the User Manual for what these are. Can be given multiple times. Default is empty. –quiet Disable all information outputs, but show warnings. Defaults to off. –show-scons Run the C building backend Scons with verbose information, showing the executed commands, detected compilers. Defaults to off. –no-progressbar Disable progress bars. Defaults to off. –show-progress Obsolete: Provide progress information and statistics. Disables normal progress bar. Defaults to off. –show-memory Provide memory information and statistics. Defaults to off. –show-modules Provide information for included modules and DLLs Obsolete: You should use ‘–report’ file instead. Defaults to off. –show-modules-output=PATH Where to output ‘–show-modules’, should be a filename. Default is standard output. –verbose Output details of actions taken, esp. in optimizations. Can become a lot. Defaults to off. –verbose-output=PATH Where to output from ‘–verbose’, should be a filename. Default is standard output. Binary Version Information –company-name=COMPANY_NAME Name of the company to use in version information. Defaults to unused. –product-name=PRODUCT_NAME Name of the product to use in version information. Defaults to base filename of the binary. –file-version=FILE_VERSION File version to use in version information. Must be a sequence of up to 4 numbers, e.g. 1.0 or 1.0.0.0, no more digits are allowed, no strings are allowed. Defaults to unused. –product-version=PRODUCT_VERSION Product version to use in version information. Same rules as for file version. Defaults to unused. –file-description=FILE_DESCRIPTION Description of the file used in version information. Windows only at this time. Defaults to binary filename. –copyright=COPYRIGHT_TEXT Copyright used in version information. Windows/macOS only at this time. Defaults to not present. –trademarks=TRADEMARK_TEXT Trademark used in version information. Windows/macOS only at this time. Defaults to not present. Plugin control –enable-plugins=PLUGIN_NAME Enabled plugins. Must be plug-in names. Use ‘–plugin-list’ to query the full list and exit. Default empty. –disable-plugins=PLUGIN_NAME Disabled plugins. Must be plug-in names. Use ‘–plugin-list’ to query the full list and exit. Most standard plugins are not a good idea to disable. Default empty. –user-plugin=PATH The file name of user plugin. Can be given multiple times. Default empty. –plugin-list Show list of all available plugins and exit. Defaults to off. –plugin-no-detection Plugins can detect if they might be used, and the you can disable the warning via “–disable-plugin=plugin-that-warned”, or you can use this option to disable the mechanism entirely, which also speeds up compilation slightly of course as this detection code is run in vain once you are certain of which plugins to use. Defaults to off. –module-parameter=MODULE_PARAMETERS Provide a module parameter. You are asked by some packages to provide extra decisions. Format is currently –module-parameter=module.name-option-name=value Default empty. –show-source-changes=SHOW_SOURCE_CHANGES Show source changes to original Python file content before compilation. Mostly intended for developing plugins and Nuitka package configuration. Use e.g. ‘–show-source-changes=numpy.**’ to see all changes below a given namespace or use ‘*’ to see everything which can get a lot. Default empty. Cross compilation –target=TARGET_DESC Cross compilation target. Highly experimental and in development, not supposed to work yet. We are working on ‘–target=wasi’ and nothing else yet. Plugin options of ‘anti-bloat’ (categories: core) –show-anti-bloat-changes Annotate what changes are done by the plugin. –noinclude-setuptools-mode=NOINCLUDE_SETUPTOOLS_MODE What to do if a ‘setuptools’ or import is encountered. This package can be big with dependencies, and should definitely be avoided. Also handles ‘setuptools_scm’. –noinclude-pytest-mode=NOINCLUDE_PYTEST_MODE What to do if a ‘pytest’ import is encountered. This package can be big with dependencies, and should definitely be avoided. Also handles ’nose’ imports. –noinclude-unittest-mode=NOINCLUDE_UNITTEST_MODE What to do if a unittest import is encountered. This package can be big with dependencies, and should definitely be avoided. –noinclude-pydoc-mode=NOINCLUDE_PYDOC_MODE What to do if a pydoc import is encountered. This package use is mark of useless code for deployments and should be avoided. –noinclude-IPython-mode=NOINCLUDE_IPYTHON_MODE What to do if a IPython import is encountered. This package can be big with dependencies, and should definitely be avoided. –noinclude-dask-mode=NOINCLUDE_DASK_MODE What to do if a ‘dask’ import is encountered. This package can be big with dependencies, and should definitely be avoided. –noinclude-numba-mode=NOINCLUDE_NUMBA_MODE What to do if a ’numba’ import is encountered. This package can be big with dependencies, and is currently not working for standalone. This package is big with dependencies, and should definitely be avoided. –noinclude-default-mode=NOINCLUDE_DEFAULT_MODE This actually provides the default “warning” value for above options, and can be used to turn all of these on. –noinclude-custom-mode=CUSTOM_CHOICES What to do if a specific import is encountered. Format is module name, which can and should be a top level package and then one choice, “error”, “warning”, “nofollow”, e.g. PyQt5:error. Plugin options of ‘playwright’ (categories: package-support) “playwright”插件选项（分类：包支持） –playwright-include-browser=INCLUDE_BROWSERS Playwright browser to include by name. Can be specified multiple times. Use “all” to include all installed browsers or use “none” to exclude all browsers. Playwright浏览器按名称包含。可多次指定。使用“all”包含所有已安装的浏览器，或使用“none”排除所有浏览器。 Plugin options of ‘spacy’ (categories: package-support) ‘spacy’ 插件选项（分类：包支持） –spacy-language-model=INCLUDE_LANGUAGE_MODELS Spacy language models to use. Can be specified multiple times. Use ‘all’ to include all downloaded models. 可用的Spacy语言模型。可以多次指定。使用’all’以包含所有已下载的模型。 ","tags":["nuitka","python"],"title":"Nuitka 参数列表","type":"post"},{"authors":null,"categories":null,"content":"PVE 节点的网络配置，在 WebUI 里只能设置为静态地址，想设置DHCP的话需要使用以下方法。\n方法一 $ cp /etc/network/interfaces /etc/network/interfaces.new # /etc/network/interfaces.new ... # IPv4 iface vmbr0 inet dhcp # address 192.168.1.66/24 # gateway 192.168.1.1 bridge-ports enp1s0 bridge-stp off bridge-fd 0 # IPv6 iface vmbr0 inet6 dhcp request_prefix 1 在 PVE 的 WebUI 里 “系统 \u0026gt; 网络” 处，刷新后点击“应用配置”即可生效，等待几分钟后即可获取到IPv6地址。\n方法二 直接修改 /etc/network/interfaces 文件也可以，修改完获取新地址。\n$ systemctl restart networking 查看新地址 $ ip addr show vmbr0 PVE设置动态获取ip地址 Proxmox VE 使用IPv6 ","date":1738892679,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"175b57dda7bbb30e60f420250ab5e99a","permalink":"https://blog.cuile.com/post/proxmox/dhcp/","publishdate":"2025-02-07T09:44:39+08:00","relpermalink":"/post/proxmox/dhcp/","section":"post","summary":"PVE 节点的网络配置，在 WebUI 里只能设置为静态地址，想设置DHCP的话需要使用以下方法。\n方法一 $ cp /etc/network/interfaces /etc/network/interfaces.new # /etc/network/interfaces.new ... # IPv4 iface vmbr0 inet dhcp # address 192.168.1.66/24 # gateway 192.168.1.1 bridge-ports enp1s0 bridge-stp off bridge-fd 0 # IPv6 iface vmbr0 inet6 dhcp request_prefix 1 在 PVE 的 WebUI 里 “系统 \u003e 网络” 处，刷新后点击“应用配置”即可生效，等待几分钟后即可获取到IPv6地址。\n方法二 直接修改 /etc/network/interfaces 文件也可以，修改完获取新地址。\n$ systemctl restart networking 查看新地址 $ ip addr show vmbr0 PVE设置动态获取ip地址 Proxmox VE 使用IPv6 ","tags":["ipv6","DHCP","proxmoxve"],"title":"ProxmoxVE 配置 DHCP 网络","type":"post"},{"authors":null,"categories":null,"content":"参考 Windows通过netsh控制安全中心防火墙和网络保护策略 使用命令行管理 Windows 防火墙 ","date":1729673382,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"ee3aa533259fed2d8c1f6ca46e3801fe","permalink":"https://blog.cuile.com/post/windows/windows_firewall/","publishdate":"2024-10-23T16:49:42+08:00","relpermalink":"/post/windows/windows_firewall/","section":"post","summary":"参考 Windows通过netsh控制安全中心防火墙和网络保护策略 使用命令行管理 Windows 防火墙 ","tags":["firewall","windows"],"title":"Windows防火墙配置","type":"post"},{"authors":null,"categories":null,"content":"基于 CentOS 7\n让Linux系统与Windows系统之间，支持机器名访问，需要Linux安装NetBIOS。 而安装NetBIOS，不一定必须安装Samba，安装过程如下:\n安装库 # 注意 这里并不会安装完整的samba $ yum install samba-winbind 修改配置文件 ; Nano /etc/nsswitch.conf ; add wins hosts: files \u0026lt;wins\u0026gt; dns myhostname 验证安装 $ ll /etc/\u0026lt;lib|lib64\u0026gt;/libnss_winbind.so 配置生效 $ ldconfig 配置服务 $ systemctl start winbind $ systemctl status winbind 参考 How to Resolve NetBIOS Names From Linux | Baeldung on Linux ","date":1729659867,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"955705798fce8629c92620f362c7fe8e","permalink":"https://blog.cuile.com/post/linux/wins_netbios/","publishdate":"2024-10-23T13:04:27+08:00","relpermalink":"/post/linux/wins_netbios/","section":"post","summary":"基于 CentOS 7\n让Linux系统与Windows系统之间，支持机器名访问，需要Linux安装NetBIOS。 而安装NetBIOS，不一定必须安装Samba，安装过程如下:\n安装库 # 注意 这里并不会安装完整的samba $ yum install samba-winbind 修改配置文件 ; Nano /etc/nsswitch.conf ; add wins hosts: files \u003cwins\u003e dns myhostname 验证安装 $ ll /etc/\u003clib|lib64\u003e/libnss_winbind.so 配置生效 $ ldconfig 配置服务 $ systemctl start winbind $ systemctl status winbind 参考 How to Resolve NetBIOS Names From Linux | Baeldung on Linux ","tags":["wins","netbios","centos","linux"],"title":"在 CentOS 上部署 NetBIOS","type":"post"},{"authors":null,"categories":null,"content":"配置文件 ; ~/.tmux.conf # 启动鼠标支持 set -g mouse on set -g mode-keys vi # WindTerm需在 会话 --\u0026gt; 首选项 --\u0026gt; 设置 --\u0026gt; 终端 --\u0026gt; 鼠标追踪 --\u0026gt; 追踪事件 # 取消勾选： # - 移动事件 # - 点击事件 # - 右键单击事件 # WindTerm使用鼠标修改面板大小，受WindTerm限制无法实现 # 禁用 WindTerm 的默认鼠标行为（防止冲突） set -g terminal-overrides \u0026#39;xterm*:smcup@:rmcup@\u0026#39; # 1. 禁用左键释放自动复制（改为仅选择） bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-selection-and-cancel # 2. 右键复制已选文本（需先左键选择） bind -T copy-mode-vi MouseDown3Pane send-keys -X copy-pipe-and-cancel \\ \u0026#34;xclip -i -selection clipboard 2\u0026gt;/dev/null || \\ pbpaste 2\u0026gt;/dev/null || \\ win32yank.exe -i 2\u0026gt;/dev/null\u0026#34; # 3. 右键直接粘贴系统剪贴板内容（跨系统支持） bind -n MouseDown3Pane run-shell \\ \u0026#34;tmux set-buffer -- \\\u0026#34;$(xclip -o -selection clipboard 2\u0026gt;/dev/null || \\ pbpaste 2\u0026gt;/dev/null || \\ win32yank.exe -o 2\u0026gt;/dev/null)\\\u0026#34;; \\ tmux paste-buffer\u0026#34; # 解除默认的鼠标调整绑定（可选） unbind-key -T root MouseDrag1Border # 重新绑定鼠标拖动调整大小 bind -n MouseDrag1Border resize-pane -M # status line set -g status-justify centre set -g status-left \u0026#34;#{session_name}\u0026#34; set -g status-right \u0026#34;%F %R\u0026#34; # 窗口编号自动重新排序 set -g renumber-windows on # status line \u0026gt; window list set -g window-status-format \u0026#34;#{window_index}:#{window_name}\u0026#34; set -g window-status-separator \u0026#34; | \u0026#34; set -g window-status-current-format \u0026#34;#{window_index}:#{window_name}\u0026#34; set -g window-status-current-style bold,italics # pane set -g pane-border-format \u0026#34; #{pane_index}:#{pane_title} $ #{pane_current_command} \u0026#34; set -g pane-border-status top set -g history-limit 10000 # 更新配置，不需要关闭tmux，直接运行马上生效 tmux source-file ~/.tmux.conf 快捷键操作 Prefix = Ctrl + b\n所有的快捷键都是ctrl + b按完松开，再去按下一个功能键！，不是一下子全按上。\n所有的快捷键都是ctrl + b按完松开，再去按下一个功能键！，不是一下子全按上。\n所有的快捷键都是ctrl + b按完松开，再去按下一个功能键！，不是一下子全按上。\n会话操作 操作 快捷键 命令 启动，会话 tmux new -s \u0026lt;session_name\u0026gt; 进入，会话 tmux \u0026lt;attach | a\u0026gt; -t \u0026lt;session_name | session_index\u0026gt; 展示，会话列表 list-session 跳转，会话 Prefix + s switch -t \u0026lt;session_name | session_index\u0026gt; 修改，会话标题 Prefix + $ rename-session -t \u0026lt;old_name | session_index\u0026gt; \u0026lt;new_name\u0026gt; 翻屏模式1 Prefix + [ 命令模式 Prefix + : 退出，会话 Prefix + d detach 关闭，会话 tmux kill-session -t \u0026lt;session_name | session_index\u0026gt; 窗口操作 操作 快捷键 命令 展示，窗口列表 list-window [-t \u0026lt;session_name\u0026gt;] 修改，窗口标题 Prefix + , rename-window \u0026lt;newp_name\u0026gt; 添加，当前会话 Prefix + c 跳转，使用列表 Prefix + w 跳转，快速 Prefix + 数字键 跳转，顺序 Prefix + \u0026lt; n | p \u0026gt; 交换，窗口位置 swap-window -s \u0026lt;source-window-index\u0026gt; -t \u0026lt;target-window-index\u0026gt; 移动，窗口位置 move-window -t \u0026lt;new-window-index\u0026gt; 关闭，当前窗口 Ctrl + d kill-window -t \u0026lt;session_name | session_index\u0026gt;:\u0026lt;window-index\u0026gt; 关闭，当前会话所有窗口 Prefix + ! 面板操作 操作 快捷键 命令 展示，面板列表 list-panes -t \u0026lt;session_name | session_index\u0026gt;:\u0026lt;window-index\u0026gt; 展示，面板编号 Prefix + q 修改，面板标题 select-pane -T \u0026#34;new-title\u0026#34; -t \u0026lt;session-name\u0026gt;:\u0026lt;window-index\u0026gt;.\u0026lt;pane-index\u0026gt; 拆分，将当前面板分成左右两份 Prefix + % 拆分，将当前面板分成上下两份 Prefix + \u0026#34; 移动，面板到窗口 move-pane -t \u0026lt;session-name\u0026gt;:\u0026lt;window-index\u0026gt; 移动，所有面板位置顺时针移动 Prefix + Ctrl + o 移动，所有面板位置逆时针移动 Prefix + Alt + o 交换，当前面板与左侧/上方面板 Prefix + { 交换，当前面板与右侧/下方面板 Prefix + } 交换，指定面板 swap-pane -s \u0026lt;source-pane-index\u0026gt; -t \u0026lt;target-pane-index\u0026gt; 布局，切换当前面板的布局方向 Prefix + Space 布局，循环切换5种预设布局 Prefix + Alt + [1~5] 布局，所有面板水平排列 select-layout even-horizontal 布局，所有面板垂直排列 select-layout even-verticalc 选中，当前窗口中的不同面板 Prefix + \u0026lt; ↑ | ↓ | ← | → \u0026gt; 调节，光标所在面板的大小 按住 Prefix + \u0026lt; ↑ | ↓ | ← | → \u0026gt; 关闭，当前面板 Prefix + x 脚本操作 Tmux格式 tmux new-session -s \u0026#34;${MY_SESSION}\u0026#34; -d \\; \\ split-window -v \\; \\ split-window -v -t 0 \\; \\ split-window -v -t 2 \\; \\ split-window -h -t 3 \\; \\ select-layout \u0026#39;e1ef,267x50,0,0[267x9,0,0,0,267x9,0,10,2,267x9,0,20,1,267x20,0,30{153x20,0,30,3,113x20,154,30,4}]\u0026#39; \\; \\ select-pane -T \u0026#34;1step\u0026#34; -t 0 \\; \\ select-pane -T \u0026#34;2step\u0026#34; -t 1 \\; \\ select-pane -T \u0026#34;check\u0026#34; -t 2 \\; \\ select-pane -T \u0026#34;submit\u0026#34; -t 3 \\; \\ select-pane -T \u0026#34;check submitable\u0026#34; -t 4 \\; \\ send-keys -t 0 \u0026#34;${ACTIVATE}${COMMAND_1STEP}\u0026#34; Enter \\; \\ send-keys -t 1 \u0026#34;${ACTIVATE}${COMMAND_2STEP}\u0026#34; Enter \\; \\ send-keys -t 2 \u0026#34;${ACTIVATE}${COMMAND_CHECK}\u0026#34; Enter \\; \\ send-keys -t 3 \u0026#34;${ACTIVATE}${COMMAND_SUBMIT}\u0026#34; Enter \\; \\ send-keys -t 4 \u0026#34;${ACTIVATE}${COMMAND_OTHER}\u0026#34; Enter \\; \\ attach-session -t \u0026#34;${MY_SESSION}\u0026#34; Shell格式 # 在后台创建新的会话 tmux new-session -s \u0026#34;${MY_SESSION}\u0026#34; -d # 在会话中创建窗口 # tmux new-window -t \u0026#34;${MY_SESSION}\u0026#34; -n \u0026#34;main\u0026#34; # 在窗口中创建面板 tmux split-window -v -t \u0026#34;${MY_SESSION}\u0026#34; tmux split-window -v -t \u0026#34;${MY_SESSION}\u0026#34;:0.0 tmux split-window -v -t \u0026#34;${MY_SESSION}\u0026#34;:0.2 tmux split-window -h -t \u0026#34;${MY_SESSION}\u0026#34;:0.3 # 调整面板大小 # tmux resize-pane -t \u0026#34;${MY_SESSION}\u0026#34;:0.0 -y 9 # tmux resize-pane -t \u0026#34;${MY_SESSION}\u0026#34;:0.1 -y 9 # tmux resize-pane -t \u0026#34;${MY_SESSION}\u0026#34;:0.2 -y 9 # 使用select-layout更方便 tmux select-layout -t \u0026#34;${MY_SESSION}\u0026#34; \u0026#39;9a1d,267x50,0,0[267x9,0,0,17,267x9,0,10,19,267x9,0,20,18,267x20,0,30{134x20,0,30,20,132x20,135,30,21}]\u0026#39; # 给面板命名 tmux select-pane -T \u0026#34;1step\u0026#34; -t \u0026#34;${MY_SESSION}\u0026#34;:0.0 tmux select-pane -T \u0026#34;2step\u0026#34; -t \u0026#34;${MY_SESSION}\u0026#34;:0.1 tmux select-pane -T \u0026#34;check\u0026#34; -t \u0026#34;${MY_SESSION}\u0026#34;:0.2 tmux select-pane -T \u0026#34;submit\u0026#34; -t \u0026#34;${MY_SESSION}\u0026#34;:0.3 # 面板执行命令 tmux send-keys -t \u0026#34;${MY_SESSION}\u0026#34;:0.0 \u0026#34;${ACTIVATE}${COMMAND_1STEP}\u0026#34; Enter tmux send-keys -t \u0026#34;${MY_SESSION}\u0026#34;:0.1 \u0026#34;${ACTIVATE}${COMMAND_2STEP}\u0026#34; Enter tmux send-keys -t \u0026#34;${MY_SESSION}\u0026#34;:0.2 \u0026#34;${ACTIVATE}${COMMAND_CHECK}\u0026#34; Enter tmux send-keys -t \u0026#34;${MY_SESSION}\u0026#34;:0.3 …","date":1708502912,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"a1433c895fd04d9b6ba56f83380dc321","permalink":"https://blog.cuile.com/post/linux/tmux/","publishdate":"2024-02-21T16:08:32+08:00","relpermalink":"/post/linux/tmux/","section":"post","summary":"配置文件 ; ~/.tmux.conf # 启动鼠标支持 set -g mouse on set -g mode-keys vi # WindTerm需在 会话 --\u003e 首选项 --\u003e 设置 --\u003e 终端 --\u003e 鼠标追踪 --\u003e 追踪事件 # 取消勾选： # - 移动事件 # - 点击事件 # - 右键单击事件 # WindTerm使用鼠标修改面板大小，受WindTerm限制无法实现 # 禁用 WindTerm 的默认鼠标行为（防止冲突） set -g terminal-overrides 'xterm*:smcup@:rmcup@' # 1. 禁用左键释放自动复制（改为仅选择） bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-selection-and-cancel # 2. 右键复制已选文本（需先左键选择） bind -T copy-mode-vi MouseDown3Pane send-keys -X copy-pipe-and-cancel \\ \"xclip -i -selection clipboard 2\u003e/dev/null || \\ pbpaste 2\u003e/dev/null || \\ win32yank.exe -i 2\u003e/dev/null\" # 3. 右键直接粘贴系统剪贴板内容（跨系统支持） bind -n MouseDown3Pane run-shell \\ \"tmux set-buffer -- \\\"$(xclip -o -selection clipboard 2\u003e/dev/null || \\ pbpaste 2\u003e/dev/null || \\ win32yank.exe -o 2\u003e/dev/null)\\\"; \\ tmux paste-buffer\" # 解除默认的鼠标调整绑定（可选） unbind-key -T root MouseDrag1Border # 重新绑定鼠标拖动调整大小 bind -n MouseDrag1Border resize-pane -M # status line set -g status-justify centre set -g status-left \"#{session_name}\" set -g status-right \"%F %R\" # 窗口编号自动重新排序 set -g renumber-windows on # status line \u003e window list set -g window-status-format \"#{window_index}:#{window_name}\" set -g window-status-separator \" | \" set -g window-status-current-format \"#{window_index}:#{window_name}\" set -g window-status-current-style bold,italics # pane set -g pane-border-format \" #{pane_index}:#{pane_title} $ #{pane_current_command} \" set -g pane-border-status top set -g history-limit 10000 # 更新配置，不需要关闭tmux，直接运行马上生效 tmux source-file ~/.tmux.conf 快捷键操作 Prefix = Ctrl + b\n","tags":["cli","tmux","linux"],"title":"Tmux 命令","type":"post"},{"authors":null,"categories":null,"content":"Proxmox VE 官方提供的 Centos 7 模板是有问题的无法正常使用，现在给出解决方案。\n安装 安装完成后，容器可以启动，但无法关闭、网络无法使用、控制台无法使用，这些都是我们要解决的问题。\n解决方法 ssh登录进入PVE主机 # 查看 CT 容器列表 $ pct list # 进入 CT 容器 $ pct enter \u0026lt;VMID\u0026gt; 打开网络 # 启动网络，从DHCP拿IP地址 $ ifup eth0 更新 yum 库 $ curl -o /etc/yum.repos.d/jsynacek-systemd-backports-for-centos-7-epel-7.repo https://copr.fedorainfracloud.org/coprs/jsynacek/systemd-backports-for-centos-7/repo/epel-7/jsynacek-systemd-backports-for-centos-7-epel-7.repo $ yum update # 安装 sshd $ yum install -y openssh-server $ systemctl start sshd.service $ systemctl enable sshd.service 退出 CT 容器 $ exit $ pct stop \u0026lt;VMID\u0026gt; 重新启动 CT 容器，一切正常— [SOLVED] - PVE 7 won’t start CentOS 7 container | Proxmox Support Forum ","date":1706708269,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"03260e0c458591c209af1a688aab7ea1","permalink":"https://blog.cuile.com/post/proxmox/setup_ct_centos-7/","publishdate":"2024-01-31T21:37:49+08:00","relpermalink":"/post/proxmox/setup_ct_centos-7/","section":"post","summary":"Proxmox VE 官方提供的 Centos 7 模板是有问题的无法正常使用，现在给出解决方案。\n安装 安装完成后，容器可以启动，但无法关闭、网络无法使用、控制台无法使用，这些都是我们要解决的问题。\n解决方法 ssh登录进入PVE主机 # 查看 CT 容器列表 $ pct list # 进入 CT 容器 $ pct enter \u003cVMID\u003e 打开网络 # 启动网络，从DHCP拿IP地址 $ ifup eth0 更新 yum 库 $ curl -o /etc/yum.repos.d/jsynacek-systemd-backports-for-centos-7-epel-7.repo https://copr.fedorainfracloud.org/coprs/jsynacek/systemd-backports-for-centos-7/repo/epel-7/jsynacek-systemd-backports-for-centos-7-epel-7.repo $ yum update # 安装 sshd $ yum install -y openssh-server $ systemctl start sshd.service $ systemctl enable sshd.service 退出 CT 容器 $ exit $ pct stop \u003cVMID\u003e 重新启动 CT 容器，一切正常— [SOLVED] - PVE 7 won’t start CentOS 7 container | Proxmox Support Forum ","tags":["CT Container","lxc","centos 7","linux","proxmoxve"],"title":"配置 CentOS 7 的 CT 容器","type":"post"},{"authors":null,"categories":null,"content":"NcFTP 是 Linux 上常用的 FTP客户端工具，非常好用，这里记录它的常见用法。\nncftp FTP浏览工具\n$ ncftp # 一定注意参数顺序 ncftp \u0026gt; open -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; \u0026lt;remote-host\u0026gt; # 使用被动模式传输 ncftp \u0026gt; set passive yes ncftp \u0026gt; put \u0026lt;local-files\u0026gt; ncftpput FTP上传命令行工具\n# 一定注意参数顺序 # 使用被动模式传输 $ ncftpput -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -F \u0026lt;remote-host\u0026gt; \u0026lt;remote-path\u0026gt; \u0026lt;local-files\u0026gt; # or $ ncftpput -f ftp.cfg -F \u0026lt;remote-path\u0026gt; \u0026lt;local-files\u0026gt; ; ftp.cfg host ftp.server.com user myusername pass mypasswd NcFTP Client ","date":1706239857,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"e71cc7b849cd5dc4c109ba51725eeab5","permalink":"https://blog.cuile.com/post/linux/ncftp/","publishdate":"2024-01-26T11:30:57+08:00","relpermalink":"/post/linux/ncftp/","section":"post","summary":"NcFTP 是 Linux 上常用的 FTP客户端工具，非常好用，这里记录它的常见用法。\nncftp FTP浏览工具\n$ ncftp # 一定注意参数顺序 ncftp \u003e open -u \u003cusername\u003e -p \u003cpassword\u003e \u003cremote-host\u003e # 使用被动模式传输 ncftp \u003e set passive yes ncftp \u003e put \u003clocal-files\u003e ncftpput FTP上传命令行工具\n# 一定注意参数顺序 # 使用被动模式传输 $ ncftpput -u \u003cusername\u003e -p \u003cpassword\u003e -F \u003cremote-host\u003e \u003cremote-path\u003e \u003clocal-files\u003e # or $ ncftpput -f ftp.cfg -F \u003cremote-path\u003e \u003clocal-files\u003e ; ftp.cfg host ftp.server.com user myusername pass mypasswd NcFTP Client ","tags":["ftp","ncftp","linux"],"title":"Ncftp 使用手册","type":"post"},{"authors":null,"categories":null,"content":"安装 $ yum install https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-centos10-10-2.noarch.rpm # 安装服务端包 $ yum install postgresql10-server postgresql10 配置 # 初始化数据库，设置自启动 $ /usr/pgsql-10/bin/postgresql-10-setup initdb $ systemctl enable postgresql-10 $ systemctl start postgresql-10 # 设置防火墙规则 $ iptables -A INPUT -p tcp -m tcp --dport 5432 -j ACCEPT #开放Postgresql 5432端口 $ service iptables save # 保存防火墙规则 配置远程访问 # 切换至用户 $ su - postgres ; ./10/data/postgres.conf - #listen_address + listen_address ; ./10/data/pg_hba.conf ; 允许所有IPv4地址 + host all all 0.0.0.0/0 scram-sha-256 登录数据库 $ psql -U postgres -- 设置数据运行参数 ALTER SYSTEM SET listen_addresses = \u0026#39;*\u0026#39;; ALTER SYSTEM SET port = 5432; ALTER SYSTEM SET password_encryption = \u0026#39;scram-sha-256\u0026#39;; -- 修改默认用户密码 ALTER USER postgres with encrypted password \u0026#39;你的密码\u0026#39;; -- 退出数据库 \\q -- 退出用户 exit 重启服务 systemctl restart postgresql-10 ","date":1705642635,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"69b4134790b6cfdbd623aa7f89ee956b","permalink":"https://blog.cuile.com/post/database/postgresql_for_centos/","publishdate":"2024-01-19T13:37:15+08:00","relpermalink":"/post/database/postgresql_for_centos/","section":"post","summary":"安装 $ yum install https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-centos10-10-2.noarch.rpm # 安装服务端包 $ yum install postgresql10-server postgresql10 配置 # 初始化数据库，设置自启动 $ /usr/pgsql-10/bin/postgresql-10-setup initdb $ systemctl enable postgresql-10 $ systemctl start postgresql-10 # 设置防火墙规则 $ iptables -A INPUT -p tcp -m tcp --dport 5432 -j ACCEPT #开放Postgresql 5432端口 $ service iptables save # 保存防火墙规则 配置远程访问 # 切换至用户 $ su - postgres ; ./10/data/postgres.conf - #listen_address + listen_address ; ./10/data/pg_hba.conf ; 允许所有IPv4地址 + host all all 0.0.0.0/0 scram-sha-256 登录数据库 $ psql -U postgres -- 设置数据运行参数 ALTER SYSTEM SET listen_addresses = '*'; ALTER SYSTEM SET port = 5432; ALTER SYSTEM SET password_encryption = 'scram-sha-256'; -- 修改默认用户密码 ALTER USER postgres with encrypted password '你的密码'; -- 退出数据库 \\q -- 退出用户 exit 重启服务 systemctl restart postgresql-10 ","tags":["postgresql","centos","database"],"title":"Centos7 安装 Postgresql","type":"post"},{"authors":null,"categories":null,"content":"1、安装Composer镜像 $ docker pull composer:1.9.0 2、安装laravel # 启动Composer镜像 $ docker run --rm \\ -it \\ -v ${PWD}:/app \\ composer:1.9.0 /bin/bash # 创建composer.json文件 $ composer init -n # 使用国内 Packagist镜像 $ composer config repo.packagist composer https://mirrors.aliyun.com/composer/ # 添加laravel包 $ composer require -vvv \\ --prefer-dist \\ --prefer-stable \\ laravel/installer # 看到以下输出，说明添加成功。 Writing lock file Generating autoload files # 在当前目录覆盖安装laravel $ ./vendor/bin/laravel new # 看到以下输出，说明安装成功。 Package manifest generated successfully. Application ready! Build something amazing. # 退出Composer镜像 $ exit 将当前目录下的storage目录权限，设为757\n$ chmod -R 757 storage/ 3、安装laravel-admin扩展包 # 进入laravel安装目录 # 启动Composer镜像 $ docker run --rm \\ -it \\ -v ${PWD}:/app \\ composer:1.9.0 /bin/bash # 使用国内 Packagist镜像 $ composer config repo.packagist composer https://mirrors.aliyun.com/composer/ # 添加扩展包 $ composer require -vvv \\ --prefer-dist \\ --prefer-stable \\ --sort-packages \\ encore/laravel-admin # 看到以下输出，说明安装成功。 Package manifest generated successfully. # 退出Composer镜像 $ exit ","date":1705641975,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"995f1662c38f571046c4ba734004fe97","permalink":"https://blog.cuile.com/post/laravel/install_for_centos/","publishdate":"2024-01-19T13:26:15+08:00","relpermalink":"/post/laravel/install_for_centos/","section":"post","summary":"1、安装Composer镜像 $ docker pull composer:1.9.0 2、安装laravel # 启动Composer镜像 $ docker run --rm \\ -it \\ -v ${PWD}:/app \\ composer:1.9.0 /bin/bash # 创建composer.json文件 $ composer init -n # 使用国内 Packagist镜像 $ composer config repo.packagist composer https://mirrors.aliyun.com/composer/ # 添加laravel包 $ composer require -vvv \\ --prefer-dist \\ --prefer-stable \\ laravel/installer # 看到以下输出，说明添加成功。 Writing lock file Generating autoload files # 在当前目录覆盖安装laravel $ ./vendor/bin/laravel new # 看到以下输出，说明安装成功。 Package manifest generated successfully. Application ready! Build something amazing. # 退出Composer镜像 $ exit 将当前目录下的storage目录权限，设为757\n","tags":["php","docker","centos","laravel"],"title":"在CentOS中安装 Laravel 框架","type":"post"},{"authors":null,"categories":null,"content":"因为阿里的弹性WEB托管，使用php 5.5.30版本，所以只能安装Laravel 5.2版本。\n本教程使用WSL + docker环境安装，除完整的laravel环境外，不会在本地留下任何痕迹。\n1、本地安装Composer镜像 $ docker pull composer:1.9.0 2、配置Composer镜像 # 启动Composer镜像 $ docker run --rm \\ -it \\ -v ${PWD}:/app \\ composer:1.9.0 /bin/bash # 使用国内 Packagist镜像 $ composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/ $ composer create-project -vvv \\ --prefer-dist \\ --no-scripts \\ --keep-vcs \\ laravel/laravel:5.2.31 \\ YSME # 看到以下输出，说明安装完成。 Writing lock file Generating autoload files # 退出Composer镜像 $ exit 4、安装到虚拟主机 copy YSME目录下的全部内容，到虚拟主机的目录下即可。\n5、测试 访问 http://你的域名/YSME/public/ 如果显示 Laravel 5 字样，说明安装成功！\n","date":1705641495,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"fba1347cd3a32b0ce429ecfe1c6edaaf","permalink":"https://blog.cuile.com/post/laravel/install_for_virtualhost/","publishdate":"2024-01-19T13:18:15+08:00","relpermalink":"/post/laravel/install_for_virtualhost/","section":"post","summary":"因为阿里的弹性WEB托管，使用php 5.5.30版本，所以只能安装Laravel 5.2版本。\n本教程使用WSL + docker环境安装，除完整的laravel环境外，不会在本地留下任何痕迹。\n1、本地安装Composer镜像 $ docker pull composer:1.9.0 2、配置Composer镜像 # 启动Composer镜像 $ docker run --rm \\ -it \\ -v ${PWD}:/app \\ composer:1.9.0 /bin/bash # 使用国内 Packagist镜像 $ composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/ $ composer create-project -vvv \\ --prefer-dist \\ --no-scripts \\ --keep-vcs \\ laravel/laravel:5.2.31 \\ YSME # 看到以下输出，说明安装完成。 Writing lock file Generating autoload files # 退出Composer镜像 $ exit 4、安装到虚拟主机 copy YSME目录下的全部内容，到虚拟主机的目录下即可。\n5、测试 访问 http://你的域名/YSME/public/ 如果显示 Laravel 5 字样，说明安装成功！\n","tags":["php","docker","laravel"],"title":"虚拟主机安装 Laravel 框架","type":"post"},{"authors":null,"categories":null,"content":"使用snap 的过程中经常遇到无法链接的情况。\n$ sudo snap install code --classic error: unable to contact snap store 这是因为SnapCraft将软件包放在自己的海外服务器上，因为众所周知的原因，访问速度异常缓慢，不加代理的情况下，基本无法使用。\nLinux上的一些应用程序会通过读取环境变量 http_proxy 和 https_proxy 来应用代理服务器设置，典型的有Chrome。\n然而，Snap比较特别，它不会从环境变量中上述环境变量中读取代理服务器设置，因此直接使用\nexport http_proxy=[代理服务器地址] export https_proxy=[代理服务器地址] 是不起作用的。\n网上有一些修改配置文件的方法，个人觉得很麻烦，也容易出错，所以选了最简单可靠的命令行模式。\n1. 设置命令 $ sudo snap set system proxy.https=\u0026#34;http://代理服务器地址:代理端口\u0026#34; $ sudo snap set system proxy.http=\u0026#34;http://代理服务器地址:代理端口\u0026#34; 参考文档 ubuntu snap install 代理设置 为Snapd设置代理 ","date":1705641315,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"fbe9a6904c0aaa207775a17d385b1a53","permalink":"https://blog.cuile.com/post/snap/snap_proxy/","publishdate":"2024-01-19T13:15:15+08:00","relpermalink":"/post/snap/snap_proxy/","section":"post","summary":"使用snap 的过程中经常遇到无法链接的情况。\n$ sudo snap install code --classic error: unable to contact snap store 这是因为SnapCraft将软件包放在自己的海外服务器上，因为众所周知的原因，访问速度异常缓慢，不加代理的情况下，基本无法使用。\nLinux上的一些应用程序会通过读取环境变量 http_proxy 和 https_proxy 来应用代理服务器设置，典型的有Chrome。\n然而，Snap比较特别，它不会从环境变量中上述环境变量中读取代理服务器设置，因此直接使用\nexport http_proxy=[代理服务器地址] export https_proxy=[代理服务器地址] 是不起作用的。\n网上有一些修改配置文件的方法，个人觉得很麻烦，也容易出错，所以选了最简单可靠的命令行模式。\n1. 设置命令 $ sudo snap set system proxy.https=\"http://代理服务器地址:代理端口\" $ sudo snap set system proxy.http=\"http://代理服务器地址:代理端口\" 参考文档 ubuntu snap install 代理设置 为Snapd设置代理 ","tags":["proxy","Snap"],"title":"snap 设置代理","type":"post"},{"authors":null,"categories":null,"content":"1.安装五笔 输入法设定-获取更多输入方案-在打开的命令行窗口 输入 “wubi” 回车 2.配置P站风格配色主题 用户文件夹-weasel.custom.yaml 在 “patch:” 项目下加入： # P站风格配色主题 \u0026#34;style/color_scheme\u0026#34;: \u0026#34;Pornhub\u0026#34; \u0026#34;preset_color_schemes/Pornhub\u0026#34;: author: \u0026#34;周庸生\u0026#34; back_color: 0x000000 border_color: 0x000000 candidate_text_color: 0xffffff comment_text_color: 0xffffff hilited_back_color: 0x009bff hilited_candidate_back_color: 0x009bff hilited_candidate_text_color: 0x000000 hilited_comment_text_color: 0x000000 hilited_lable_color: 0x000000 hilited_text_color: 0x000000 label_color: 0xffffff name: Pornhub text_color: 0xffffff 注意格式缩进 参考文档 Rime输入法安装与配置 Rime默认英文状态 致第一次安装RIME的你 ","date":1705641075,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"94d6030158a55bfec2868b3c24b54d7a","permalink":"https://blog.cuile.com/post/rime_setup/","publishdate":"2024-01-19T13:11:15+08:00","relpermalink":"/post/rime_setup/","section":"post","summary":"1.安装五笔 输入法设定-获取更多输入方案-在打开的命令行窗口 输入 “wubi” 回车 2.配置P站风格配色主题 用户文件夹-weasel.custom.yaml 在 “patch:” 项目下加入： # P站风格配色主题 \"style/color_scheme\": \"Pornhub\" \"preset_color_schemes/Pornhub\": author: \"周庸生\" back_color: 0x000000 border_color: 0x000000 candidate_text_color: 0xffffff comment_text_color: 0xffffff hilited_back_color: 0x009bff hilited_candidate_back_color: 0x009bff hilited_candidate_text_color: 0x000000 hilited_comment_text_color: 0x000000 hilited_lable_color: 0x000000 hilited_text_color: 0x000000 label_color: 0xffffff name: Pornhub text_color: 0xffffff 注意格式缩进 参考文档 Rime输入法安装与配置 Rime默认英文状态 致第一次安装RIME的你 ","tags":["Rime"],"title":"Rime输入法设置","type":"post"},{"authors":null,"categories":null,"content":"Windows 10 自带输入法，没有候选字栏 \u0026gt; DISM /Online /Add-Capability /CapabilityName:Windows.Client.ShellComponents~~~~0.0.1.0 我用的win10自带输入法，最近不知道为什么没有候选字栏，只能用空格选定输入，怎么解决？ 卸载预装应用 # 查看所有预装应用 \u0026gt; Get-AppxPackage | Select Name, PackageFullName # 移除指定应用（例如 Xbox） \u0026gt; Get-AppxPackage *xbox* | Remove-AppxPackage # 移除所有用户的应用（加 -AllUsers） \u0026gt; Get-AppxPackage -AllUsers *Microsoft.YourPhone* | Remove-AppxPackage -AllUsers # 彻底禁用自动安装（防止更新后恢复） \u0026gt; Set-Content -Path \u0026#34;HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\CloudContent\u0026#34; -Name \u0026#34;DisableWindowsConsumerFeatures\u0026#34; -Value 1 -Type DWord 自定义命令 Set-Alias -name ll -value Get-ChildItem -Force ","date":1704685799,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"944e50bf427ab2edef006c0baa8d4037","permalink":"https://blog.cuile.com/post/windows/windows_setup/","publishdate":"2024-01-08T11:49:59+08:00","relpermalink":"/post/windows/windows_setup/","section":"post","summary":"Windows 10 自带输入法，没有候选字栏 \u003e DISM /Online /Add-Capability /CapabilityName:Windows.Client.ShellComponents~~~~0.0.1.0 我用的win10自带输入法，最近不知道为什么没有候选字栏，只能用空格选定输入，怎么解决？ 卸载预装应用 # 查看所有预装应用 \u003e Get-AppxPackage | Select Name, PackageFullName # 移除指定应用（例如 Xbox） \u003e Get-AppxPackage *xbox* | Remove-AppxPackage # 移除所有用户的应用（加 -AllUsers） \u003e Get-AppxPackage -AllUsers *Microsoft.YourPhone* | Remove-AppxPackage -AllUsers # 彻底禁用自动安装（防止更新后恢复） \u003e Set-Content -Path \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\CloudContent\" -Name \"DisableWindowsConsumerFeatures\" -Value 1 -Type DWord 自定义命令 Set-Alias -name ll -value Get-ChildItem -Force ","tags":["输入法","windows"],"title":"Windows配置","type":"post"},{"authors":null,"categories":null,"content":"亚青赛 (一)选拔队 神宗一郎轻轻的拍着清田，而清田已经流下了伤心的泪水。\n是的，海南在其全国大赛的决赛上，输给了从未输过的湘北，并且还是输的如此之惨。\n不过海南的队员们已经很努力，清田更是其中几近拼命的人，但是作为海南的队长，作为一个得分手，神却因为半决赛的伤几乎没有上场，在场下目睹自己球队的溃败，这样的事情简直是一种折磨。一切都已经过去，海南只能眼睁睁的看着湘北成为全国的霸主。\n获得冠军的湘北，并没有表现出那种击败山王时的兴奋。似乎他们已经习惯了胜利，或者他们已经有了傲视群雄的霸气。而这种霸气在湘北的五名主力队员中体现出来了。\n流川面对清田的反击依然保持着王牌的本色，藤真的三分成了湘北的独门武器，宫城的组织也变得应对自如，回归的木石则成为全场得分最多的球员，樱木的防守固若金汤。\n就这样全国大赛以湘北的胜利结束了，但故事还在继续…\n本次大赛还有一个重要的任务，那就是由日本70年代的篮球传奇人物，北川光烈在本次大赛的八强队伍中，为3个月后在日本进行的亚洲青年锦标赛挑选队员。而北川光烈则是日本青年队的教练。\n北川也在一个20人的名单中经过一个星期的试训挑选出来了11名队员。\n他们是：\n中锋：5号森重宽(204cm，名朋工业) 4号木石瞳(199cm，湘北) 6号神宗一郎(191cm，海南)\n大前锋：8号土屋淳(192cm，大荣) 10号樱木花道(190.5cm，湘北) 15号坂野已(192cm，爱和)\n小前锋：11号流川枫(189cm，湘北) 18号泽北荣治(188.5cm，山王) 9号清田信长(181cm，海南)\n后卫：14号深津一成(183cm，山王) 13号大久保龙人(185cm，名朋工业)\n泽北对北川教练：“教练，我有问题。”\n“恩？说。”\n泽北：“我打球以来除了在山王的第一年穿过10以上的号码之外，我从来都只穿单数号码。”\n北川：“噢。不过单数号码已经没有了。”\n泽北：“不是还有吗？还有一个7号。”\n北川：“呵呵，对不起那个号码已经被预留了。”\n泽北(生气)：“什么！！”\n北川：“全体注意！下面我给大家介绍一下我们的队长，来自神奈川的仙道章！”\n门突然打开，仙道走了进来。“大家好，我是神奈川陵南的仙道章。请多关照。”\n流川\u0026amp;樱木\u0026amp;木石\u0026amp;神(惊讶！)\n泽北：“哼，我就猜的是这个家伙！”\n流川：“哼，这次总算没有迟到。”\n7号仙道章(192cm，陵南) 小前锋 日本青年队队长，唯一没有参加过全国大赛的队员。\n而海南的神宗一郎则成为了副队长。 (注：湘北的宫城，藤真，山王的一本道海斗，等成为了候补补充队员。)\n(二)集训开始 由北川带领下的日本青年队转到琦玉县开始了集训。\n北川把队员分组进行针对性训练。\n森重宽，木石瞳，樱木花道，坂野己，土屋淳着重进行内线的攻防训练。\n大久保和深津作为控球后卫进行组织和传接训练。\n流川，泽北，仙道，清田主要进行进攻训练。\n另外仙道，大久保和神宗一郎加练远投。\n北川考虑到今后对手的不同，而有意塑造森重宽和木石瞳的不同风格。让森重宽再内线更加充满冲击力，而木石瞳利用他柔韧的身体以及中投好的特点则成为另一种风格的中锋。这样日本队在对阵对手的时候下就会有不同的选择。神虽然是作为中锋注册，但神的得分还是着重在外线，这样阿神扮演了日本队的杀手的角色。\n樱木的爆发力和不错的体力再次为北川看重，加上和仙道的特训以及这次的集训，使樱木在篮球方面的意识得到了很大的提高，除去经验上的不足之外，樱木已经成为日本队极其重要的队员。北川正在努力把樱木培养成日本一流的防守队员。\n但是问题出现在小前锋和后卫的选择上。\n无论是泽北还是流川和仙道都具有首发的资格和实力，但是北川在训练中一直把仙道放入替补阵容中。\n流川和泽北的竞争日趋激烈，双方实力接近。但是由于山王在全国大赛的失利使得泽北心态上发生了改变，一直想在日本队中重新确立自己是第一人的想法，使得泽北得分虽多，但是过分的单打。这样就违背了北川把日本队变成一个团结合作的球队的思想。而流川自从和樱木合作战胜山王之后，同样心态有了变化，反而是增加了和他人的配合，并且在球场上越发的自如。虽然泽北依旧是第一前锋但是渐渐的北川已经有了让流川取代他的想法。\n后卫的选择也出现了问题。深津的控球是最好的，同时防守也不错。但是大久保虽然不是一个真正意义上的控球后卫，但是他的意识和突破还有比深津更强的得分能力和传球的感觉。让北川很难在两人中选择谁是主力控球后卫。\n为此北川决定把队伍分成2组进行一场真正的比赛，从而考察队员，并确立自己的主力阵容。\nA队： 5号森重，6号神，8号土屋，9号清田，14号深津，18号泽北。\nB队： 4号木石，7号仙道，10号樱木，11号流川，13号大久保，15号坂野。\n(三)北川的决定 “唰\u0026#34;是神的三分，球虽然进了，但是已经无法挽回A队落败的结果。\n在30分钟的内部比赛中，由队长仙道带领的B队65：52击败了副队长神带领的A队。\n北川对助手说：“把2队的技术统计拿来。”\nA队 姓名 得分 三分球 篮板 助攻 抢断 泽北 20 1/3 4 1 2 森重 13 0 8 1 0 神 11 3/4 2 4 0 土屋 4 0/2 5 3 1 深津 2 0/2 5 3 0 清田 2 0 0 1 0 B队 姓名 得分 三分球 篮板 助攻 抢断 流川 16 1/1 4 4 1 木石 15 0/6 3 0 5 仙道 13 1/2 4 8 2 樱木 8 0 8 2 1 大久保 10 1/1 3 8 0 坂野 3 0 3 1 0 助手：“看来A队除了在三分球上占有优势外，别的似乎是B队占优。不过泽北依然拿了全场最高得分，看来他还是日本队中最具有进攻力的球员。”\n北川：“泽北真是一个危险的棋子。”\n助手：“什么？教练的意思….”\n北川：“这场比赛其实我是认为A队将获得胜利的。深津和泽北同属山王，所以他很可能习惯性的把球交给泽北，泽北拿球的机会明显多于A队其他队员，这样就导致了一个结果，泽北的得分机会增加，其他队员的机会明显下降。其实不论输赢A队的得分应该不仅仅只有52分，泽北的过多的单打让许多更好的机会丧失了。”\n助手：“是啊，在助攻方面B队具有绝对优势，而且仙道和大久保竟然都拿到了8次助攻。”\n北川：“这就是我要的，一个富于变化，整体合作的球队，而不是一两个人的球队。”\n助手：“流川拿了16分，是B队中得分最高的球员，他还有4次助攻。看来流川的进步还是很快的。”\n北川：“我们的练习赛对手都找好了吗？”\n助手：“都已经找好了，8支大学球队已经联系好了，其中还有4支是今年大学联赛的8强球队。他们是琦玉县的—–日本工业大学，骏河台大学。东京都的—-东京大学，东京都立大学。千叶县的—-帝京平成大学，神奈川县的—湘南工科大学，以及爱知县的—爱知工业大学。”\n北川：“我们的第一个对手是谁？”\n助手：“是去年大学联赛8强的湘南工科大学，实力很强。”\n北川：“哦？是来自神奈川的吗？我要通过这8场比赛来确定谁将成为日本队的5名主力球员。”\n(四)神奈川的对决—-挑战三井寿 北川：“大家听好了，明天开始我们将开始集训的最后阶段，也就是检验你们的时候来到了，我们将和大学球队进行8场练习赛。这八场比赛的发挥将决定你们在队中的位置，大家努力发挥吧。”\n助手：“我们第一个对手是今年大学联赛的8强球队—-湘南工科大学”\n神：”…\u0026#34;\n仙道：“是来自神奈川县的。”\n樱木：“咦，仙道你知道？” 。\n流川：“湘南工科大学，神奈川县赛区的冠军球队，连续8年打进大学联赛8强。”\n土屋：\u0026#34;？？？第一场就打这么强的球队。\u0026#34;\n泽北：“哼，没什么对方只是年龄大一些而已，我高二的时候就和许多有名的大学篮球高手较量过了我基本全赢了。”\n众人：\u0026#34;…\u0026#34;\n流川：“明天也许会遇到那个人…”\n……\n神：“流川。”\n流川：“神…？”\n神：“湘北的射手—三井寿，是不是在湘南工科。”\n流川：\u0026#34;…怎么想和他在进行一次较量吗？\u0026#34;\n神(回忆)\n在全国大赛的最后决赛后。\n“不要灰心，神你做的很好。”\n“阿牧！高砂！”\n“阿牧，我没有想到海南会输的这么惨，算是完败吧。”\n“我知道你的心情，上不了场的心情比输球的心情更难受。只能看到对手得分，自己却无能为力！”\n“牧…，对了阿牧你们大学联赛不是也在进行着吗，怎么有时间过来呢。”\n“其实原来海南和湘北的球员都来了。我们的大学联赛的比赛已经结束了。我的，赤木的都结束了？只有一个人的还没有结束。”\n“？”\n“神，我也是受伤连上场的机会都没有，眼看着自己的球队输球。赤木在县大赛中就输了，只有三井所在的湘南工科现在已经进入了全国大赛的8强。这一年，三井这小子比我和赤木都风光啊。”\n“湘南工科？三井寿？”\n“怎么，神？”\n“没什么，我接到了湘南工科的邀请希望我高中毕业后能到他们学校打球！”\n第二天…\n北川：“结果并不重要，重要的是把我们训练的成果体现出来。”\n助手：“对方队中有今年神奈川县大赛的MVP—靖远优作，以及最佳新人三井寿。综合实力是神奈川最强的！”\n樱木\u0026amp;清田：“什么！三井寿！”\n神：“三井…”\n流川：“他，果然来了。那个熟悉的身影…”\n(五)挫折 比赛开始了，日本青年队的五名首发：\n18号泽北 5号森重宽 8号土屋淳 13号大久保 14号深津 而湘南工科的最佳新人三井寿和队长铃木保都没有作为首发。但是在靖远优作的带领下，依靠身体上的优势，湘南工科一直压制着日本青年队。\n泽北由于个人能力突出被湘南工科重点盯防，好在大久保和森重的名朋组合让青年队的比分没有被拉开。\n由于对方的强力攻击，让森重和土屋耗费了过多的体力。在上半场比赛还有不少时间的时候，木石瞳和樱木被替换上场。有了樱木的防守，湘南工科的内线进攻变得不如原来那么顺利。\n青年队得到了比分缩小的机会，但是泽北为了显示王牌的实力，大都选择个人强攻。\n湘南工科换上了以防守见长的队长铃木保，泽北在严密的防守下依然我行我素，终于北川作出了让流川上场换下泽北的决定。这激怒了已经得了不少分的泽北。\n半场比赛结束。53：36，湘南工科领先17分。\n下半场，湘南工科把主力队员换下，以替补阵容比赛。\n樱木，流川被激怒，在场下的仙道主动请求上场，这样由仙道，流川，樱木，木石四人组成的神奈川县高中球员加上大久保，向神奈川最强的大学球队湘南工科发起挑战。\n仙道的加入极大的带动了场上的队员的情绪，而这5人的配合完全打败了湘南工科的替补阵容，仅仅不到10分钟双方的比分差距就不到7分。这时的青年队让湘南工科再次重新重视起来，连忙换上了靖远和铃木和其他主力，并且派上了最佳新人三井寿。这样三井在离开高中后，第一次以对手的身份面对流川和樱木等人。\n这样双方进行了一场得分大战，大久保和仙道的组合让青年队的其他队员发挥出了最大的潜力和能量，尤其仙道作为队长体现出了一种和原先截然不同的霸气。\n后来木石瞳被森重宽替下，神替换流川。三井和神宗一郎的神奈川最佳射手争夺一直延续到这场比赛。\n由于三井在大学锻炼了自己的体能，这样唯一一个薄弱环节也被三井克服，当年初中的MVP的风采再次凸现，而阿神不仅从牧哪里学到了强行突破并且获得了高中的MVP。2个MVP之间的争斗成为场上最精彩的镜头。而湘南工科的教练对于这个神奈川的MVP—神宗一郎欣赏有佳。\n他认为在拥有了神和三井的湘南工科一定会在今后的全国大赛中取得更好的成绩。最后樱木的灌篮结束了这场比赛，虽然青年队在下半场发挥出色，但是由于上半场的差距太大，最终导致105：111落败。\n赛后，三井和曾经的队友们和对手们告别，而湘南工科正式向神宗一郎发出了邀请，神将在高中毕业后顺利进入日本篮球名校—湘南工科大学，并和曾经的对手三井并肩作战。\n北川光烈认为这场比赛虽然输了，只是一个应该有的挫折而已，但是他却从这场比赛中得到了许多宝贵的东西。\n而泽北和北川的矛盾也从这一刻开始明朗化了。\n(六)三连败 在输给湘南工科的三天后，日本青年队由琦玉转战到东京。在那里他们将迎战东京大学和东京都立大学。\n泽北由于在上一场比赛中途被换下，并且在此后一直没有上场，从而泽北对于北川教练开始极为不满。泽北带有抵触情绪，而北川也最终决定让流川代替泽北的先发位置。\n到达东京后，北川重点考察了流 …","date":1701002630,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"71b2914a94ba1c46fb36eafbbbf697c3","permalink":"https://blog.cuile.com/post/slam_dunk_2/","publishdate":"2023-11-26T20:43:50+08:00","relpermalink":"/post/slam_dunk_2/","section":"post","summary":"亚青赛 (一)选拔队 神宗一郎轻轻的拍着清田，而清田已经流下了伤心的泪水。\n是的，海南在其全国大赛的决赛上，输给了从未输过的湘北，并且还是输的如此之惨。\n不过海南的队员们已经很努力，清田更是其中几近拼命的人，但是作为海南的队长，作为一个得分手，神却因为半决赛的伤几乎没有上场，在场下目睹自己球队的溃败，这样的事情简直是一种折磨。一切都已经过去，海南只能眼睁睁的看着湘北成为全国的霸主。\n获得冠军的湘北，并没有表现出那种击败山王时的兴奋。似乎他们已经习惯了胜利，或者他们已经有了傲视群雄的霸气。而这种霸气在湘北的五名主力队员中体现出来了。\n流川面对清田的反击依然保持着王牌的本色，藤真的三分成了湘北的独门武器，宫城的组织也变得应对自如，回归的木石则成为全场得分最多的球员，樱木的防守固若金汤。\n就这样全国大赛以湘北的胜利结束了，但故事还在继续…\n本次大赛还有一个重要的任务，那就是由日本70年代的篮球传奇人物，北川光烈在本次大赛的八强队伍中，为3个月后在日本进行的亚洲青年锦标赛挑选队员。而北川光烈则是日本青年队的教练。\n北川也在一个20人的名单中经过一个星期的试训挑选出来了11名队员。\n他们是：\n中锋：5号森重宽(204cm，名朋工业) 4号木石瞳(199cm，湘北) 6号神宗一郎(191cm，海南)\n大前锋：8号土屋淳(192cm，大荣) 10号樱木花道(190.5cm，湘北) 15号坂野已(192cm，爱和)\n小前锋：11号流川枫(189cm，湘北) 18号泽北荣治(188.5cm，山王) 9号清田信长(181cm，海南)\n后卫：14号深津一成(183cm，山王) 13号大久保龙人(185cm，名朋工业)\n泽北对北川教练：“教练，我有问题。”\n“恩？说。”\n泽北：“我打球以来除了在山王的第一年穿过10以上的号码之外，我从来都只穿单数号码。”\n北川：“噢。不过单数号码已经没有了。”\n泽北：“不是还有吗？还有一个7号。”\n北川：“呵呵，对不起那个号码已经被预留了。”\n泽北(生气)：“什么！！”\n北川：“全体注意！下面我给大家介绍一下我们的队长，来自神奈川的仙道章！”\n门突然打开，仙道走了进来。“大家好，我是神奈川陵南的仙道章。请多关照。”\n流川\u0026樱木\u0026木石\u0026神(惊讶！)\n泽北：“哼，我就猜的是这个家伙！”\n流川：“哼，这次总算没有迟到。”\n7号仙道章(192cm，陵南) 小前锋 日本青年队队长，唯一没有参加过全国大赛的队员。\n而海南的神宗一郎则成为了副队长。 (注：湘北的宫城，藤真，山王的一本道海斗，等成为了候补补充队员。)\n(二)集训开始 由北川带领下的日本青年队转到琦玉县开始了集训。\n北川把队员分组进行针对性训练。\n森重宽，木石瞳，樱木花道，坂野己，土屋淳着重进行内线的攻防训练。\n大久保和深津作为控球后卫进行组织和传接训练。\n流川，泽北，仙道，清田主要进行进攻训练。\n另外仙道，大久保和神宗一郎加练远投。\n北川考虑到今后对手的不同，而有意塑造森重宽和木石瞳的不同风格。让森重宽再内线更加充满冲击力，而木石瞳利用他柔韧的身体以及中投好的特点则成为另一种风格的中锋。这样日本队在对阵对手的时候下就会有不同的选择。神虽然是作为中锋注册，但神的得分还是着重在外线，这样阿神扮演了日本队的杀手的角色。\n樱木的爆发力和不错的体力再次为北川看重，加上和仙道的特训以及这次的集训，使樱木在篮球方面的意识得到了很大的提高，除去经验上的不足之外，樱木已经成为日本队极其重要的队员。北川正在努力把樱木培养成日本一流的防守队员。\n但是问题出现在小前锋和后卫的选择上。\n无论是泽北还是流川和仙道都具有首发的资格和实力，但是北川在训练中一直把仙道放入替补阵容中。\n流川和泽北的竞争日趋激烈，双方实力接近。但是由于山王在全国大赛的失利使得泽北心态上发生了改变，一直想在日本队中重新确立自己是第一人的想法，使得泽北得分虽多，但是过分的单打。这样就违背了北川把日本队变成一个团结合作的球队的思想。而流川自从和樱木合作战胜山王之后，同样心态有了变化，反而是增加了和他人的配合，并且在球场上越发的自如。虽然泽北依旧是第一前锋但是渐渐的北川已经有了让流川取代他的想法。\n后卫的选择也出现了问题。深津的控球是最好的，同时防守也不错。但是大久保虽然不是一个真正意义上的控球后卫，但是他的意识和突破还有比深津更强的得分能力和传球的感觉。让北川很难在两人中选择谁是主力控球后卫。\n为此北川决定把队伍分成2组进行一场真正的比赛，从而考察队员，并确立自己的主力阵容。\nA队： 5号森重，6号神，8号土屋，9号清田，14号深津，18号泽北。\nB队： 4号木石，7号仙道，10号樱木，11号流川，13号大久保，15号坂野。\n(三)北川的决定 “唰\"是神的三分，球虽然进了，但是已经无法挽回A队落败的结果。\n在30分钟的内部比赛中，由队长仙道带领的B队65：52击败了副队长神带领的A队。\n北川对助手说：“把2队的技术统计拿来。”\nA队 姓名 得分 三分球 篮板 助攻 抢断 泽北 20 1/3 4 1 2 森重 13 0 8 1 0 神 11 3/4 2 4 0 土屋 4 0/2 5 3 1 深津 2 0/2 5 3 0 清田 2 0 0 1 0 B队 姓名 得分 三分球 篮板 助攻 抢断 流川 16 1/1 4 4 1 木石 15 0/6 3 0 5 仙道 13 1/2 4 8 2 樱木 8 0 8 2 1 大久保 10 1/1 3 8 0 坂野 3 0 3 1 0 助手：“看来A队除了在三分球上占有优势外，别的似乎是B队占优。不过泽北依然拿了全场最高得分，看来他还是日本队中最具有进攻力的球员。”\n","tags":["灌篮高手","篮球飞人","篮球","动漫","故事"],"title":"灌篮高手大结局(全国大赛后) 下","type":"post"},{"authors":null,"categories":null,"content":"(一) 再见高中时代 湘北在全国大赛八强战中输给了爱知县的代表。海南决赛以几分的差距输给名朋工业。\n名朋工业的森重宽是当年的MVP。而由海南、湘北、翔阳、陵南组成的神奈川联队将继续征战。而联队也获得了不错的战绩(具体战绩不明)。\n第二年，湘北的赤木、目暮、三井离开高中升上大学，同样鱼住离开陵南并在父亲的餐馆中打工，翔阳的藤真为了原一次高中拿到县冠军而暂时放弃上大学。\n海南的阿牧在临走时，希望海南的教练能够把流川枫和樱木挖来并以奖学金诱惑。遭到樱木和流川枫的拒绝。阿牧以已经发现流川枫和樱木的成长将成为海南称霸的最大的威胁。并在暑假向神宗一郎传授技艺，以对付日益强大的湘北。\n(二) 新的开始 由于湘北出色的战绩，以及樱木的个人魅力，在第二年报名湘北篮球社的人有很多，其中一个竟然是外县的初中MVP—-木石瞳，另外一个则是藤真健次的弟弟—藤真明次。\n木石瞳身高199，身体柔韧性极佳，但天生身体体质缺陷(自幼多病并且有很严重的肺病)，他之所以来湘北则是向往着可以和樱木、流川一起打球。木石瞳的特点就是一个至柔的中锋(奥拉朱旺型的)。\n明次则是不愿意在哥哥的光环下生存，明次的特点是中投和三分很准，但缺点则是不会上篮。(宫城曾教他，但没有学会，藤真健次曾说我原来教了他100遍他也不会)。\n另外由于陵南的越野也离开了球队，球队的控球后卫则是彦一，陵南的整体实力有很大的下降。海南依旧保持着很好的球员，新的高一也有一名很出色的中锋(具体名字不祥)。\n县大赛开始了，在新队长宫城的率领下。湘北一路大胜对手，杀到最后的四强战。樱木依然得分不多，但抢篮板的能力变的超强，流川依旧是最佳的得分手，木石瞳一般只能上半场球，明次高命中率的中远投使他成为湘北第二得分手。\n期间，湘北高一和高二高三联队进行练习赛，樱木由于知道木石瞳有病，并没有尽力和他对抗，而流川则在木石瞳面前带球、过人、投球、灌篮。樱木是保护木石瞳，流川则是激励木石瞳。致使木石瞳对篮球有了一个新的认识。(原来木石瞳打篮球只是用一种让自己死的更快的方式而已)。\n海南、翔阳也都轻松的杀入最后的四强。陵南由于控球后卫越野和原来的高大中锋鱼住的离队致使实力明显下降，只是由于仙道一个人的力量艰难杀入4强。(这里说一下续集中的仙道章实力比原作中的更上一层，只是周围再也没有能和他配合的人，包括福田都说：“仙道的水平已经不是一个神奈川县可以容的下的了)\n这样四强聚齐，新的一轮的大战即将开始……\n(三) 球场上没有兄弟，只有对手 第一战湘北vs翔阳。\n木石瞳的肺病突发，致使湘北没有一个真正的中锋，中锋的位置由樱木代替。里面有两个看点，由于阿牧的离开，神奈川县的第一控球后卫的争夺就在宫城和藤真健次之间展开。宫城被藤真健次很好的牵制住，而且藤真健次的组织使翔阳队控制了场上的主动，由于樱木对中锋的位置很陌生，这点被藤真抓住，多次打樱木成功。\n由于藤真健次出色的组织致使流川枫再进攻上受到围攻，湘北上半场处于落后的局面。藤真健次全面压倒宫城和流川枫。下半场，藤真健次依然希望用自己防住宫城，而用联防遏制流川，用强攻打樱木(樱木犯规多次)。\n但是英雄出现了，这也就是本场比赛第二个看点，也是翔阳致命的一大失误。那就是藤真明次的中投开始发威了..\n由于健次负责盯宫城，而又需要对流川枫进行2个人的联防，致使弟弟明次在下半场突然爆发。下半场一人中投得到20多分，虽然哥哥健次在后来发现了这个翔阳的弱点，但由于当时湘北流川和樱木的成熟，翔阳的其他人已经无法阻挡他们两个人了。\n最后靠着藤真明次的出色发挥湘北大翻盘。\n宫城对藤真说：“你是神奈川第一控球后卫。”\n藤真健次：“你们赢得了胜利，神奈川以后是你们的了。\u0026#34;(目光凝视着在宫城旁边的弟弟)\n(四) 别了！仙道章 第二战陵南vs海南。\n喜欢仙道的人们，看完了会有一种欲哭无泪的感觉。海南所有的人都防不住仙道的突破，所有的人都猜不透他的传球。但最终结果是海南赢陵南20多分。赛后陵南的人想起了鱼住。彦一则想到了越野。\n清田：“陵南已不是原来的陵南了。”\n神宗一郎：“仙道也不是原来的仙道。”\n清田：“陵南输就输在，陵南没有一个人可以跟的上仙道的步伐了。”\n神宗一郎(低头沉思)：“神奈川还有跟的上仙道的人吗？清田？我？藤真？似乎都不行，也许只有流川枫了。不流川还是和仙道有差距的，也许只有阿牧能吧…..”\n之后湘北遭遇陵南，陵南的悲剧第二次上演。上半场依靠木石瞳和流川的得分使得湘北领先，但福田给樱木造成不小的困难。\n由于受到翔阳失败的启发，明次被陵南完全封死。但仙道为了球队的整体，回避了和流川的对决。仙道和流川的对决是在下半场开始的，流川几次的故意找仙道挑衅，终于仙道开始了回应。同样福田也几次挑衅樱木。樱木也开始了爆发。(樱木竟然握着仙道的手说：“咱们一起打败他们！”)\n仙道的传球实在是诡谲，并且仙道总是在别人认为传球的时候突破，认为投球的时候传球，流川和仙道的对决中处于全面下风，最后改由木石瞳加宫城盯防仙道，利用木石瞳的身高和宫城的速度来限制仙道。\n福田和樱木的对决，樱木抢断了福田的那种背后运球。并且灌篮得分。最后陵南再次输给了湘北，从而2战全败提前出局。\n仙道(依然没痛苦)：“流川，你又变强了。”\n流川枫(脸色阴暗)：“离你的距离还远着呢”。\n(五) 神宗一郎MVP 由于翔阳再接下面的比赛中惜败于海南，这样海南和湘北已经提前出现，陵南和翔阳则遭到淘汰。之后翔阳赢陵南(藤真、福田、仙道均没有上场)。这样海南和湘北争夺冠军。对于湘北来说这是一场复仇的比赛，对于海南来说他们要维持自己在神奈川的王者之气。\n正如阿牧所说：“能进入海南的都是强者，他们不能因为上届的优秀队员的离开，而变得懦弱，他们只有一个目标无敌于神奈川，称霸于全国。”\n虽然两队已经提前出现，但无论是湘北还是海南都要全力赢得这场比赛。湘北为了赤木的心愿击败强者海南。海南则是为了他们历史赋予他们的荣誉。\n这场比赛刚一开始湘北的士气很高，流川也不独，为了胜利他也开始传球，樱木和对方的2名高大队员挣强，木石瞳带伤上场。最重要的是神宗一郎的三分球使海南超过湘北，但是藤真明次马上就换以颜色(藤真健次来到现场为弟弟加油)，这极大的鼓舞了士气，明次也让人们看到了三井的影子。\n当所有的一切开始向着湘北有利的情况发展的时候，海南的队长神宗一郎突然使出了强行突破的技术，这让所有的人感到惊讶。由于阿牧敏锐的觉察到，现在的湘北已经具有超越海南的潜质，并且高砂和自己的离队会使海南失去身体优势，而作为一个中锋神宗一郎总是在外线投球，为了能和以后的中锋对抗，并加强海南内线的实力，阿牧在暑假给神宗一郎进行了秘密的身体特训。\n这样由于阿神突然使出这一绝招导致湘北极其被动，阿神的突破或者三分远投让湘北很不适应，再大比分领先的情况下，被神宗一郎还有阿牧的潜在精神所击败，随着阿神最后的一个三分球中的，海南也以3分的优势击败湘北。\n这样由神宗一郎带领着的海南完成了神奈川县15连冠的霸业，且阿神即去年获得得分手后，今年再次蝉联，并毫无争议的获得县大赛MVP。\n最佳5人：\n神宗一郎(海南) 清田信长(海南) 流川枫(湘北) 藤真健次(翔阳) 仙道章(陵南) 最佳新人：\n藤真明次(湘北) (六) A档，C档？ 神奈川县的代表是海南和湘北，其他各县的代表也相继决出。\n由于名朋工业作为卫冕冠军不用参加县大赛，爱知县的首席代表是去年击败湘北的爱和学院。\n秋叶县的首席代表是维南，大阪的首席代表是大荣学院……\n由于要对所有参赛的队伍划分档次，上届的前八名的队伍除湘北之外均被化为A档，而没有进入去年前八的山王则也被列为了A档。樱木和宫城对此忿忿不平，流川一脸的无所谓，藤真明次则是向A档球队发出了必胜宣言，木石瞳一直考虑着自己的身体状态。这样湘北则在第一场比赛中遇到去年曾经战胜过的静冈县的代表B档的Toyotama(丰玉高中)。\n海南，山王等A档球队首轮轮空。\n(七) 丰玉vs湘北 去年，丰玉的南烈用卑劣的手段偷袭了湘北的王牌—流川枫。但流川可怕的用一只眼睛，同样击败了南烈和丰玉高中。今年虽然三年级的队长岸本实理离队，但丰玉以南烈为核心建立起来的新球队号称近10年最强的丰玉高中。\n流川，藤真明次上半场发挥很好频频得分。但丰玉依靠整体的逼抢和不惜体力的跑动，一直把比分咬的很紧。\n下半场，两队的体力出现了明显的差距，由于上半场的过于活跃，藤真和流川体力开始下降。而丰玉全队依旧保持了惊人的耐力和体力，丰玉的计划开始实施，由上半场的防守转为进攻，樱木的压力徒然上升，宫城也在对方的紧逼下出现了失误，丰玉开始拉紧比分。\n时间剩下不多的时候湘北仅仅领先丰玉2分，这时木石瞳利用他至柔的打法，造成丰玉中锋连续犯规，并罚球得分。随后藤真的三分不中被木石瞳抢下栏板补篮命中，双方的分数再次拉大，最后时刻流川枫接到樱木花道的意外失误传球(樱木本打算是传给藤真)，巧妙突破分球(仙道的感觉)木石瞳篮下扣篮得手。\n最后湘北以10分的优势战胜丰玉。南烈再次感到流川身上透露出来的王牌气息，并且为樱木快速成熟感到惊讶。\n南烈：“湘北的实力足以进入四强，甚至决赛。”\n而下一战等待湘北的则是去年的冠军—名朋工业\n(八) 藤真的选择 2年前，丰玉vs翔阳的上半场，藤真明次亲眼目睹了哥哥健次被丰玉的南烈肘击下场。之后的下半场缺少主将的翔阳一败涂地。\n明次：“我发誓，丰玉，我要身穿翔阳的绿色战袍把今天的一切还给你们。”\n一年后，“什么！！！湘北战胜了山王，闯进8强！这…流川枫，还有那个红头发的。看来哥哥输给他们不是偶然了。”\n“哥哥，听说湘北赢了”\n“……湘北真是不可思议”\n明次(沉思)：“哥哥，马上就要离开翔阳了，不会再有机会带领翔阳参加全国大赛了”\n“明次！”\n“恩..”\n“想不想，参加全国大赛！”\n“恩！ 当然，我会努力成为翔阳队的一员，击败海南参加全国大赛！”\n“想不想和哥哥一起参加呢？”\n“什么！！哥，你不是今年就要毕业了吗。”\n“是啊，已经有大学向我发出了邀请了。不过我不想让这个遗憾带入大学。”\n“……难道是…….”\n“击败海南，并且在全国大赛上夺取好的成绩。”\n“没有想到哥哥竟然会这样的执着，为了击败海南而选择放弃大学吗？”\n……\n“明次，你怎么来了”\n“哥哥，我来是为了告诉你一件事的”\n“哦？”\n“我已经选择加入了湘北高中。”\n“什么，湘北？为什么？” `\n“成为翔阳的一员一直是我的梦想，穿上那绿色的战袍，在球场上驰骋。哥哥，你从小就是我的偶像，能和你一起为翔阳打球也是我的一个不敢奢望的愿望，但是当这个愿望快要变成现实的时候…..”\n“……怎么了明次。”\n“我突然发现，我自己需要独立，我不要在哥哥你—–藤真健次的光环下生活着。我要穿上湘北的红色球衣，以藤真明次的身份战胜翔阳，战胜你—-藤真健次！我的哥哥！”\n“好的，明次。真是有些男子汉的味道了。好吧，那就在县大赛上我们一绝高下吧”\n……\n“喂！！那个不会上篮的家伙！”\n“是，樱木学长。”\n“快点了，比赛马上就要开始了，你还在这发什么呆啊”\n“哦，知道了，樱木学长”(看着自己印有shohoku的14号球服)“哥哥，你在看着吗……好的，来吧名朋工业！”\n(九) 湘北危机 湘北在八强战中再次遭遇卫冕冠军，樱木面对去年曾把他撞倒的森重宽内心充满了前所未有的兴奋。\n樱木：“大个子，我可不管什么卫冕冠军，什么MVP的，总之今天一定要让你们名朋工业滚回札幌。”\n宫城(汗~~)：“名朋工业是爱知县的，樱木不要在这里耍宝了。”\n而流川似乎发现了有一双眼睛在盯着他。由于森重宽是203cm的身高，整整比木石瞳高了5cm，这对只能上半场球的木石来说是最大的考验。相对来说名朋工业的得分后卫对于藤真明次的压力比较小。\n比赛开始后，为了缓解木石的防守压力，由樱木盯防森重宽，木石负责盯防名朋的大前锋高木，但是湘北低估了森重宽的冲击力，樱木被森重宽压制住，防守非常困难。\n名朋围绕着森重宽频频从湘北内线得分。由于赤木这样强力中锋的离队，导致湘北在和森重宽的对抗下处于极度下风，只是依靠着流川的个人能力得分。安西教练也看出虽然两个队伍都主要只靠着一名队员得分，但是森重宽的内线得分，要远远轻松于流川的得分。不得已， …","date":1701002622,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"fa90d2f1440f4cf181b02f066fc611cd","permalink":"https://blog.cuile.com/post/slam_dunk_1/","publishdate":"2023-11-26T20:43:42+08:00","relpermalink":"/post/slam_dunk_1/","section":"post","summary":"(一) 再见高中时代 湘北在全国大赛八强战中输给了爱知县的代表。海南决赛以几分的差距输给名朋工业。\n名朋工业的森重宽是当年的MVP。而由海南、湘北、翔阳、陵南组成的神奈川联队将继续征战。而联队也获得了不错的战绩(具体战绩不明)。\n第二年，湘北的赤木、目暮、三井离开高中升上大学，同样鱼住离开陵南并在父亲的餐馆中打工，翔阳的藤真为了原一次高中拿到县冠军而暂时放弃上大学。\n海南的阿牧在临走时，希望海南的教练能够把流川枫和樱木挖来并以奖学金诱惑。遭到樱木和流川枫的拒绝。阿牧以已经发现流川枫和樱木的成长将成为海南称霸的最大的威胁。并在暑假向神宗一郎传授技艺，以对付日益强大的湘北。\n(二) 新的开始 由于湘北出色的战绩，以及樱木的个人魅力，在第二年报名湘北篮球社的人有很多，其中一个竟然是外县的初中MVP—-木石瞳，另外一个则是藤真健次的弟弟—藤真明次。\n木石瞳身高199，身体柔韧性极佳，但天生身体体质缺陷(自幼多病并且有很严重的肺病)，他之所以来湘北则是向往着可以和樱木、流川一起打球。木石瞳的特点就是一个至柔的中锋(奥拉朱旺型的)。\n明次则是不愿意在哥哥的光环下生存，明次的特点是中投和三分很准，但缺点则是不会上篮。(宫城曾教他，但没有学会，藤真健次曾说我原来教了他100遍他也不会)。\n另外由于陵南的越野也离开了球队，球队的控球后卫则是彦一，陵南的整体实力有很大的下降。海南依旧保持着很好的球员，新的高一也有一名很出色的中锋(具体名字不祥)。\n县大赛开始了，在新队长宫城的率领下。湘北一路大胜对手，杀到最后的四强战。樱木依然得分不多，但抢篮板的能力变的超强，流川依旧是最佳的得分手，木石瞳一般只能上半场球，明次高命中率的中远投使他成为湘北第二得分手。\n期间，湘北高一和高二高三联队进行练习赛，樱木由于知道木石瞳有病，并没有尽力和他对抗，而流川则在木石瞳面前带球、过人、投球、灌篮。樱木是保护木石瞳，流川则是激励木石瞳。致使木石瞳对篮球有了一个新的认识。(原来木石瞳打篮球只是用一种让自己死的更快的方式而已)。\n海南、翔阳也都轻松的杀入最后的四强。陵南由于控球后卫越野和原来的高大中锋鱼住的离队致使实力明显下降，只是由于仙道一个人的力量艰难杀入4强。(这里说一下续集中的仙道章实力比原作中的更上一层，只是周围再也没有能和他配合的人，包括福田都说：“仙道的水平已经不是一个神奈川县可以容的下的了)\n这样四强聚齐，新的一轮的大战即将开始……\n(三) 球场上没有兄弟，只有对手 第一战湘北vs翔阳。\n木石瞳的肺病突发，致使湘北没有一个真正的中锋，中锋的位置由樱木代替。里面有两个看点，由于阿牧的离开，神奈川县的第一控球后卫的争夺就在宫城和藤真健次之间展开。宫城被藤真健次很好的牵制住，而且藤真健次的组织使翔阳队控制了场上的主动，由于樱木对中锋的位置很陌生，这点被藤真抓住，多次打樱木成功。\n由于藤真健次出色的组织致使流川枫再进攻上受到围攻，湘北上半场处于落后的局面。藤真健次全面压倒宫城和流川枫。下半场，藤真健次依然希望用自己防住宫城，而用联防遏制流川，用强攻打樱木(樱木犯规多次)。\n但是英雄出现了，这也就是本场比赛第二个看点，也是翔阳致命的一大失误。那就是藤真明次的中投开始发威了..\n由于健次负责盯宫城，而又需要对流川枫进行2个人的联防，致使弟弟明次在下半场突然爆发。下半场一人中投得到20多分，虽然哥哥健次在后来发现了这个翔阳的弱点，但由于当时湘北流川和樱木的成熟，翔阳的其他人已经无法阻挡他们两个人了。\n最后靠着藤真明次的出色发挥湘北大翻盘。\n宫城对藤真说：“你是神奈川第一控球后卫。”\n藤真健次：“你们赢得了胜利，神奈川以后是你们的了。\"(目光凝视着在宫城旁边的弟弟)\n(四) 别了！仙道章 第二战陵南vs海南。\n喜欢仙道的人们，看完了会有一种欲哭无泪的感觉。海南所有的人都防不住仙道的突破，所有的人都猜不透他的传球。但最终结果是海南赢陵南20多分。赛后陵南的人想起了鱼住。彦一则想到了越野。\n清田：“陵南已不是原来的陵南了。”\n神宗一郎：“仙道也不是原来的仙道。”\n清田：“陵南输就输在，陵南没有一个人可以跟的上仙道的步伐了。”\n神宗一郎(低头沉思)：“神奈川还有跟的上仙道的人吗？清田？我？藤真？似乎都不行，也许只有流川枫了。不流川还是和仙道有差距的，也许只有阿牧能吧…..”\n之后湘北遭遇陵南，陵南的悲剧第二次上演。上半场依靠木石瞳和流川的得分使得湘北领先，但福田给樱木造成不小的困难。\n由于受到翔阳失败的启发，明次被陵南完全封死。但仙道为了球队的整体，回避了和流川的对决。仙道和流川的对决是在下半场开始的，流川几次的故意找仙道挑衅，终于仙道开始了回应。同样福田也几次挑衅樱木。樱木也开始了爆发。(樱木竟然握着仙道的手说：“咱们一起打败他们！”)\n仙道的传球实在是诡谲，并且仙道总是在别人认为传球的时候突破，认为投球的时候传球，流川和仙道的对决中处于全面下风，最后改由木石瞳加宫城盯防仙道，利用木石瞳的身高和宫城的速度来限制仙道。\n福田和樱木的对决，樱木抢断了福田的那种背后运球。并且灌篮得分。最后陵南再次输给了湘北，从而2战全败提前出局。\n仙道(依然没痛苦)：“流川，你又变强了。”\n流川枫(脸色阴暗)：“离你的距离还远着呢”。\n(五) 神宗一郎MVP 由于翔阳再接下面的比赛中惜败于海南，这样海南和湘北已经提前出现，陵南和翔阳则遭到淘汰。之后翔阳赢陵南(藤真、福田、仙道均没有上场)。这样海南和湘北争夺冠军。对于湘北来说这是一场复仇的比赛，对于海南来说他们要维持自己在神奈川的王者之气。\n正如阿牧所说：“能进入海南的都是强者，他们不能因为上届的优秀队员的离开，而变得懦弱，他们只有一个目标无敌于神奈川，称霸于全国。”\n虽然两队已经提前出现，但无论是湘北还是海南都要全力赢得这场比赛。湘北为了赤木的心愿击败强者海南。海南则是为了他们历史赋予他们的荣誉。\n这场比赛刚一开始湘北的士气很高，流川也不独，为了胜利他也开始传球，樱木和对方的2名高大队员挣强，木石瞳带伤上场。最重要的是神宗一郎的三分球使海南超过湘北，但是藤真明次马上就换以颜色(藤真健次来到现场为弟弟加油)，这极大的鼓舞了士气，明次也让人们看到了三井的影子。\n当所有的一切开始向着湘北有利的情况发展的时候，海南的队长神宗一郎突然使出了强行突破的技术，这让所有的人感到惊讶。由于阿牧敏锐的觉察到，现在的湘北已经具有超越海南的潜质，并且高砂和自己的离队会使海南失去身体优势，而作为一个中锋神宗一郎总是在外线投球，为了能和以后的中锋对抗，并加强海南内线的实力，阿牧在暑假给神宗一郎进行了秘密的身体特训。\n这样由于阿神突然使出这一绝招导致湘北极其被动，阿神的突破或者三分远投让湘北很不适应，再大比分领先的情况下，被神宗一郎还有阿牧的潜在精神所击败，随着阿神最后的一个三分球中的，海南也以3分的优势击败湘北。\n这样由神宗一郎带领着的海南完成了神奈川县15连冠的霸业，且阿神即去年获得得分手后，今年再次蝉联，并毫无争议的获得县大赛MVP。\n最佳5人：\n神宗一郎(海南) 清田信长(海南) 流川枫(湘北) 藤真健次(翔阳) 仙道章(陵南) 最佳新人：\n藤真明次(湘北) (六) A档，C档？ 神奈川县的代表是海南和湘北，其他各县的代表也相继决出。\n由于名朋工业作为卫冕冠军不用参加县大赛，爱知县的首席代表是去年击败湘北的爱和学院。\n秋叶县的首席代表是维南，大阪的首席代表是大荣学院……\n由于要对所有参赛的队伍划分档次，上届的前八名的队伍除湘北之外均被化为A档，而没有进入去年前八的山王则也被列为了A档。樱木和宫城对此忿忿不平，流川一脸的无所谓，藤真明次则是向A档球队发出了必胜宣言，木石瞳一直考虑着自己的身体状态。这样湘北则在第一场比赛中遇到去年曾经战胜过的静冈县的代表B档的Toyotama(丰玉高中)。\n海南，山王等A档球队首轮轮空。\n(七) 丰玉vs湘北 去年，丰玉的南烈用卑劣的手段偷袭了湘北的王牌—流川枫。但流川可怕的用一只眼睛，同样击败了南烈和丰玉高中。今年虽然三年级的队长岸本实理离队，但丰玉以南烈为核心建立起来的新球队号称近10年最强的丰玉高中。\n流川，藤真明次上半场发挥很好频频得分。但丰玉依靠整体的逼抢和不惜体力的跑动，一直把比分咬的很紧。\n下半场，两队的体力出现了明显的差距，由于上半场的过于活跃，藤真和流川体力开始下降。而丰玉全队依旧保持了惊人的耐力和体力，丰玉的计划开始实施，由上半场的防守转为进攻，樱木的压力徒然上升，宫城也在对方的紧逼下出现了失误，丰玉开始拉紧比分。\n时间剩下不多的时候湘北仅仅领先丰玉2分，这时木石瞳利用他至柔的打法，造成丰玉中锋连续犯规，并罚球得分。随后藤真的三分不中被木石瞳抢下栏板补篮命中，双方的分数再次拉大，最后时刻流川枫接到樱木花道的意外失误传球(樱木本打算是传给藤真)，巧妙突破分球(仙道的感觉)木石瞳篮下扣篮得手。\n","tags":["灌篮高手","篮球飞人","篮球","动漫","故事"],"title":"灌篮高手大结局(全国大赛后) 上","type":"post"},{"authors":null,"categories":null,"content":"在 Docker 的容器内开发，相当于使用VSCode的远程开发能力，好处非常多。\n开发环境统一、可维护性强 后期部署简单 1. 安装 Docker Docker 安装\n2. 安装 Visual Stuido Code 这不废话嘛，同上。\n3. 安装 Remote Development 扩展包 官方推荐安装 Remote Development 这个扩展包，它包括三个扩展功能：\nRemote - SSH Remote - Containers Remote - WSL 如果你只使用 Docker ，可以只安装 Remote - Containers 这个扩展。\n安装成功后，你可以在 VSCode 的左下角，看到一个“蓝底色+两个相对白箭头”的图标。\n点击图标，可以看到 Remote - Containers 提供了许多方法进行配置。\n4. 配置 Remote - Containers 4.1. 使用现成的 docker-compose.yml 配置 点击左下角的蓝色图标 选择 Add Development Container Configuration Files… 选择 Existing Docker Compose (Extend) VSCode 会自动在项目的根目录下，生成 .devcontainer 文件夹 在 .devcontainer 目录内，包括两个文件： devcontainer.json：VSCode 使用它连接开发容器 docker-compose.yml：示例文件，可以不用管它 打开 devcontainer.json 文件 照着 docker-compose.yml 进行修改，见下面示例\n// If you want to run as a non-root user in the container, see .devcontainer/docker-compose.yml. { \u0026#34;name\u0026#34;: \u0026#34;Existing Docker Compose (Extend)\u0026#34;, // Update the \u0026#39;dockerComposeFile\u0026#39; list if you have more compose files or use different names. // The .devcontainer/docker-compose.yml file contains any overrides you need/want to make. \u0026#34;dockerComposeFile\u0026#34;: [ // 项目已有 docker-compose.yml 文件的相对路径 \u0026#34;../docker/docker-compose.yml\u0026#34;, // 可加载多个yml文件，按加载顺序排好即可 \u0026#34;docker-compose.yml\u0026#34; ], // The \u0026#39;service\u0026#39; property is the name of the service for the container that VS Code should // use. Update this value and .devcontainer/docker-compose.yml to the real service name. // VSCode 要连接的容器名称，必须与 docker-compose.yml 文件里 services 项定义的一致 \u0026#34;service\u0026#34;: \u0026#34;robot\u0026#34;, // The optional \u0026#39;workspaceFolder\u0026#39; property is the path VS Code should open by default when // connected. This is typically a file mount in .devcontainer/docker-compose.yml // 容器的工作目录，必须与 docker-compose.yml 文件里 volumes 项定义的一致 \u0026#34;workspaceFolder\u0026#34;: \u0026#34;/root/code\u0026#34;, // Use \u0026#39;settings\u0026#39; to set *default* container specific settings.json values on container create. // You can edit these settings after create using File \u0026gt; Preferences \u0026gt; Settings \u0026gt; Remote. \u0026#34;settings\u0026#34;: { // This will ignore your local shell user setting for Linux since shells like zsh are typically // not in base container images. You can also update this to an specific shell to ensure VS Code // uses the right one for terminals and tasks. For example, /bin/bash (or /bin/ash for Alpine). // 系统使用的shell，一般都 /bin/bash \u0026#34;terminal.integrated.shell.linux\u0026#34;: \u0026#34;/bin/bash\u0026#34; }, // Uncomment the next line to have VS Code connect as an existing non-root user in the container. See // https://aka.ms/vscode-remote/containers/non-root for details on adding a non-root user if none exist. // \u0026#34;remoteUser\u0026#34;: \u0026#34;vscode\u0026#34;, // Uncomment the next line if you want start specific services in your Docker Compose config. // \u0026#34;runServices\u0026#34;: [], // Uncomment the next line if you want to keep your containers running after VS Code shuts down. // \u0026#34;shutdownAction\u0026#34;: \u0026#34;none\u0026#34;, // Uncomment the next line to run commands after the container is created - for example installing git. // \u0026#34;postCreateCommand\u0026#34;: \u0026#34;apt-get update \u0026amp;\u0026amp; apt-get install -y git\u0026#34;, // Add the IDs of extensions you want installed when the container is created in the array below. // 在容器内安装的扩展，会在启动时自动安装好 // 容器外即本地安装的扩展，主要对 VSCode 的外观起作用 // 容器内安装的扩展，才能对代码起作用，如：代码格式化等 \u0026#34;extensions\u0026#34;: [ // 扩展的标识符，可以在扩展详细页面的[名称]旁边找到 \u0026#34;ms-python.python\u0026#34; ] } 5. 运行 再次点击左下角的蓝色图标 选择 Reopen in Container，VSCode 将重启，并自动启动 docker ，进入容器安装扩展，准备好开发环境 成功启动过一次后，VSCode 会自动在[欢迎使用]页面[最近]项目下添加快速入口 6. 参考链接 Developing inside a Container ","date":1700843050,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"889e0f60e83e54bf87cfcb7338c529ce","permalink":"https://blog.cuile.com/post/vscode/vscode_develop_in_docker/","publishdate":"2023-11-25T00:24:10+08:00","relpermalink":"/post/vscode/vscode_develop_in_docker/","section":"post","summary":"在 Docker 的容器内开发，相当于使用VSCode的远程开发能力，好处非常多。\n开发环境统一、可维护性强 后期部署简单 1. 安装 Docker Docker 安装\n2. 安装 Visual Stuido Code 这不废话嘛，同上。\n3. 安装 Remote Development 扩展包 官方推荐安装 Remote Development 这个扩展包，它包括三个扩展功能：\nRemote - SSH Remote - Containers Remote - WSL 如果你只使用 Docker ，可以只安装 Remote - Containers 这个扩展。\n安装成功后，你可以在 VSCode 的左下角，看到一个“蓝底色+两个相对白箭头”的图标。\n点击图标，可以看到 Remote - Containers 提供了许多方法进行配置。\n4. 配置 Remote - Containers 4.1. 使用现成的 docker-compose.yml 配置 点击左下角的蓝色图标 选择 Add Development Container Configuration Files… 选择 Existing Docker Compose (Extend) VSCode 会自动在项目的根目录下，生成 .devcontainer 文件夹 在 .devcontainer 目录内，包括两个文件： devcontainer.json：VSCode 使用它连接开发容器 docker-compose.yml：示例文件，可以不用管它 打开 devcontainer.json 文件 照着 docker-compose.yml 进行修改，见下面示例\n","tags":["python","venv","docker","vscode"],"title":"VScode 在 Docker 容器内开发","type":"post"},{"authors":null,"categories":null,"content":"使用 VSCode 开发 Python 是替代 PyCharm 的一个很好选择，有丰富的扩展和第三方工具可以使用，安装配置好它们，会让开发工作事半功倍。下面列举推荐安装的扩展和工具：\n扩展\nMaterial Icon There VSCode图标，很好看 Python 微软官方扩展，一定要装 Pylance 微软官方扩展，一定要装 autoDocstring Python Environment Manager Ruff Code Runner Qt for Python 工具\nMicromamba 使用 Micromamba 来配置 Python 开发环境有几个好处： micromamba 是一个包管理器，可方便的同时安装几个软件，形成一个独立的开发环境，与其它项目的开发环境完全隔离。 micromamba 安装的软件，不会在系统留下痕迹，不会污染本地系统。 micromamba 只配置 python 基础环境，不影响 python 虚拟环境，同一个基础环境可提供给多个虚拟环境使用。 配置 Micromamba Micromamba的安装与使用\n配置 VSCode1 配置 Venv 路径\n使用 “ctrl+,” 打开设置界面，搜索 venv ，出现两个结果： 选项 值 Python: Venv Folders 如果安装时使用默认位置，就填写 micromamba，下面的不用设置 Python: Venv Path 如果安装时没有使用默认位置，就填写安装位置，上面的不用设置 Python: Conda Path 直接输入conda 即可 重启VSCode，进入 Python 项目，就可以看到右下角的 Python 环境了，如果创建了多个环境，可以通过这里切换。这里需要注意 vscode 可以识别多个 Python 版本，但无法正确配置它们。所以创建不同的 Python 版本后，还要为项目选择解释器。 使用 Python 虚拟环境 使用项目终端界面，创建虚拟环境。 # 先激活 micromamba 环境 PS \u0026#34;Your Project Path\u0026#34;\u0026gt; conda activate PyQt # 创建Python虚拟环境 # --upgrade 参数是升级虚拟环境用的，新建虚拟环境时要去掉。 # --system-site-packages 会降低环境隔离性，生产环境慎用。 (PyQt) PS \u0026#34;Your Project Path\u0026#34;\u0026gt; python -m venv --prompt \u0026#34;\u0026lt;myproject\u0026gt;\u0026#34; --upgrade-deps .venv --symlinks --upgrade --system-site-packages # 查看项目资源管理器，看到 .venv 文件夹就成功了。 # 激活Python虚拟环境 (PyQt) PS \u0026#34;Your Project Path\u0026#34;\u0026gt; Activate.ps1 # 成功进入虚拟环境 (myproject) (PyQt) PS \u0026#34;Your Project Path\u0026#34;\u0026gt; 重启 vscode 再次进入项目终端，不一定会看到项目前缀2。VsCode已经自动修你激活了Python虚拟环境，不需要再操作。 安装包里不需要激活 micromamba 环境，否则包将被安装到 micromamba 环境中。\n其它配置 选项 值 Editor: Default Formatter Ruff Python \u0026gt; Terminal: ACtivate Env In Current Terminal 勾选 Python \u0026gt; Terminal: Focus After Launch 勾选 Python: Language Server Pylance Pylthon \u0026gt; Analysis: Type Checking Mode basic 使用 Micromamba 替换 Miniconda 更快配置 Python 环境 ↩︎\nActivate Environments in Terminal Using Environment Variables ↩︎\n","date":1700843050,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"3735fa558574b5cedd650eefc199d8da","permalink":"https://blog.cuile.com/post/vscode/vscode_configures_python_development_environment/","publishdate":"2023-11-25T00:24:10+08:00","relpermalink":"/post/vscode/vscode_configures_python_development_environment/","section":"post","summary":"使用 VSCode 开发 Python 是替代 PyCharm 的一个很好选择，有丰富的扩展和第三方工具可以使用，安装配置好它们，会让开发工作事半功倍。下面列举推荐安装的扩展和工具：\n扩展\nMaterial Icon There VSCode图标，很好看 Python 微软官方扩展，一定要装 Pylance 微软官方扩展，一定要装 autoDocstring Python Environment Manager Ruff Code Runner Qt for Python 工具\nMicromamba 使用 Micromamba 来配置 Python 开发环境有几个好处： micromamba 是一个包管理器，可方便的同时安装几个软件，形成一个独立的开发环境，与其它项目的开发环境完全隔离。 micromamba 安装的软件，不会在系统留下痕迹，不会污染本地系统。 micromamba 只配置 python 基础环境，不影响 python 虚拟环境，同一个基础环境可提供给多个虚拟环境使用。 配置 Micromamba Micromamba的安装与使用\n配置 VSCode1 配置 Venv 路径\n使用 “ctrl+,” 打开设置界面，搜索 venv ，出现两个结果： 选项 值 Python: Venv Folders 如果安装时使用默认位置，就填写 micromamba，下面的不用设置 Python: Venv Path 如果安装时没有使用默认位置，就填写安装位置，上面的不用设置 Python: Conda Path 直接输入conda 即可 重启VSCode，进入 Python 项目，就可以看到右下角的 Python 环境了，如果创建了多个环境，可以通过这里切换。这里需要注意 vscode 可以识别多个 Python 版本，但无法正确配置它们。所以创建不同的 Python 版本后，还要为项目选择解释器。 使用 Python 虚拟环境 使用项目终端界面，创建虚拟环境。 # 先激活 micromamba 环境 PS \"Your Project Path\"\u003e conda activate PyQt # 创建Python虚拟环境 # --upgrade 参数是升级虚拟环境用的，新建虚拟环境时要去掉。 # --system-site-packages 会降低环境隔离性，生产环境慎用。 (PyQt) PS \"Your Project Path\"\u003e python -m venv --prompt \"\u003cmyproject\u003e\" --upgrade-deps .venv --symlinks --upgrade --system-site-packages # 查看项目资源管理器，看到 .venv 文件夹就成功了。 # 激活Python虚拟环境 (PyQt) PS \"Your Project Path\"\u003e Activate.ps1 # 成功进入虚拟环境 (myproject) (PyQt) PS \"Your Project Path\"\u003e 重启 vscode 再次进入项目终端，不一定会看到项目前缀2。VsCode已经自动修你激活了Python虚拟环境，不需要再操作。 安装包里不需要激活 micromamba 环境，否则包将被安装到 micromamba 环境中。\n","tags":["micromamba","python","venv","vscode"],"title":"VSCode 配置 Python 开发环境","type":"post"},{"authors":null,"categories":null,"content":"OpenWRT 配置 IPv6，在网上有许多教程，但大部分都说的不清不楚。 所以我从 OpenWRT 配置文件的角度，给出一个肯定能用的配置。 相关配置原理不详述，可自行上网查找。\n系统环境 北京联通 300M 家宽 （客服说100元/月，可提供公网IPv4/IPv6地址，其实IPv6是免费给的） OpenWRT（PVE虚机，非直通网卡） 目标平台：x86/64 固件版本：OpenWrt 21.02.0 r16279-5cc0535800 / LuCI openwrt-21.02 branch git-23.093.57360-e98243e 内核版本：5.4.143 DHCPv6 客户端 (odhcp6c) RA \u0026amp; DHCPv6 服务器 (odhcpd) IPv6 防火墙 (ip6tables) Luci网页配置 (luci-proto-ipv6) 配置流程 光猫桥接（电话联通，远程搞定） OpenWRT WAN IPv6 配置 # /etc/config/network ... config interface \u0026#39;lan\u0026#39; option proto \u0026#39;static\u0026#39; option ipaddr \u0026#39;192.168.10.10\u0026#39; option netmask \u0026#39;255.255.255.0\u0026#39; option device \u0026#39;eth0\u0026#39; option ip6assign \u0026#39;64\u0026#39; # IPv6分配长度。要与 wan 口一致。 config interface \u0026#39;wan\u0026#39; option proto \u0026#39;pppoe\u0026#39; option username \u0026#39;***********\u0026#39; option password \u0026#39;***********\u0026#39; option device \u0026#39;eth1\u0026#39; option ipv6 \u0026#39;auto\u0026#39; # 自动获取IPv6地址，使用这个选项后，会自动创建一个虚拟动态接口(WAN_6)，不用配置。 option ip6assign \u0026#39;64\u0026#39; # IPv6分配长度。参考 WAN_6 接口 IPv6-PD 的掩码长度，一般为“60”，比它大即可，系统默认为64。 ... OpenWRT 防火墙配置 # /etc/config/firewall ... config zone option name \u0026#39;lan\u0026#39; list network \u0026#39;lan\u0026#39; option input \u0026#39;ACCEPT\u0026#39; option output \u0026#39;ACCEPT\u0026#39; option forward \u0026#39;ACCEPT\u0026#39; config zone option name \u0026#39;wan\u0026#39; list network \u0026#39;wan\u0026#39; option input \u0026#39;DROP\u0026#39; # 关闭 wan 口输入流量 option output \u0026#39;ACCEPT\u0026#39; # 只出不进 option forward \u0026#39;REJECT\u0026#39; option masq \u0026#39;1\u0026#39; # 打开 NAT 功能 option mtu_fix \u0026#39;1\u0026#39; # 路由器直接拨号时使用 ... # 转发规划很重要 config forwarding option src \u0026#39;lan\u0026#39; option dest \u0026#39;wan\u0026#39; ... # 允许外网IPv6协议下，任意地址的547端口的UDP包通过wan口，访问本机546端口 config rule option name \u0026#39;Allow-DHCPv6\u0026#39; option proto \u0026#39;udp\u0026#39; option src \u0026#39;wan\u0026#39; option src_port \u0026#39;547\u0026#39; option dest_port \u0026#39;546\u0026#39; option target \u0026#39;ACCEPT\u0026#39; option family \u0026#39;ipv6\u0026#39; OpenWRT DHCP 配置 # /etc/config/dhcp ... config dhcp \u0026#39;lan\u0026#39; option interface \u0026#39;lan\u0026#39; option start \u0026#39;100\u0026#39; option dhcpv4 \u0026#39;server\u0026#39; option limit \u0026#39;200\u0026#39; option force \u0026#39;1\u0026#39; option leasetime \u0026#39;2h\u0026#39; option ra \u0026#39;server\u0026#39; # RA服务 服务器模式 option dhcpv6 \u0026#39;server\u0026#39; # DHCPv6服务 服务器模式 list ra_flags \u0026#39;none\u0026#39; # RA标记 无 config dhcp \u0026#39;wan\u0026#39; option interface \u0026#39;wan\u0026#39; option ignore \u0026#39;1\u0026#39; list ra_flags \u0026#39;none\u0026#39; config odhcpd \u0026#39;odhcpd\u0026#39; option maindhcp \u0026#39;0\u0026#39; option leasefile \u0026#39;/tmp/hosts/odhcpd\u0026#39; option leasetrigger \u0026#39;/usr/sbin/odhcpd-update\u0026#39; option loglevel \u0026#39;4\u0026#39; 重启OpenWRT 查看 Luci -\u0026gt; 网络 -\u0026gt; 接口 -\u0026gt; LAN，已拿到的IPv6地址 测试本机外网IPv6地址，与 LAN 的 IPv6地址一致即可 $ curl 6.ipw.cn 参考文档 IPv6 configuration IPv6 原理及如何设置 OpenWrt 如何配置防火墙 IPv6 ","date":1696420098,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"7dc7a1c8e97bf02f973603212e4b9627","permalink":"https://blog.cuile.com/post/openwrt/openwrt_ipv6/","publishdate":"2023-10-04T19:48:18+08:00","relpermalink":"/post/openwrt/openwrt_ipv6/","section":"post","summary":"OpenWRT 配置 IPv6，在网上有许多教程，但大部分都说的不清不楚。 所以我从 OpenWRT 配置文件的角度，给出一个肯定能用的配置。 相关配置原理不详述，可自行上网查找。\n系统环境 北京联通 300M 家宽 （客服说100元/月，可提供公网IPv4/IPv6地址，其实IPv6是免费给的） OpenWRT（PVE虚机，非直通网卡） 目标平台：x86/64 固件版本：OpenWrt 21.02.0 r16279-5cc0535800 / LuCI openwrt-21.02 branch git-23.093.57360-e98243e 内核版本：5.4.143 DHCPv6 客户端 (odhcp6c) RA \u0026 DHCPv6 服务器 (odhcpd) IPv6 防火墙 (ip6tables) Luci网页配置 (luci-proto-ipv6) 配置流程 光猫桥接（电话联通，远程搞定） OpenWRT WAN IPv6 配置 # /etc/config/network ... config interface 'lan' option proto 'static' option ipaddr '192.168.10.10' option netmask '255.255.255.0' option device 'eth0' option ip6assign '64' # IPv6分配长度。要与 wan 口一致。 config interface 'wan' option proto 'pppoe' option username '***********' option password '***********' option device 'eth1' option ipv6 'auto' # 自动获取IPv6地址，使用这个选项后，会自动创建一个虚拟动态接口(WAN_6)，不用配置。 option ip6assign '64' # IPv6分配长度。参考 WAN_6 接口 IPv6-PD 的掩码长度，一般为“60”，比它大即可，系统默认为64。 ... OpenWRT 防火墙配置 # /etc/config/firewall ... config zone option name 'lan' list network 'lan' option input 'ACCEPT' option output 'ACCEPT' option forward 'ACCEPT' config zone option name 'wan' list network 'wan' option input 'DROP' # 关闭 wan 口输入流量 option output 'ACCEPT' # 只出不进 option forward 'REJECT' option masq '1' # 打开 NAT 功能 option mtu_fix '1' # 路由器直接拨号时使用 ... # 转发规划很重要 config forwarding option src 'lan' option dest 'wan' ... # 允许外网IPv6协议下，任意地址的547端口的UDP包通过wan口，访问本机546端口 config rule option name 'Allow-DHCPv6' option proto 'udp' option src 'wan' option src_port '547' option dest_port '546' option target 'ACCEPT' option family 'ipv6' OpenWRT DHCP 配置 # /etc/config/dhcp ... config dhcp 'lan' option interface 'lan' option start '100' option dhcpv4 'server' option limit '200' option force '1' option leasetime '2h' option ra 'server' # RA服务 服务器模式 option dhcpv6 'server' # DHCPv6服务 服务器模式 list ra_flags 'none' # RA标记 无 config dhcp 'wan' option interface 'wan' option ignore '1' list ra_flags 'none' config odhcpd 'odhcpd' option maindhcp '0' option leasefile '/tmp/hosts/odhcpd' option leasetrigger '/usr/sbin/odhcpd-update' option loglevel '4' 重启OpenWRT 查看 Luci -\u003e 网络 -\u003e 接口 -\u003e LAN，已拿到的IPv6地址 测试本机外网IPv6地址，与 LAN 的 IPv6地址一致即可 $ curl 6.ipw.cn 参考文档 IPv6 configuration IPv6 原理及如何设置 OpenWrt 如何配置防火墙 IPv6 ","tags":["firewall","network","ipv6","openwrt"],"title":"OpenWRT 配置 IPv6","type":"post"},{"authors":null,"categories":null,"content":"x86 版本 说明 64 用于现代PC硬件（大约在2007年以后的产品），它是为具有64位功能的计算机而构建的，并支持现代CPU功能。除非有充分的理由，否则请选择此选项。 Generic 仅适用于32位硬件（旧硬件或某些Atom处理器），应为i586 Linux体系结构，将在Pentium 4及更高版本上运行。仅当您的硬件无法运行64位版本时才使用此功能。 Legacy 用于奔腾4之前的非常旧的PC硬件，在Linux体系结构支持中称为i386。它会错过许多现代硬件上想要/需要的功能，例如多核支持以及对超过1GB RAM的支持，但实际上会在较旧的硬件上运行，而其他版本则不会。 Geode 是为Geode SoC定制的自定义旧版目标，Geode SoC仍在许多（老化的）网络设备中使用，例如PCEngines的较旧Alix板。 文件名 说明 Combined 组合的，包括bootloader、kernel、rootfs squashfs 该磁盘映像使用传统的OpenWrt布局，一个squashfs只读根文件系统和一个读写分区，在其中存储您安装的设置和软件包。由于此映像的组装方式，您只有230 兆MB的空间来存储其他程序包和配置，而Extroot不起作用。squashfs适用于直接编译带有软件包的openwrt系统，方便重置路由器，不必从安装包重新刷机。 ext4 此磁盘映像使用单个读写ext4分区，没有只读squashfs根文件系统，因此可以扩大分区。故障安全模式或出厂重置等功能将不可用，因为它们需要只读的squashfs分区才能起作用。选择64的情况下，ext4适合我们扩容，并安装软件包。 efi 指的是UEFI，可以使用GPT分区列表，是较新的技术，性能和可扩展性上更好，不带efi的则是使用Legacy。 bootloader 引导程序 kernel Linux内核 rootfs openwrt根系统 参考文档 OpenWrt on x86 hardware (PC / VM / server) 安装OpenWrt到电脑，安装包选哪个？ openwrt x86版本 原版Openwrt在x86平台上的安装和配置以及常用插件安装 ","date":1696399817,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"9680cf6152f20cee4daa62f3e83b0165","permalink":"https://blog.cuile.com/post/openwrt/openwrt_version/","publishdate":"2023-10-04T14:10:17+08:00","relpermalink":"/post/openwrt/openwrt_version/","section":"post","summary":"x86 版本 说明 64 用于现代PC硬件（大约在2007年以后的产品），它是为具有64位功能的计算机而构建的，并支持现代CPU功能。除非有充分的理由，否则请选择此选项。 Generic 仅适用于32位硬件（旧硬件或某些Atom处理器），应为i586 Linux体系结构，将在Pentium 4及更高版本上运行。仅当您的硬件无法运行64位版本时才使用此功能。 Legacy 用于奔腾4之前的非常旧的PC硬件，在Linux体系结构支持中称为i386。它会错过许多现代硬件上想要/需要的功能，例如多核支持以及对超过1GB RAM的支持，但实际上会在较旧的硬件上运行，而其他版本则不会。 Geode 是为Geode SoC定制的自定义旧版目标，Geode SoC仍在许多（老化的）网络设备中使用，例如PCEngines的较旧Alix板。 文件名 说明 Combined 组合的，包括bootloader、kernel、rootfs squashfs 该磁盘映像使用传统的OpenWrt布局，一个squashfs只读根文件系统和一个读写分区，在其中存储您安装的设置和软件包。由于此映像的组装方式，您只有230 兆MB的空间来存储其他程序包和配置，而Extroot不起作用。squashfs适用于直接编译带有软件包的openwrt系统，方便重置路由器，不必从安装包重新刷机。 ext4 此磁盘映像使用单个读写ext4分区，没有只读squashfs根文件系统，因此可以扩大分区。故障安全模式或出厂重置等功能将不可用，因为它们需要只读的squashfs分区才能起作用。选择64的情况下，ext4适合我们扩容，并安装软件包。 efi 指的是UEFI，可以使用GPT分区列表，是较新的技术，性能和可扩展性上更好，不带efi的则是使用Legacy。 bootloader 引导程序 kernel Linux内核 rootfs openwrt根系统 参考文档 OpenWrt on x86 hardware (PC / VM / server) 安装OpenWrt到电脑，安装包选哪个？ openwrt x86版本 原版Openwrt在x86平台上的安装和配置以及常用插件安装 ","tags":["version","OpenWRT"],"title":"OpenWRT 版本区别","type":"post"},{"authors":null,"categories":null,"content":"查看系统内核 $ uname -r kernel 4.9 及以上已支持 tcp_bbr，看内核版本是否大于等于4.9，否则要升级内核，或者安装bbr。\nbbr2 效果要好于 bbr，相当原理可查看参考文档\n配置拥塞算法 # 查看可用的拥塞算法 $ sysctl net.ipv4.tcp_available_congestion_control # 查看使用的拥塞算法 $ sysctl net.ipv4.tcp_congestion_control # 设置拥塞算法 $ sysctl -w net.core.default_qdisc=fq $ sysctl -w net.ipv4.tcp_congestion_control=bbr # 查看设置结果 $ lsmod | grep bbr 配置持久化 $ echo \u0026#34;net.core.default_qdisc=fq\u0026#34; \u0026gt;\u0026gt; /etc/sysctl.conf $ echo \u0026#34;net.ipv4.tcp_congestion_control=bbr\u0026#34; \u0026gt;\u0026gt; /etc/sysctl.conf $ sysctl -p 参考文档 从流量控制算法谈网络优化 – 从 CUBIC 到 BBRv2 算法 linux手动配置BBR Linux 网络调优：内核网络栈参数篇 net.core.default_qdisc ","date":1696309449,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"0d47633f079cf99bfb55d8194989e1e7","permalink":"https://blog.cuile.com/post/proxmox/bbr/","publishdate":"2023-10-03T13:04:09+08:00","relpermalink":"/post/proxmox/bbr/","section":"post","summary":"查看系统内核 $ uname -r kernel 4.9 及以上已支持 tcp_bbr，看内核版本是否大于等于4.9，否则要升级内核，或者安装bbr。\nbbr2 效果要好于 bbr，相当原理可查看参考文档\n配置拥塞算法 # 查看可用的拥塞算法 $ sysctl net.ipv4.tcp_available_congestion_control # 查看使用的拥塞算法 $ sysctl net.ipv4.tcp_congestion_control # 设置拥塞算法 $ sysctl -w net.core.default_qdisc=fq $ sysctl -w net.ipv4.tcp_congestion_control=bbr # 查看设置结果 $ lsmod | grep bbr 配置持久化 $ echo \"net.core.default_qdisc=fq\" \u003e\u003e /etc/sysctl.conf $ echo \"net.ipv4.tcp_congestion_control=bbr\" \u003e\u003e /etc/sysctl.conf $ sysctl -p 参考文档 从流量控制算法谈网络优化 – 从 CUBIC 到 BBRv2 算法 linux手动配置BBR Linux 网络调优：内核网络栈参数篇 net.core.default_qdisc ","tags":["tcp","bbr","proxmoxve"],"title":"ProxmoxVE 配置 BBR","type":"post"},{"authors":null,"categories":null,"content":"修改JS文件 $ nano /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js 6.0+ (380行)\nif (data.status !== \u0026#39;Active\u0026#39;) { 替换为\nif (false) { 重启服务\n$ systemctl restart pveproxy.service 参考文档 PVE 去掉登录后无效订阅提示 ","date":1686054004,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"6cbde18285b190e08d1e785cb577ff1b","permalink":"https://blog.cuile.com/post/proxmox/subscription/","publishdate":"2023-06-06T20:20:04+08:00","relpermalink":"/post/proxmox/subscription/","section":"post","summary":"修改JS文件 $ nano /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js 6.0+ (380行)\nif (data.status !== 'Active') { 替换为\nif (false) { 重启服务\n$ systemctl restart pveproxy.service 参考文档 PVE 去掉登录后无效订阅提示 ","tags":["subscription","proxmoxve"],"title":"ProxmoxVE 关闭订阅提示","type":"post"},{"authors":null,"categories":null,"content":"文件合并 cat info.log error.log \u0026gt; merge.log.bak cp merge.log.bak merge.log 文件拆分 文件截取 linux分片切割CSV文件_linux 如何快速把csv文件拆分成多个-CSDN博客 ","date":1685503132,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"adade023fd0e9a45b440a3990976ec8a","permalink":"https://blog.cuile.com/post/linux/txt/","publishdate":"2023-05-31T11:18:52+08:00","relpermalink":"/post/linux/txt/","section":"post","summary":"文件合并 cat info.log error.log \u003e merge.log.bak cp merge.log.bak merge.log 文件拆分 文件截取 linux分片切割CSV文件_linux 如何快速把csv文件拆分成多个-CSDN博客 ","tags":["cli","txt","linux"],"title":"Linux 文本文件操作","type":"post"},{"authors":null,"categories":null,"content":"安装 xrdp\n$ sudo apt install xrdp 启动xrdp服务，并设置为开机启动\n$ sudo systemctl start xrdp $ sudo systemctl enable xrdp 解决黑屏/空屏/无画面\n$ nano /etc/xrdp/startwm.sh unset DBUS_SESSION_BUS_ADDRESS unset XDG_RUNTIME_DIR . $HOME/.profile 重启deepin，使用Xorg模式登录 参考文档 Deepin下安装XRDP远程连接 Ubuntu/Debian/Kali xrdp远程桌面黑屏/空屏/无画面解决办法 ","date":1683378246,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"5583af419e0b672a071272c7417bafeb","permalink":"https://blog.cuile.com/post/linux/deepin_xrdp/","publishdate":"2023-05-06T21:04:06+08:00","relpermalink":"/post/linux/deepin_xrdp/","section":"post","summary":"安装 xrdp\n$ sudo apt install xrdp 启动xrdp服务，并设置为开机启动\n$ sudo systemctl start xrdp $ sudo systemctl enable xrdp 解决黑屏/空屏/无画面\n$ nano /etc/xrdp/startwm.sh unset DBUS_SESSION_BUS_ADDRESS unset XDG_RUNTIME_DIR . $HOME/.profile 重启deepin，使用Xorg模式登录 参考文档 Deepin下安装XRDP远程连接 Ubuntu/Debian/Kali xrdp远程桌面黑屏/空屏/无画面解决办法 ","tags":["deepin","rdp","linux"],"title":"Deepin 使用远程桌面","type":"post"},{"authors":null,"categories":null,"content":"在hyper-v虚拟机下调节分辨率 $ sudo nano /etc/default/grub 修改配置项\nGRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;quiet splash video=hyperv_fb:1366x768\u0026#34; 更新 grub\n$ sudo /usr/lib/deepin-api/adjust-grub-theme $ sudo update-grub 注意：这种方法最高只能支持 1920×1080 的分辨率，对于大显示器，高 DPI 的童鞋，可以考虑用 RDP，VNC 等方式来用上更高的分辨率。\n参考文档 https://www.jianshu.com/p/f7fd7b708a65 ","date":1683375612,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"062ea53eeb058c6361a35bdfdca6dfef","permalink":"https://blog.cuile.com/post/windows/hyper-v_deepin_resolution/","publishdate":"2023-05-06T20:20:12+08:00","relpermalink":"/post/windows/hyper-v_deepin_resolution/","section":"post","summary":"在hyper-v虚拟机下调节分辨率 $ sudo nano /etc/default/grub 修改配置项\nGRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash video=hyperv_fb:1366x768\" 更新 grub\n$ sudo /usr/lib/deepin-api/adjust-grub-theme $ sudo update-grub 注意：这种方法最高只能支持 1920×1080 的分辨率，对于大显示器，高 DPI 的童鞋，可以考虑用 RDP，VNC 等方式来用上更高的分辨率。\n参考文档 https://www.jianshu.com/p/f7fd7b708a65 ","tags":["deepin","Hyper-V","windows"],"title":"Hyper-V 下设置 Deepin 分辨率","type":"post"},{"authors":null,"categories":null,"content":"参考文档 kraiz/django-crontab 使用django-crontab建立定时任务 Linux crontab 命令 ","date":1674376536,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"0033e588ab7f3be3b4f0e2e304ae51e7","permalink":"https://blog.cuile.com/post/django/django_crontab/","publishdate":"2023-01-22T16:35:36+08:00","relpermalink":"/post/django/django_crontab/","section":"post","summary":"参考文档 kraiz/django-crontab 使用django-crontab建立定时任务 Linux crontab 命令 ","tags":["crontab","python","django"],"title":"Django crontab 使用说明","type":"post"},{"authors":null,"categories":null,"content":"不同版本中，不同的表现形式：\nPython 2.x：reload() 是内置函数 Python 3.0 - 3.3：使用 imp.reload(module) Python 3.4：imp 已经被废弃，取而代之的是 importlib from importlib import reload reload(\u0026lt;module\u0026gt;) 参考文档\nPython 重新加载模块 reload ","date":1674229457,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"f03c2851bd2bc9676758776e34a59cb3","permalink":"https://blog.cuile.com/post/python/python_shell_import_reload/","publishdate":"2023-01-20T23:44:17+08:00","relpermalink":"/post/python/python_shell_import_reload/","section":"post","summary":"不同版本中，不同的表现形式：\nPython 2.x：reload() 是内置函数 Python 3.0 - 3.3：使用 imp.reload(module) Python 3.4：imp 已经被废弃，取而代之的是 importlib from importlib import reload reload(\u003cmodule\u003e) 参考文档\nPython 重新加载模块 reload ","tags":["reload","python"],"title":"在 Python Shell 中重新导入模块","type":"post"},{"authors":null,"categories":null,"content":"VsCode Remote SSH 默认是不支持 Alpine Linux 的，不过，对 Alpine Linux 进行一些改动，就可以实现，比较方便。\n步骤如下：\n安装 安装 Bash 安装需要的包 $ apk del dropbear $ apk add gcompat libstdc++6 openssh wget git Alpine 配置 $ nano /etc/ssh/sshd-config AllowTcpForwarding yes PermitTunnel yes git 配置 VsCode 连接 Alpine Linux F1 \u0026gt; “Preferences: Open Remote Settings (JSON) (SSH: )” 添加下面的内容： { \u0026#34;git.path\u0026#34;: \u0026#34;/usr/bin/git\u0026#34;, } 参考文档： Alpine Linux and VS Code Remote SSH Working with Remote SSH in Alpine ssh_config(5) — Linux manual page ","date":1672749722,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"2510dc1e9bacdbf1b29ec7b17b185202","permalink":"https://blog.cuile.com/post/vscode/vscode_with_remote_ssh_in_alpine_linux/","publishdate":"2023-01-03T20:42:02+08:00","relpermalink":"/post/vscode/vscode_with_remote_ssh_in_alpine_linux/","section":"post","summary":"VsCode Remote SSH 默认是不支持 Alpine Linux 的，不过，对 Alpine Linux 进行一些改动，就可以实现，比较方便。\n步骤如下：\n安装 安装 Bash 安装需要的包 $ apk del dropbear $ apk add gcompat libstdc++6 openssh wget git Alpine 配置 $ nano /etc/ssh/sshd-config AllowTcpForwarding yes PermitTunnel yes git 配置 VsCode 连接 Alpine Linux F1 \u003e “Preferences: Open Remote Settings (JSON) (SSH: )” 添加下面的内容： { \"git.path\": \"/usr/bin/git\", } 参考文档： Alpine Linux and VS Code Remote SSH Working with Remote SSH in Alpine ssh_config(5) — Linux manual page ","tags":["alpine linux","remote ssh","vscode"],"title":"VsCode 使用 Remote SSH 连接 Alpine Linux","type":"post"},{"authors":null,"categories":null,"content":"Alpine Linux 原始安装的是 busybox，小巧精干，但毕竟与主流的 Bash 还是有区别，特别是与其它系统联动时会比较麻烦，所以还是安装 Bash，统一 Shell 环境，方便日后使用。\n而且基本网上的安装教程都有问题，所以这里给出正确的安装步骤。\n安装 $ apk add bash libuser 配置 $ touch /etc/login.defs $ mkdir /etc/default $ touch /etc/default/useradd $ lchsh \u0026lt;root\u0026gt; Changing shell for root. Password: \u0026lt;root password\u0026gt; New Shell [/bin/ash]: /bin/bash Shell changed. 参考文档： Working with Remote SSH in Alpine Linux命令之 chsh – 用来更换登录系统时使用的shell ","date":1672747722,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"583b2957c189d4d22119d652cb31026f","permalink":"https://blog.cuile.com/post/alpine_linux/bash/","publishdate":"2023-01-03T20:08:42+08:00","relpermalink":"/post/alpine_linux/bash/","section":"post","summary":"Alpine Linux 原始安装的是 busybox，小巧精干，但毕竟与主流的 Bash 还是有区别，特别是与其它系统联动时会比较麻烦，所以还是安装 Bash，统一 Shell 环境，方便日后使用。\n而且基本网上的安装教程都有问题，所以这里给出正确的安装步骤。\n安装 $ apk add bash libuser 配置 $ touch /etc/login.defs $ mkdir /etc/default $ touch /etc/default/useradd $ lchsh \u003croot\u003e Changing shell for root. Password: \u003croot password\u003e New Shell [/bin/ash]: /bin/bash Shell changed. 参考文档： Working with Remote SSH in Alpine Linux命令之 chsh – 用来更换登录系统时使用的shell ","tags":["linux","bash","alpine linux"],"title":"Alpine Linux 安装 Bash","type":"post"},{"authors":null,"categories":null,"content":"1. 使用手册 看完这3篇足以把服务建起来，非常方便\n官方文档 教程1 教程2 2. 服务端安装配置 可直接使用 Docker 的配置进行\n3. 客户端下载、 安装、运行 原本也想使用Docker镜像，但发现kvm之间通过Docker通信好像有问题，所幸在宿主机上可以直接使用release文件。 【注意：每次添加新的客户端，要同步更新服务端的端口配置】\n3.1. 下载 官网下载地址【注意：s, c两端使用的版本号要相同】\n$ cd ~ # 下载安装软件 $ yum install wget tar git # 下载 frp $ wget -c https://github.com/fatedier/frp/releases/download/v0.34.3/frp_0.34.3_linux_amd64.tar.gz $ tar -axvf frp_0.34.3_linux_amd64.tar.gz $ rm -rf frp_0.34.3_linux_amd64.tar.gz # 下载 frp 配置 $ git clone https://github.com/Cuile/frp.git 3.2. 安装 # 此处只能使用硬链接，使用软链接会导致无法启动服务 # 安装配置文件 $ mkdir /etc/frp $ ln -b ~/frp/conf/frpc-pve.ini /etc/frp/frpc.ini # 安装运行文件 $ ln -b ~/frp_0.34.3_linux_amd64/frpc /usr/bin/frpc # 安装服务 $ ln -b ~/frp_0.34.3_linux_amd64/systemd/frpc.service /lib/systemd/system/frpc.service 3.3. 运行 $ systemctl enable frpc.service ##设定指定服务开机开启 $ systemctl disable frpc.service ##设定指定服务开机关闭 $ systemctl start frpc.service $ systemctl stop frpc.service $ systemctl restart frpc.service $ systemctl status frpc.service $ systemctl list-units | grep frpc 3.4. 更新 通过 git 更新 frpc 的配置后，要重新链接配置文件\n$ bash ~/frp/CentOS/restart.frpc.service.sh ","date":1672218915,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"238a6bddf1d977f9dcb3fb91835c387e","permalink":"https://blog.cuile.com/post/linux/frp_install/","publishdate":"2022-12-28T17:15:15+08:00","relpermalink":"/post/linux/frp_install/","section":"post","summary":"1. 使用手册 看完这3篇足以把服务建起来，非常方便\n官方文档 教程1 教程2 2. 服务端安装配置 可直接使用 Docker 的配置进行\n3. 客户端下载、 安装、运行 原本也想使用Docker镜像，但发现kvm之间通过Docker通信好像有问题，所幸在宿主机上可以直接使用release文件。 【注意：每次添加新的客户端，要同步更新服务端的端口配置】\n3.1. 下载 官网下载地址【注意：s, c两端使用的版本号要相同】\n$ cd ~ # 下载安装软件 $ yum install wget tar git # 下载 frp $ wget -c https://github.com/fatedier/frp/releases/download/v0.34.3/frp_0.34.3_linux_amd64.tar.gz $ tar -axvf frp_0.34.3_linux_amd64.tar.gz $ rm -rf frp_0.34.3_linux_amd64.tar.gz # 下载 frp 配置 $ git clone https://github.com/Cuile/frp.git 3.2. 安装 # 此处只能使用硬链接，使用软链接会导致无法启动服务 # 安装配置文件 $ mkdir /etc/frp $ ln -b ~/frp/conf/frpc-pve.ini /etc/frp/frpc.ini # 安装运行文件 $ ln -b ~/frp_0.34.3_linux_amd64/frpc /usr/bin/frpc # 安装服务 $ ln -b ~/frp_0.34.3_linux_amd64/systemd/frpc.service /lib/systemd/system/frpc.service 3.3. 运行 $ systemctl enable frpc.service ##设定指定服务开机开启 $ systemctl disable frpc.service ##设定指定服务开机关闭 $ systemctl start frpc.service $ systemctl stop frpc.service $ systemctl restart frpc.service $ systemctl status frpc.service $ systemctl list-units | grep frpc 3.4. 更新 通过 git 更新 frpc 的配置后，要重新链接配置文件\n","tags":["frp","proxy","linux"],"title":"frp安装配置","type":"post"},{"authors":null,"categories":null,"content":"WindTerm 无法认证 WindTerm客户端，取消 “会话设置 -\u0026gt; SSH -\u0026gt; 验证 -\u0026gt; 尝试键盘交互认证” 可已正常连接。\n安装 OpenSSH Server $ apk update $ apk add openssh-server openssh ; /etc/ssh/sshd_config # 开放Root登录 - #PermitRootLogin prohibit-password + PermitRootLogin yes # 允许其它用户登录 - #PasswordAuthentication yes + PasswordAuthentication yes # 解决ssh自动断开 - #ClientAliveInterval 0 - #ClientAliveCountMax 3 + ClientAliveInterval 60 + ClientAliveCountMax 3 $ rc-service sshd start $ rc-service sshd restart # 设置开机启动 $ rc-update add sshd # 删除开机启动服务 $ rc-update del sshd # 显示所有服务 # rc-status -a Alpine安装SSH服务，并开启SSH远程登录 终端配置 在 /etc/profile.d 文件夹下，创建sh文件来实现。\n# /etc/profile.d/30user.sh + alias ll=\u0026#39;ls -la --color=tty\u0026#39; # Alpine Linux BusyBox 不支持日期格式 # [HH:MM] path # [user@hostname] 命令提示符 + export PS1=\u0026#39;\\[\\e[36;40m\\][\\A] \\[\\e[0m\\] \\[\\e[35;40m\\]\\w\\[\\e[0m\\]\\n\\[\\e[33;40m\\][\\u@\\H]\\[\\e[0m\\] \\\\$ \u0026#39; busybox：ash：PS1：支持的内部替换变量 修改时区 # 查看当时时间 $ date -R # 修改到 +8 时区 $ apk add apk add alpine-conf \u0026amp;\u0026amp; \\ setup-timezone -z Asia/Shanghai \u0026amp;\u0026amp; \\ apk del alpine-conf alpine 镜像时区调为 Asia/Shanghai 后因 TZ 与 apk del tzdata 导致不生效 修改主机名 ; /etc/hostname \u0026lt;hostname\u0026gt; $ reboot ","date":1672216020,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"881ac45194de0b36fd8284881fe0267a","permalink":"https://blog.cuile.com/post/alpine_linux/manual/","publishdate":"2022-12-28T16:27:00+08:00","relpermalink":"/post/alpine_linux/manual/","section":"post","summary":"WindTerm 无法认证 WindTerm客户端，取消 “会话设置 -\u003e SSH -\u003e 验证 -\u003e 尝试键盘交互认证” 可已正常连接。\n安装 OpenSSH Server $ apk update $ apk add openssh-server openssh ; /etc/ssh/sshd_config # 开放Root登录 - #PermitRootLogin prohibit-password + PermitRootLogin yes # 允许其它用户登录 - #PasswordAuthentication yes + PasswordAuthentication yes # 解决ssh自动断开 - #ClientAliveInterval 0 - #ClientAliveCountMax 3 + ClientAliveInterval 60 + ClientAliveCountMax 3 $ rc-service sshd start $ rc-service sshd restart # 设置开机启动 $ rc-update add sshd # 删除开机启动服务 $ rc-update del sshd # 显示所有服务 # rc-status -a Alpine安装SSH服务，并开启SSH远程登录 终端配置 在 /etc/profile.d 文件夹下，创建sh文件来实现。\n","tags":["linux","cli","alpine linux"],"title":"Alpine Linux 配置","type":"post"},{"authors":null,"categories":null,"content":"已弃用，转到 Tmux 命令\n创建屏幕 # 离线方式创建屏幕，一般用在启动脚本 $ screen -S \u0026lt;screen_name\u0026gt; -d -m 查年屏幕 $ screen -ls 执行命令 # 在指定屏幕内输入cmd，注意\\n代表回车 $ screen -S \u0026lt;screen_name\u0026gt; -X stuff \u0026#34;\u0026lt;cmd\u0026gt;\\n\u0026#34; # 在当前窗口内，通过另一个过滤进程控制窗口的输入或输出。 # 非常复杂，还没有搞明白有什么用 # 官方建议：小心使用！ $ screen -S \u0026lt;screen_name\u0026gt; -X |\u0026lt;cmd\u0026gt; $ screen -S \u0026lt;screen_name\u0026gt; -X !..|\u0026lt;cmd\u0026gt; $ screen -S \u0026lt;screen_name\u0026gt; -X exec\u0026lt;cmd\u0026gt; 参考文档\nscreen stuff screen exec 离开屏幕 在 screen 终端下，按 Ctrl+a d 键\n退出屏幕 # 进入指定屏幕，再退出 $ screen -r \u0026lt;screen_name|pid\u0026gt; $ exit # 指定屏幕，直接退出 $ screen -S \u0026lt;screen_name\u0026gt; -X quit ","date":1672208648,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"13071eb3255d938fb696afe9580bfd6b","permalink":"https://blog.cuile.com/post/linux/screen_manual/","publishdate":"2022-12-28T14:24:08+08:00","relpermalink":"/post/linux/screen_manual/","section":"post","summary":"已弃用，转到 Tmux 命令\n创建屏幕 # 离线方式创建屏幕，一般用在启动脚本 $ screen -S \u003cscreen_name\u003e -d -m 查年屏幕 $ screen -ls 执行命令 # 在指定屏幕内输入cmd，注意\\n代表回车 $ screen -S \u003cscreen_name\u003e -X stuff \"\u003ccmd\u003e\\n\" # 在当前窗口内，通过另一个过滤进程控制窗口的输入或输出。 # 非常复杂，还没有搞明白有什么用 # 官方建议：小心使用！ $ screen -S \u003cscreen_name\u003e -X |\u003ccmd\u003e $ screen -S \u003cscreen_name\u003e -X !..|\u003ccmd\u003e $ screen -S \u003cscreen_name\u003e -X exec\u003ccmd\u003e 参考文档\nscreen stuff screen exec 离开屏幕 在 screen 终端下，按 Ctrl+a d 键\n退出屏幕 # 进入指定屏幕，再退出 $ screen -r \u003cscreen_name|pid\u003e $ exit # 指定屏幕，直接退出 $ screen -S \u003cscreen_name\u003e -X quit ","tags":["cli","screen","linux"],"title":"screen 命令","type":"post"},{"authors":null,"categories":null,"content":"systemctl命令 systemctl list-units ##列出当前系统服务的状态 systemctl list-unit-files ##列出服务的开机状态 systemctl status sshd ##查看指定服务的状态 systemctl stop sshd ##关闭指定服务 systemctl start sshd ##开启指定服务 systemctl restart sshd ##从新启动服务 systemctl enable sshd ##设定指定服务开机开启 systemctl disable sshd ##设定指定服务开机关闭 systemctl reload sshd ##使指定服务从新加载配置 systemctl list-dependencies sshd ##查看指定服务的倚赖关系 systemctl mask sshd ##冻结指定服务 systemctl unmask sshd ##启用服务 systemctl set-default multi-user.target ##开机不开启图形 systemctl set-default graphical.target ##开机启动图形 设置主机名 $ _hostname_=XXXX $ hostnamectl --static set-hostname ${_hostname_} $ hostnamectl --transient set-hostname ${_hostname_} $ hostnamectl --pretty set-hostname ${_hostname_} hostnamectl 参考 修改服务器时区 $ timedatectl set-timezone Asia/Shanghai timedatectl 参考 ","date":1672133348,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"cdfc414ffa65c12ba9eab6ee6594145b","permalink":"https://blog.cuile.com/post/linux/systemd/","publishdate":"2022-12-27T17:29:08+08:00","relpermalink":"/post/linux/systemd/","section":"post","summary":"systemctl命令 systemctl list-units ##列出当前系统服务的状态 systemctl list-unit-files ##列出服务的开机状态 systemctl status sshd ##查看指定服务的状态 systemctl stop sshd ##关闭指定服务 systemctl start sshd ##开启指定服务 systemctl restart sshd ##从新启动服务 systemctl enable sshd ##设定指定服务开机开启 systemctl disable sshd ##设定指定服务开机关闭 systemctl reload sshd ##使指定服务从新加载配置 systemctl list-dependencies sshd ##查看指定服务的倚赖关系 systemctl mask sshd ##冻结指定服务 systemctl unmask sshd ##启用服务 systemctl set-default multi-user.target ##开机不开启图形 systemctl set-default graphical.target ##开机启动图形 设置主机名 $ _hostname_=XXXX $ hostnamectl --static set-hostname ${_hostname_} $ hostnamectl --transient set-hostname ${_hostname_} $ hostnamectl --pretty set-hostname ${_hostname_} hostnamectl 参考 修改服务器时区 $ timedatectl set-timezone Asia/Shanghai timedatectl 参考 ","tags":["CLI","Systemd","Linux"],"title":"Systemd 系统工具命令指南","type":"post"},{"authors":null,"categories":null,"content":"遇事不决，多读文档！\n虚拟机 创建 使用命令行创建 VM 非常方便，而且还可以使用各发行版的云镜像，快速创建速度又快，占用空间又小，非常方便。\n# 增加硬盘空间 # 建议从模板创建虚拟机后，再增加虚拟机硬盘的空间，这样可以保持模板的大小 qm disk resize \u0026lt;VM_ID\u0026gt; scsi0 +30G # 关闭 qm stop \u0026lt;vmid\u0026gt; # 如果关闭失败 qm list # 找到 vm 对应的 pid kill \u0026lt;pid\u0026gt; # 删除 qm destroy \u0026lt;vmid\u0026gt; --destroy-unreferenced-disks 1 --purge 1 --skiplock 1 # 强制删除 rm -f /etc/pve/nodes/*/*/\u0026lt;vm_id\u0026gt;.conf # [修復Proxmox VE：無法刪除虛擬機器](https://blog.pulipuli.info/2014/08/proxmox-ve-fix-proxmox-ve-destroy.html#postcataproxmox-ve-fix-proxmox-ve-destroy.html0_anchor2) LXC容器 # 关闭 pct stop \u0026lt;vmid\u0026gt; pct list 存储 # 查看存储空间使用情况 pvesm status # 查看存储内的文件 pvesm list \u0026lt;storage\u0026gt; # 查看存储配置 cat /etc/pve/storage.cfg # 给local存储添加存储类型 pvesm set local --content snippets,rootdir,import,images,backup,vztmpl,iso # 注意！！！片段文件只能放在 /var/lib/vz/snippets/ 目录下，不支持子目录 # 将local-lvm(LVM-Thin)合并到local # 移动虚拟机硬盘到local qm disk move \u0026lt;vmid\u0026gt; \u0026lt;disk\u0026gt; \u0026lt;storage\u0026gt; --format qcow2 --delete 1 # 移动容器卷到local pct move-volume \u0026lt;vmid\u0026gt; \u0026lt;volume\u0026gt; \u0026lt;storage\u0026gt; --delete 1 # 删除local-lvm存储 lvremove pve/data # 空间合并到local lvextend -l +100%FREE -r pve/root # 在WebUI的“数据中心”-\u0026#34;存储\u0026#34;里，手动移除local-lvm ","date":1672131114,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"8c42eccc8bfade186407231983121023","permalink":"https://blog.cuile.com/post/proxmox/cli/","publishdate":"2022-12-27T16:51:54+08:00","relpermalink":"/post/proxmox/cli/","section":"post","summary":"遇事不决，多读文档！\n虚拟机 创建 使用命令行创建 VM 非常方便，而且还可以使用各发行版的云镜像，快速创建速度又快，占用空间又小，非常方便。\n# 增加硬盘空间 # 建议从模板创建虚拟机后，再增加虚拟机硬盘的空间，这样可以保持模板的大小 qm disk resize \u003cVM_ID\u003e scsi0 +30G # 关闭 qm stop \u003cvmid\u003e # 如果关闭失败 qm list # 找到 vm 对应的 pid kill \u003cpid\u003e # 删除 qm destroy \u003cvmid\u003e --destroy-unreferenced-disks 1 --purge 1 --skiplock 1 # 强制删除 rm -f /etc/pve/nodes/*/*/\u003cvm_id\u003e.conf # [修復Proxmox VE：無法刪除虛擬機器](https://blog.pulipuli.info/2014/08/proxmox-ve-fix-proxmox-ve-destroy.html#postcataproxmox-ve-fix-proxmox-ve-destroy.html0_anchor2) LXC容器 # 关闭 pct stop \u003cvmid\u003e pct list 存储 # 查看存储空间使用情况 pvesm status # 查看存储内的文件 pvesm list \u003cstorage\u003e # 查看存储配置 cat /etc/pve/storage.cfg # 给local存储添加存储类型 pvesm set local --content snippets,rootdir,import,images,backup,vztmpl,iso # 注意！！！片段文件只能放在 /var/lib/vz/snippets/ 目录下，不支持子目录 # 将local-lvm(LVM-Thin)合并到local # 移动虚拟机硬盘到local qm disk move \u003cvmid\u003e \u003cdisk\u003e \u003cstorage\u003e --format qcow2 --delete 1 # 移动容器卷到local pct move-volume \u003cvmid\u003e \u003cvolume\u003e \u003cstorage\u003e --delete 1 # 删除local-lvm存储 lvremove pve/data # 空间合并到local lvextend -l +100%FREE -r pve/root # 在WebUI的“数据中心”-\"存储\"里，手动移除local-lvm ","tags":["CLI","ProxmoxVE"],"title":"ProxmoxVE 命令","type":"post"},{"authors":null,"categories":null,"content":"使用Hyper-V安装CentOS虚拟机，使用起来非常方便。但遇到磁盘空间不够时，不像Windows虚拟机那样方便给磁盘空间扩容。 总体两分二步：\n1. vhdx扩容 关闭虚拟机，然后给磁盘扩容，操作方便网上教程多，这里不再赘述。\n2. CentOS扩容 2.1 查看分区表 $ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sda 8:0 0 20G 0 disk ├─sda1 8:1 0 200M 0 part /boot/efi ├─sda2 8:2 0 1G 0 part /boot └─sda3 8:3 0 8.8G 0 part ├─centos-root 253:0 0 7.8G 0 lvm / └─centos-swap 253:1 0 1G 0 lvm [SWAP] 以上内容可以看出，sda已经扩容到20G，但sda1+sda2+sda3只有10G说明vhdx扩容成功。\n2.2 建立新分区 $ fdisk /dev/sda The device presents a logical sector size that is smaller than the physical sector size. Aligning to a physical sector (or optimal I/O) size boundary is recommended, or performance may be impacted. 欢迎使用 fdisk (util-linux 2.23.2)。 更改将停留在内存中，直到您决定将更改写入磁盘。 使用写入命令前请三思。 命令(输入 m 获取帮助)：n Partition type: p primary (1 primary, 0 extended, 3 free) e extended Select (default p): Using default response p 分区号 (2-4，默认 2)： 起始 扇区 (20971520-41943039，默认为 20971520)： 将使用默认值 20971520 Last 扇区, +扇区 or +size{K,M,G} (20971520-41943039，默认为 41943039)：+10G 值超出范围。 Last 扇区, +扇区 or +size{K,M,G} (20971520-41943039，默认为 41943039)：+9.9G 不支持的后缀：“.9G”。 支持：10^N: KB (千字节), MB (兆字节), GB (吉字节) 2^N: K (约千字节), M (约兆字节), G (约吉字节) Last 扇区, +扇区 or +size{K,M,G} (20971520-41943039，默认为 41943039)：+9G 分区 2 已设置为 Linux 类型，大小设为 9 GiB 命令(输入 m 获取帮助)：w The partition table has been altered! Calling ioctl() to re-read partition table. WARNING: Re-reading the partition table failed with error 16: 设备或资源忙. The kernel still uses the old table. The new table will be used at the next reboot or after you run partprobe(8) or kpartx(8) 正在同步磁盘。 重读分区表时，发生错误 $ partprobe Error: 备份 GPT 表不像应该的那样出现在磁盘的末尾。这可能意味这其它操作系统相信磁盘小一些。通过将备份移动到末尾 (并删除旧备份) 来修正？ Warning: Not all of the space available to /dev/sda appears to be used, you can fix the GPT to use all of the space (an extra 20971520 blocks) or continue with the current setting? 查看分区表时，发现新分区未创建成功 $ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sda 8:0 0 20G 0 disk ├─sda1 8:1 0 200M 0 part /boot/efi ├─sda2 8:2 0 1G 0 part /boot └─sda3 8:3 0 8.8G 0 part ├─centos-root 253:0 0 7.8G 0 lvm / └─centos-swap 253:1 0 1G 0 lvm [SWAP] 使用 parted 修复分区表 $ parted /dev/sda GNU Parted 3.1 使用 /dev/sda Welcome to GNU Parted! Type \u0026#39;help\u0026#39; to view a list of commands. (parted) p 错误: 备份 GPT 表不像应该的那样出现在磁盘的末尾。这可能意味这其它操作系统相信磁盘小一些。通过将备份移动到末尾 (并删除旧备份) 来修正？ 修正/Fix/忽略/Ignore/放弃/Cancel? fix 警告: Not all of the space available to /dev/sda appears to be used, you can fix the GPT to use all of the space (an extra 20971520 blocks) or continue with the current setting? 修正/Fix/忽略/Ignore? fix Model: Msft Virtual Disk (scsi) Disk /dev/sda: 21.5GB Sector size (logical/physical): 512B/4096B Partition Table: gpt Disk Flags: Number Start End Size File system Name 标志 1 1049kB 211MB 210MB fat16 EFI System Partition 启动 2 211MB 1285MB 1074MB xfs 3 1285MB 10.7GB 9452MB lvm (parted) p Model: Msft Virtual Disk (scsi) Disk /dev/sda: 21.5GB Sector size (logical/physical): 512B/4096B Partition Table: gpt Disk Flags: Number Start End Size File system Name 标志 1 1049kB 211MB 210MB fat16 EFI System Partition 启动 2 211MB 1285MB 1074MB xfs 3 1285MB 10.7GB 9452MB lvm (parted) quit 再次建立新分区 $ fdisk /dev/sda WARNING: fdisk GPT support is currently new, and therefore in an experimental phase. Use at your own discretion. 欢迎使用 fdisk (util-linux 2.23.2)。 更改将停留在内存中，直到您决定将更改写入磁盘。 使用写入命令前请三思。 命令(输入 m 获取帮助)：n 分区号 (4-128，默认 4)： 第一个扇区 (34-41943006，默认 20969472)： Last sector, +sectors or +size{K,M,G,T,P} (20969472-41943006，默认 41943006)：+10G 已创建分区 4 命令(输入 m 获取帮助)：w The partition table has been altered! Calling ioctl() to re-read partition table. WARNING: Re-reading the partition table failed with error 16: 设备或资源忙. The kernel still uses the old table. The new table will be used at the next reboot or after you run partprobe(8) or kpartx(8) 正在同步磁盘。 2.3 重读分区表 $ partprobe 重读分区表，正常不会有任何输出\n再次查看分区表，可以看到 sda4 分区已经创建好了 $ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sda 8:0 0 20G 0 disk ├─sda1 8:1 0 200M 0 part /boot/efi ├─sda2 8:2 0 1G 0 part /boot ├─sda3 8:3 0 8.8G 0 part │ ├─centos-root 253:0 0 7.8G 0 lvm / │ └─centos-swap 253:1 0 1G 0 lvm [SWAP] └─sda4 8:4 0 10G 0 part 2.4 将 sda4 分区加入 centos-root 分区 $ lvm lvm\u0026gt; pvcreate /dev/sda4 Physical volume \u0026#34;/dev/sda4\u0026#34; successfully created. lvm\u0026gt; pvdisplay --- Physical volume --- PV Name /dev/sda3 VG Name centos PV Size 8.80 GiB / not usable 2.00 MiB Allocatable yes (but full) PE Size 4.00 MiB Total PE 2253 Free PE 0 Allocated PE 2253 PV UUID D5K7Ds-a0I8-67Kt-LE1J-HKi7-aaKX-CLaJTg \u0026#34;/dev/sda4\u0026#34; is a new physical volume of \u0026#34;10.00 GiB\u0026#34; --- NEW Physical volume --- PV Name /dev/sda4 VG Name PV Size 10.00 GiB Allocatable NO PE Size 0 Total PE 0 Free PE 0 Allocated PE 0 PV UUID digjnH-8XFC-kMQT-nOEL-y9FJ-ImaB-t8FB7d lvm\u0026gt; vgdisplay --- Volume group --- VG Name centos System ID Format lvm2 Metadata Areas 1 Metadata Sequence No 3 VG Access read/write VG Status resizable MAX LV 0 Cur LV 2 Open LV 2 Max PV 0 Cur PV 1 Act PV 1 VG Size 8.80 GiB PE Size 4.00 MiB Total PE 2253 Alloc PE / Size 2253 / 8.80 GiB Free PE / Size 0 / 0 VG UUID …","date":1672059692,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"81cc03846f73831b572fef3c3aafbae9","permalink":"https://blog.cuile.com/post/windows/hyper-v_centos_disk_expansion/","publishdate":"2022-12-26T21:01:32+08:00","relpermalink":"/post/windows/hyper-v_centos_disk_expansion/","section":"post","summary":"使用Hyper-V安装CentOS虚拟机，使用起来非常方便。但遇到磁盘空间不够时，不像Windows虚拟机那样方便给磁盘空间扩容。 总体两分二步：\n1. vhdx扩容 关闭虚拟机，然后给磁盘扩容，操作方便网上教程多，这里不再赘述。\n2. CentOS扩容 2.1 查看分区表 $ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sda 8:0 0 20G 0 disk ├─sda1 8:1 0 200M 0 part /boot/efi ├─sda2 8:2 0 1G 0 part /boot └─sda3 8:3 0 8.8G 0 part ├─centos-root 253:0 0 7.8G 0 lvm / └─centos-swap 253:1 0 1G 0 lvm [SWAP] 以上内容可以看出，sda已经扩容到20G，但sda1+sda2+sda3只有10G说明vhdx扩容成功。\n2.2 建立新分区 $ fdisk /dev/sda The device presents a logical sector size that is smaller than the physical sector size. Aligning to a physical sector (or optimal I/O) size boundary is recommended, or performance may be impacted. 欢迎使用 fdisk (util-linux 2.23.2)。 更改将停留在内存中，直到您决定将更改写入磁盘。 使用写入命令前请三思。 命令(输入 m 获取帮助)：n Partition type: p primary (1 primary, 0 extended, 3 free) e extended Select (default p): Using default response p 分区号 (2-4，默认 2)： 起始 扇区 (20971520-41943039，默认为 20971520)： 将使用默认值 20971520 Last 扇区, +扇区 or +size{K,M,G} (20971520-41943039，默认为 41943039)：+10G 值超出范围。 Last 扇区, +扇区 or +size{K,M,G} (20971520-41943039，默认为 41943039)：+9.9G 不支持的后缀：“.9G”。 支持：10^N: KB (千字节), MB (兆字节), GB (吉字节) 2^N: K (约千字节), M (约兆字节), G (约吉字节) Last 扇区, +扇区 or +size{K,M,G} (20971520-41943039，默认为 41943039)：+9G 分区 2 已设置为 Linux 类型，大小设为 9 GiB 命令(输入 m 获取帮助)：w The partition table has been altered! Calling ioctl() to re-read partition table. WARNING: Re-reading the partition table failed with error 16: 设备或资源忙. The kernel still uses the old table. The new table will be used at the next reboot or after you run partprobe(8) or kpartx(8) 正在同步磁盘。 重读分区表时，发生错误 $ partprobe Error: 备份 GPT 表不像应该的那样出现在磁盘的末尾。这可能意味这其它操作系统相信磁盘小一些。通过将备份移动到末尾 (并删除旧备份) 来修正？ Warning: Not all of the space available to /dev/sda appears to be used, you can fix the GPT to use all of the space (an extra 20971520 blocks) or continue with the current setting? 查看分区表时，发现新分区未创建成功 $ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sda 8:0 0 20G 0 disk ├─sda1 8:1 0 200M 0 part /boot/efi ├─sda2 8:2 0 1G 0 part /boot └─sda3 8:3 0 8.8G 0 part ├─centos-root 253:0 0 7.8G 0 lvm / └─centos-swap 253:1 0 1G 0 lvm [SWAP] 使用 parted 修复分区表 $ parted /dev/sda GNU Parted 3.1 使用 /dev/sda Welcome to GNU Parted! Type 'help' to view a list of commands. (parted) p 错误: 备份 GPT 表不像应该的那样出现在磁盘的末尾。这可能意味这其它操作系统相信磁盘小一些。通过将备份移动到末尾 (并删除旧备份) 来修正？ 修正/Fix/忽略/Ignore/放弃/Cancel? fix 警告: Not all of the space available to /dev/sda appears to be used, you can fix the GPT to use all of the space (an extra 20971520 blocks) or continue with the current setting? 修正/Fix/忽略/Ignore? fix Model: Msft Virtual Disk (scsi) Disk /dev/sda: 21.5GB Sector size (logical/physical): 512B/4096B Partition Table: gpt Disk Flags: Number Start End Size File system Name 标志 1 1049kB 211MB 210MB fat16 EFI System Partition 启动 2 211MB 1285MB 1074MB xfs 3 1285MB 10.7GB 9452MB lvm (parted) p Model: Msft Virtual Disk (scsi) Disk /dev/sda: 21.5GB Sector size (logical/physical): 512B/4096B Partition Table: gpt Disk Flags: Number Start End Size File system Name 标志 1 1049kB 211MB 210MB fat16 EFI System Partition 启动 2 211MB 1285MB 1074MB xfs 3 1285MB 10.7GB 9452MB lvm (parted) quit 再次建立新分区 $ fdisk /dev/sda WARNING: fdisk GPT support is currently new, and therefore in an experimental phase. Use at your own discretion. 欢迎使用 fdisk (util-linux 2.23.2)。 更改将停留在内存中，直到您决定将更改写入磁盘。 使用写入命令前请三思。 命令(输入 m 获取帮助)：n 分区号 (4-128，默认 4)： 第一个扇区 (34-41943006，默认 20969472)： Last sector, +sectors or +size{K,M,G,T,P} (20969472-41943006，默认 41943006)：+10G 已创建分区 4 命令(输入 m 获取帮助)：w The partition table has been altered! Calling ioctl() to re-read partition table. WARNING: Re-reading the partition table failed with error 16: 设备或资源忙. The kernel still uses the old table. The new table will be used at the next reboot or after you run partprobe(8) or kpartx(8) 正在同步磁盘。 2.3 重读分区表 $ partprobe 重读分区表，正常不会有任何输出\n","tags":["CentOS","Hyper-V","windows"],"title":"Hyper-V 环境下给 CentOS 磁盘扩容","type":"post"},{"authors":null,"categories":null,"content":"Hyper-V 环境下安装 Linux 是无法调节分辨率的，但可以通过设置指定分辨率，不过最大只能支持1920x1080\n1. 修改配置文件 $ sudo nano /etc/default/grub 将配置\nGRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;quiet splash \u0026#34; 修改为\nGRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;quiet splash video=hyperv_fb:1920x1080\u0026#34; 这里要注意屏幕的实际分辨率，在15寸的笔记本上，适合的分辨率为1600x900\n2. 更新 Grub $ sudo update-grub 3. 重启 $ reboot 参考文档 Hyper-V 下 Ubuntu/Deepin 如何设置分辨率\n","date":1672059530,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"47c3fb5e6e51c64fc11411e21853a04c","permalink":"https://blog.cuile.com/post/windows/hyper-v_ubuntu_resolution/","publishdate":"2022-12-26T20:58:50+08:00","relpermalink":"/post/windows/hyper-v_ubuntu_resolution/","section":"post","summary":"Hyper-V 环境下安装 Linux 是无法调节分辨率的，但可以通过设置指定分辨率，不过最大只能支持1920x1080\n1. 修改配置文件 $ sudo nano /etc/default/grub 将配置\nGRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash \" 修改为\nGRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash video=hyperv_fb:1920x1080\" 这里要注意屏幕的实际分辨率，在15寸的笔记本上，适合的分辨率为1600x900\n2. 更新 Grub $ sudo update-grub 3. 重启 $ reboot 参考文档 Hyper-V 下 Ubuntu/Deepin 如何设置分辨率\n","tags":["Ubuntu","Hyper-V","windows"],"title":"Hyper-V 下设置 Ubuntu 分辨率","type":"post"},{"authors":null,"categories":null,"content":"一般新电脑买来都默认安排家庭版，相比专业版一个主要的区别就是没有Hpyer-V 功能。 Hpyer-V 功能支持虚拟机，Windows原生的虚拟机在资源占用方便很有优势，不只是对开发人员有用，对日常办公也非常方便。\n常用的办公软件环境统一 迁移方便 控制流氓软件占用资源 可随时通过还原点，还原系统 1. 安装脚本 pushd \u0026#34;%~dp0\u0026#34; dir /b %SystemRoot%\\servicing\\Packages\\*Hyper-V*.mum \u0026gt;hyper-v.txt for /f %%i in (\u0026#39;findstr /i . hyper-v.txt 2^\u0026gt;nul\u0026#39;) do dism /online /norestart /add-package:\u0026#34;%SystemRoot%\\servicing\\Packages\\%%i\u0026#34; del hyper-v.txt Dism /online /enable-feature /featurename:Microsoft-Hyper-V-All /LimitAccess /ALL 保存为Hyper-V.cmd\n2. 运行脚本 将脚本放到桌面，右键“以管理员身份运行”，等待安装结束后，就可以使用 Hyper-V 功能了。\n3. 其它 在 Windows 或 Windows Server 的 Hyper-V 中升级虚拟机版本 ","date":1672059350,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"8f36c6e1ccbe3cfaf679a6709b783e97","permalink":"https://blog.cuile.com/post/windows/hyper-v_windows10/","publishdate":"2022-12-26T20:55:50+08:00","relpermalink":"/post/windows/hyper-v_windows10/","section":"post","summary":"一般新电脑买来都默认安排家庭版，相比专业版一个主要的区别就是没有Hpyer-V 功能。 Hpyer-V 功能支持虚拟机，Windows原生的虚拟机在资源占用方便很有优势，不只是对开发人员有用，对日常办公也非常方便。\n常用的办公软件环境统一 迁移方便 控制流氓软件占用资源 可随时通过还原点，还原系统 1. 安装脚本 pushd \"%~dp0\" dir /b %SystemRoot%\\servicing\\Packages\\*Hyper-V*.mum \u003ehyper-v.txt for /f %%i in ('findstr /i . hyper-v.txt 2^\u003enul') do dism /online /norestart /add-package:\"%SystemRoot%\\servicing\\Packages\\%%i\" del hyper-v.txt Dism /online /enable-feature /featurename:Microsoft-Hyper-V-All /LimitAccess /ALL 保存为Hyper-V.cmd\n2. 运行脚本 将脚本放到桌面，右键“以管理员身份运行”，等待安装结束后，就可以使用 Hyper-V 功能了。\n3. 其它 在 Windows 或 Windows Server 的 Hyper-V 中升级虚拟机版本 ","tags":["Hyper-V","Windows"],"title":"Windows 10 家庭版安装 Hyper-V","type":"post"},{"authors":null,"categories":null,"content":"1. 网络配置的方法 1.1 Hyper-V 安装完后，将自动创建一个“默认虚拟交换机”，并同时创建一个同名的虚拟网卡。 此交换机名及虚拟网卡都无法修改，虚拟机直接填加即可使用网络。 虚拟机之间互联，再创建一个“内部交换机”，添加到虚拟机并设置同一网段即可。 缺点：速度较慢 1.2 将宿主机物理网卡直接共享给“默认虚拟交换机”创建的虚拟网卡，是比较省事、且高效的方法，相当于在物理网卡上做了一个NAT转换。 优点：“默认虚拟交换机”创建的虚拟网卡IP地址会自动固定为192.168.137.1，所有虚拟机的网段会固定为192.168.137.0。网速较快。 缺点： 在多个物理网卡之间切换时非常不方便； 在ReviOS等第三方精简系统中，运作不稳定。 1.3 在宿主机使用无线网卡时，由于Hyper-V对无线网卡支持的不好，需要做以下操作： 新建“外部虚拟交换机”： 选择宿主机网卡。 勾选“允许管理操作系统共享此网络适配器”。 网速较快。 会在宿主机上创建一个网桥，一个虚拟网卡，且宿主机可同时上网。 反之，则只会添加一个网桥，且宿主机无法同时上网。 这是 Hyper-V 对无线网卡支持不够好的表现，而且网速很慢，慢到什么程度呢？慢到微信连文件都发不出去！ 新建“内部虚拟交换机”： 会在宿主机上创建一个虚拟网卡。 将所有虚拟机都接入自建的“内部虚拟交换机”，可以解决IP变化的问题。 在宿主机上，将“外部虚拟交换机”创建的虚拟网卡，共享给“内部虚拟交换机”创建的虚拟网卡。 “内部虚拟交换机”创建的虚拟网卡IP地址会自动固定为192.168.137.1，所有虚拟机的网段会固定为192.168.137.0。 在ReviOS等第三方精简系统中，运作不稳定。 PS: 如在宿主机同时安装了“Windows沙盒”功能，则沙盒会给每个物理网卡和虚拟网卡，都自动的再创建一个对应的虚拟网卡，容易造成混乱，使用中要注意。 Windows 网络共享重启会失效，这个BUG一直没有解决，需要如此解决： 找到“Internet Connection Sharing”服务 启动类型：自动 找到注册表中“HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\SharedAccess” 新建“DWORD(32位)值(D)”：EnableRebootPersistConnection 值（十六进制）：1 重启电脑 最好给每个虚拟机都设置外网DNS，比如1.2.4.8，因为hyper-v的DNS服务不是很稳定。 2. 网络拓扑 使用以下拓扑结构来，解决多个物理网卡随时切换的问题： 宿主机直连路由器，宿主机上创建一个虚拟路由器，和一个虚拟机，宿主机与虚拟机都通过虚拟路由器来上网。\nTP Route 宿主机 OpenWRT 虚拟机 WLAN \u0026gt;DHCPIP: 192.168.10.113IP: 192.168.10.114mac: ac-8f \u0026gt;BridgeIP: -mac: ac-8f - - 外部网络 - \u0026gt;WLANIP: 192.168.10.113mac: ac-8f \u0026gt;WLANIP: 192.168.10.114mac: 01-36 - 内部网络 - \u0026gt;DHCPIP: 192.168.123.100mac: 01-28 \u0026gt;StaticIP: 192.168.123.1mac: 01-29 \u0026gt;DHCPIP: 192.168.123.102mac: 01-2c 网桥 - \u0026gt;SwitchIP: -mac: ac-8f - - 可以尝试使用网桥功能，解决多物理网卡切换的问题\n3. 查看网卡、虚拟网卡、虚拟交换机的命令 使用管理员模式，启动 PowerShell\n查看所有网卡\nget-netadapter 查看虚拟交换机\nget-vmswitch 查看所有虚拟网卡\nget-vmnetworkadapter -all 查看在主机上的虚拟网卡\nget-vmnetworkadapter -managementos 查看网卡组\nget-netlbfoteam 删除虚拟网卡\nremove-vmnetworkadapter -managementos -name \u0026#34;xxx\u0026#34; 删除虚拟交换机\nremove-vmswitch -name \u0026#34;xxx\u0026#34; 删除网卡组 这里要注意删除顺序是，虚拟网卡 \u0026gt; 虚拟交换机 \u0026gt; 网卡组 \u0026gt; 物理网卡。\nremove-netlbfoteam -name \u0026#34;xxx\u0026#34; 当然还有一个最简单粗暴的命令，删除所有设置，只保留物理网卡，非常简单好用。\nnetcfg -d 参考文档 Hyper-V网络设置 理解Hyper-V外部网络、内部网络、私有网络 删除Windows中隐藏的物理网卡和网络虚拟化失败后的虚拟网卡 Hyper-V 网络配置 如何从设备管理器中删除Hyper-V虚拟交换机扩展适配器 Win10 Hyper-v下虚拟机使用无线网络 Windows 网络共享 Windows 网络共享重启失效解决方案 win10 系统在做双网卡共享Internet问题-已解决！！多谢帮助！！ ","date":1672058990,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"a3d085fcea8d8d173cb4e000f71d0d0e","permalink":"https://blog.cuile.com/post/windows/hyper-v_network/","publishdate":"2022-12-26T20:49:50+08:00","relpermalink":"/post/windows/hyper-v_network/","section":"post","summary":"1. 网络配置的方法 1.1 Hyper-V 安装完后，将自动创建一个“默认虚拟交换机”，并同时创建一个同名的虚拟网卡。 此交换机名及虚拟网卡都无法修改，虚拟机直接填加即可使用网络。 虚拟机之间互联，再创建一个“内部交换机”，添加到虚拟机并设置同一网段即可。 缺点：速度较慢 1.2 将宿主机物理网卡直接共享给“默认虚拟交换机”创建的虚拟网卡，是比较省事、且高效的方法，相当于在物理网卡上做了一个NAT转换。 优点：“默认虚拟交换机”创建的虚拟网卡IP地址会自动固定为192.168.137.1，所有虚拟机的网段会固定为192.168.137.0。网速较快。 缺点： 在多个物理网卡之间切换时非常不方便； 在ReviOS等第三方精简系统中，运作不稳定。 1.3 在宿主机使用无线网卡时，由于Hyper-V对无线网卡支持的不好，需要做以下操作： 新建“外部虚拟交换机”： 选择宿主机网卡。 勾选“允许管理操作系统共享此网络适配器”。 网速较快。 会在宿主机上创建一个网桥，一个虚拟网卡，且宿主机可同时上网。 反之，则只会添加一个网桥，且宿主机无法同时上网。 这是 Hyper-V 对无线网卡支持不够好的表现，而且网速很慢，慢到什么程度呢？慢到微信连文件都发不出去！ 新建“内部虚拟交换机”： 会在宿主机上创建一个虚拟网卡。 将所有虚拟机都接入自建的“内部虚拟交换机”，可以解决IP变化的问题。 在宿主机上，将“外部虚拟交换机”创建的虚拟网卡，共享给“内部虚拟交换机”创建的虚拟网卡。 “内部虚拟交换机”创建的虚拟网卡IP地址会自动固定为192.168.137.1，所有虚拟机的网段会固定为192.168.137.0。 在ReviOS等第三方精简系统中，运作不稳定。 PS: 如在宿主机同时安装了“Windows沙盒”功能，则沙盒会给每个物理网卡和虚拟网卡，都自动的再创建一个对应的虚拟网卡，容易造成混乱，使用中要注意。 Windows 网络共享重启会失效，这个BUG一直没有解决，需要如此解决： 找到“Internet Connection Sharing”服务 启动类型：自动 找到注册表中“HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\SharedAccess” 新建“DWORD(32位)值(D)”：EnableRebootPersistConnection 值（十六进制）：1 重启电脑 最好给每个虚拟机都设置外网DNS，比如1.2.4.8，因为hyper-v的DNS服务不是很稳定。 2. 网络拓扑 使用以下拓扑结构来，解决多个物理网卡随时切换的问题： 宿主机直连路由器，宿主机上创建一个虚拟路由器，和一个虚拟机，宿主机与虚拟机都通过虚拟路由器来上网。\nTP Route 宿主机 OpenWRT 虚拟机 WLAN \u003eDHCPIP: 192.168.10.113IP: 192.168.10.114mac: ac-8f \u003eBridgeIP: -mac: ac-8f - - 外部网络 - \u003eWLANIP: 192.168.10.113mac: ac-8f \u003eWLANIP: 192.168.10.114mac: 01-36 - 内部网络 - \u003eDHCPIP: 192.168.123.100mac: 01-28 \u003eStaticIP: 192.168.123.1mac: 01-29 \u003eDHCPIP: 192.168.123.102mac: 01-2c 网桥 - \u003eSwitchIP: -mac: ac-8f - - 可以尝试使用网桥功能，解决多物理网卡切换的问题\n","tags":["network","Hyper-V","windows"],"title":"Hyper-V 网络设置","type":"post"},{"authors":null,"categories":null,"content":"command 指令 # 字符串方式 command: /bin/bash -c \u0026#34;cp /app/dtest/config.default.yml /app/config.yml \u0026amp;\u0026amp; python -u /app/dtest/tcc.py\u0026#34; # 另一种方式 command: [\u0026#34;/bin/bash\u0026#34;,\u0026#34;-c\u0026#34;,\u0026#34;while\u0026#34;,\u0026#34;true;\u0026#34;,\u0026#34;do\u0026#34;,\u0026#34;sleep\u0026#34;,\u0026#34;1;\u0026#34;,\u0026#34;done\u0026#34;] # 配置文件方式 ...... docker compose command 执行多条指令 tty 指令 启动后停在cli，等待登录\nstdin_open: true # 对应 docker run 中的 -i tty: true # 对应 docker run 中的 -t ","date":1658201481,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"81e171e65714287722783cea67659959","permalink":"https://blog.cuile.com/post/container/docker_compose_command/","publishdate":"2022-07-19T11:31:21+08:00","relpermalink":"/post/container/docker_compose_command/","section":"post","summary":"command 指令 # 字符串方式 command: /bin/bash -c \"cp /app/dtest/config.default.yml /app/config.yml \u0026\u0026 python -u /app/dtest/tcc.py\" # 另一种方式 command: [\"/bin/bash\",\"-c\",\"while\",\"true;\",\"do\",\"sleep\",\"1;\",\"done\"] # 配置文件方式 ...... docker compose command 执行多条指令 tty 指令 启动后停在cli，等待登录\nstdin_open: true # 对应 docker run 中的 -i tty: true # 对应 docker run 中的 -t ","tags":["docker compose","cli","Docker"],"title":"Docker Compose 指令","type":"post"},{"authors":null,"categories":null,"content":"做朋友式的情人 情人是寂寞路上遇到的人，是相互需要依托的人，是无法光明正大走一辈子的人，是一个和你没有一点家庭关系的人，却让你尝尽男女滋味尽情消魂的人。\n真正的情人是距离的思念，是除了妻子或者丈夫以外的唯一，是锦上添花的极品。但找情人并不容易，也是一种缘分，不是上过床就是情人，它是行走在朋友、红颜知己、爱人边缘的一种感情。比爱人多了一份浪漫，比朋友多了一份知己，比红颜知己多了一层身体上的信息。\n朋友是相互信任，爱人是相互包容，红颜知己是相互欣赏。朋友式的情人就是它们的总和。你成了他的朋友式情人，他会视你为一笔财富，他在你面前会轻松自在。快乐和烦心时都会想到你，他会欣赏你的思想，回味你的笑容，他愿意成为你永远的朋友，任何朋友都取代不了你的位置与感觉，因为你是他朋友式情人。\n做成功情人的秘诀 如果你爱上一个人，又被对方爱着，但又注定你们今后无法生活在一起，而你又不想失去他，那么，你应该懂得做情人的规则，给这个角色一个明确的定位，不该问的不要问，不该说的不要说，不该要求的不要要求，感情要专一、安分，不要有支解和破坏的心理，因为大家都有各自的生活，也不要为他昼夜难眠。分享他的快乐，分担他的痛苦，理解他，把他当作爱人、情人、朋友去疼他，不要给他压力，关心他，体贴他，为他着想。这样的情人才会相爱长久，乃至一生。\n","date":1658043954,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"134bf657263f21ac017005df52b01f69","permalink":"https://blog.cuile.com/post/tips/tips10/","publishdate":"2022-07-17T15:45:54+08:00","relpermalink":"/post/tips/tips10/","section":"post","summary":"做朋友式的情人 情人是寂寞路上遇到的人，是相互需要依托的人，是无法光明正大走一辈子的人，是一个和你没有一点家庭关系的人，却让你尝尽男女滋味尽情消魂的人。\n真正的情人是距离的思念，是除了妻子或者丈夫以外的唯一，是锦上添花的极品。但找情人并不容易，也是一种缘分，不是上过床就是情人，它是行走在朋友、红颜知己、爱人边缘的一种感情。比爱人多了一份浪漫，比朋友多了一份知己，比红颜知己多了一层身体上的信息。\n朋友是相互信任，爱人是相互包容，红颜知己是相互欣赏。朋友式的情人就是它们的总和。你成了他的朋友式情人，他会视你为一笔财富，他在你面前会轻松自在。快乐和烦心时都会想到你，他会欣赏你的思想，回味你的笑容，他愿意成为你永远的朋友，任何朋友都取代不了你的位置与感觉，因为你是他朋友式情人。\n做成功情人的秘诀 如果你爱上一个人，又被对方爱着，但又注定你们今后无法生活在一起，而你又不想失去他，那么，你应该懂得做情人的规则，给这个角色一个明确的定位，不该问的不要问，不该说的不要说，不该要求的不要要求，感情要专一、安分，不要有支解和破坏的心理，因为大家都有各自的生活，也不要为他昼夜难眠。分享他的快乐，分担他的痛苦，理解他，把他当作爱人、情人、朋友去疼他，不要给他压力，关心他，体贴他，为他着想。这样的情人才会相爱长久，乃至一生。\n","tags":["tips"],"title":"情人","type":"post"},{"authors":null,"categories":null,"content":"青春，是与七个自己相遇。一个明媚，一个忧伤，一个华丽，一个冒险，一个倔强，一个柔软，最后那个正在成长。\n不要轻易对别人好，因为只会让别人觉得你的好很廉价。\n当你心情平白无故变得不好，那你肯定是在想某个人了。\n","date":1658043370,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"1755f82adda9272553eee198f3ed4c0c","permalink":"https://blog.cuile.com/post/tips/tips9/","publishdate":"2022-07-17T15:36:10+08:00","relpermalink":"/post/tips/tips9/","section":"post","summary":"青春，是与七个自己相遇。一个明媚，一个忧伤，一个华丽，一个冒险，一个倔强，一个柔软，最后那个正在成长。\n不要轻易对别人好，因为只会让别人觉得你的好很廉价。\n当你心情平白无故变得不好，那你肯定是在想某个人了。\n","tags":["tips"],"title":"人生不能靠心情活着，而要靠心态去生活。","type":"post"},{"authors":null,"categories":null,"content":"懂得，是一种难言的柔情，入心入肺,入骨入髓;懂得，即使不言不语，即使山高水远，彼此的心依然贴近，惺惺相惜没有离。懂得，是发自内心的声音！ 有些人，无需相识，却能通过一段话、一篇字明白彼此的心情。虽然隔着一张屏，一本书，一页纸，因为懂得，所以，她就是那个可以走进自己内心深处的人。\n有些情，无需轰轰烈烈，却能深深铭记在心底一辈子。虽然时光荏苒，青春不在，因为懂得，所以他（她）依然是那个不管是开心或是悲伤都可以在心底温情拥抱的人。\n然而，在我们漫长的一生里，又会遇见几个懂自己的人，就算是遇见了，又会有几个真正愿意懂自己的。这样的人，如果遇到了，或男或女，只需一人便足够了。真正的懂得，不是相邀，也不是牵引，更不是逼迫，而是实实在在自然而然的明白，这样的明白，无关风月，无关功利，甚至无关风雨也无关晴天。\n真正的懂得，不必言语，不必刻意，有时，只需浅浅一个微笑。真正的懂得，不必解释，不必逃避，有时，只需轻轻的一声呼唤。真正的懂得是一种心情，一种欣赏，更是一种心灵的默契。\n懂得，是无声的，也是有声的。每当你开心时，忧伤时，伪装时，失落时，流泪时，甚至你对生活不满抱怨时，无需多言，因为他(她)会说出那句足以让你感动流泪话语：“我知道，我懂得，我明白”。这是一句比爱和喜欢更深情的表白。\n","date":1658043166,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"66d7e0d1f061c315f70fa245d0f4b833","permalink":"https://blog.cuile.com/post/tips/tips8/","publishdate":"2022-07-17T15:32:46+08:00","relpermalink":"/post/tips/tips8/","section":"post","summary":"懂得，是一种难言的柔情，入心入肺,入骨入髓;懂得，即使不言不语，即使山高水远，彼此的心依然贴近，惺惺相惜没有离。懂得，是发自内心的声音！ 有些人，无需相识，却能通过一段话、一篇字明白彼此的心情。虽然隔着一张屏，一本书，一页纸，因为懂得，所以，她就是那个可以走进自己内心深处的人。\n有些情，无需轰轰烈烈，却能深深铭记在心底一辈子。虽然时光荏苒，青春不在，因为懂得，所以他（她）依然是那个不管是开心或是悲伤都可以在心底温情拥抱的人。\n然而，在我们漫长的一生里，又会遇见几个懂自己的人，就算是遇见了，又会有几个真正愿意懂自己的。这样的人，如果遇到了，或男或女，只需一人便足够了。真正的懂得，不是相邀，也不是牵引，更不是逼迫，而是实实在在自然而然的明白，这样的明白，无关风月，无关功利，甚至无关风雨也无关晴天。\n真正的懂得，不必言语，不必刻意，有时，只需浅浅一个微笑。真正的懂得，不必解释，不必逃避，有时，只需轻轻的一声呼唤。真正的懂得是一种心情，一种欣赏，更是一种心灵的默契。\n懂得，是无声的，也是有声的。每当你开心时，忧伤时，伪装时，失落时，流泪时，甚至你对生活不满抱怨时，无需多言，因为他(她)会说出那句足以让你感动流泪话语：“我知道，我懂得，我明白”。这是一句比爱和喜欢更深情的表白。\n","tags":["tips"],"title":"＂懂你＂比喜欢你更重要","type":"post"},{"authors":null,"categories":null,"content":"观物 以理观物，看到事物的本质 本性观物，知晓事物的表现 以命观物，知晓过去和未来 上好义则下好义，上好利则下必好利 ","date":1658042659,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"d09310f35a06b8b33d99957b11b3f79d","permalink":"https://blog.cuile.com/post/tips/tips7/","publishdate":"2022-07-17T15:24:19+08:00","relpermalink":"/post/tips/tips7/","section":"post","summary":"观物 以理观物，看到事物的本质 本性观物，知晓事物的表现 以命观物，知晓过去和未来 上好义则下好义，上好利则下必好利","tags":["tips"],"title":"渔樵问对","type":"post"},{"authors":null,"categories":null,"content":" 明拍马屁 - 先明夸 暗拍马屁 - 再谈一路走来的心得 ","date":1657680709,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"0de87d0ff004997774f5adbadc402a97","permalink":"https://blog.cuile.com/post/tips/tips6/","publishdate":"2022-07-13T10:51:49+08:00","relpermalink":"/post/tips/tips6/","section":"post","summary":" 明拍马屁 - 先明夸 暗拍马屁 - 再谈一路走来的心得 ","tags":["tips"],"title":"如何不尬聊","type":"post"},{"authors":null,"categories":null,"content":"仁义礼智信，温良恭俭让，忠孝廉耻勇。 ","date":1657678803,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"300bfc0e00860b4a5d62cdc5366f2c3b","permalink":"https://blog.cuile.com/post/tips/tips5/","publishdate":"2022-07-13T10:20:03+08:00","relpermalink":"/post/tips/tips5/","section":"post","summary":"仁义礼智信，温良恭俭让，忠孝廉耻勇。","tags":["tips"],"title":"传统美德","type":"post"},{"authors":null,"categories":null,"content":"仗义每多屠狗辈，负心多是读书人。[1]\n参考 [1] 百度百科\n","date":1656297518,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"9faa2059be8c408cf79a11f87b2d642d","permalink":"https://blog.cuile.com/post/tips/tips4/","publishdate":"2022-06-27T10:38:38+08:00","relpermalink":"/post/tips/tips4/","section":"post","summary":"仗义每多屠狗辈，负心多是读书人。[1]\n参考 [1] 百度百科\n","tags":["tips"],"title":"俗话说","type":"post"},{"authors":null,"categories":null,"content":"生成新的 SSH Key ssh-keygen -t rsa -b 4096 -C \u0026#34;your_email@example.com\u0026#34; ... Enter a file in which to save the key (/home/you/.ssh/algorithm): \u0026lt;key_name\u0026gt; Enter passphrase (empty for no passphrase): [输入密码] Enter same passphrase again: [再次输入密码] 将新的 SSH Key 添加到 Github 将公钥文件的内容COPY出来 cat ~/.ssh/\u0026lt;key_name\u0026gt;.pub Github.com -\u0026gt; “Settings” -\u0026gt; “SSH and GPG keys” -\u0026gt; “New SSH key” Title : 为新密钥添加描述性标签 Key : 粘贴COPY的公钥内容\n“Add SSH key” 使用 SSH 连接到 Github ssh config cd ~/.ssh # 设置访问权限 chmod 600 \u0026lt;key_name\u0026gt; # 生成SSH配置文件 cat \u0026gt; config \u0026lt;\u0026lt; EOF Host github.com Hostname ssh.github.com Port 443 IdentityFile ~/.ssh/\u0026lt;key_name\u0026gt; UpdateHostKeys yes Compression yes User git EOF Improving Git protocol security on GitHub - The GitHub Blog 连接测试 ssh -T git@github.com ... Are you sure you want to continue connecting (yes/no)? \u0026lt;yes\u0026gt; ... Hi \u0026lt;username\u0026gt;! You\u0026#39;ve successfully authenticated, but GitHub does not provide shell access. 自动验证 如果找不到软件，直接下载安装 或 更换软件源 Linux 版本库管理\n# debian apt install -y keychain # centos yum install -y keychain # alpine linux apk add keychain # debian or centos in ~/.bashrc or ~/.bash_profile # alpine linux in /etc/profile.d/30user.sh echo \u0026#34;eval `keychain --eval ~/.ssh/\u0026lt;key_name\u0026gt;`\u0026#34; \u0026gt;\u0026gt; ~/.bashrc ... * Adding 1 ssh key(s): /home/\u0026lt;username\u0026gt;/.ssh/\u0026lt;key_name\u0026gt; * ssh-add: Identities added: /home/\u0026lt;username\u0026gt;/.ssh/\u0026lt;key_name\u0026gt; Generating a new SSH key and adding it to the ssh-agent Funtoo Keychain Project ","date":1655810404,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"e8eaf3a0969b364f0bb9880bda126c19","permalink":"https://blog.cuile.com/post/git/connect_with_ssh/","publishdate":"2022-06-21T19:20:04+08:00","relpermalink":"/post/git/connect_with_ssh/","section":"post","summary":"生成新的 SSH Key ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" ... Enter a file in which to save the key (/home/you/.ssh/algorithm): \u003ckey_name\u003e Enter passphrase (empty for no passphrase): [输入密码] Enter same passphrase again: [再次输入密码] 将新的 SSH Key 添加到 Github 将公钥文件的内容COPY出来 cat ~/.ssh/\u003ckey_name\u003e.pub Github.com -\u003e “Settings” -\u003e “SSH and GPG keys” -\u003e “New SSH key” Title : 为新密钥添加描述性标签 Key : 粘贴COPY的公钥内容\n“Add SSH key” 使用 SSH 连接到 Github ssh config cd ~/.ssh # 设置访问权限 chmod 600 \u003ckey_name\u003e # 生成SSH配置文件 cat \u003e config \u003c\u003c EOF Host github.com Hostname ssh.github.com Port 443 IdentityFile ~/.ssh/\u003ckey_name\u003e UpdateHostKeys yes Compression yes User git EOF Improving Git protocol security on GitHub - The GitHub Blog 连接测试 ssh -T git@github.com ... Are you sure you want to continue connecting (yes/no)? \u003cyes\u003e ... Hi \u003cusername\u003e! You've successfully authenticated, but GitHub does not provide shell access. 自动验证 如果找不到软件，直接下载安装 或 更换软件源 Linux 版本库管理\n","tags":["ssh","keychain","github","git"],"title":"使用 SSH 连接 Github","type":"post"},{"authors":null,"categories":null,"content":"在 Alpine 上安装 Docker 真是一件让人感觉非常愉快的事情，因为过程非常简单。\n修改 apk 源 $ nano /etc/apk/repositories 因为 docker 在社区的库里，所以要打开 community 的源。\n#/media/cdrom/apks http://mirrors.tuna.tsinghua.edu.cn/alpine/v3.16/main http://mirrors.tuna.tsinghua.edu.cn/alpine/v3.16/community #http://mirrors.tuna.tsinghua.edu.cn/alpine/edge/main #http://mirrors.tuna.tsinghua.edu.cn/alpine/edge/community #http://mirrors.tuna.tsinghua.edu.cn/alpine/edge/testing 安装 Docker $ apk update $ apk add docker docker-cli-compose # 这里要特别注意，docker compose 的包名在 Alpine 里是 docker-cli-compose，不是 docker-compose-plugin。 # docker-compose 包是 compose 的独立安装包，官方已经不再支持这种安装方式。 ... $ docker -v Docker version 20.10.16, build aa7e414fdcb23a66e8fabbef0a560ef1769eace5 $ docker compose version Docker Compose version v2.12.2 配置 Docker (CentOS 7 | Rocky 9) 安装 Docker\n启动 Docker # 引导时启动 $ rc-update add docker boot # 启动服务 $ rc-service docker start 测试 $ docker run hello-world ","date":1655626086,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"2215b7cbda2d9130629998de90fef4a2","permalink":"https://blog.cuile.com/post/container/docker_install_alpine_linux/","publishdate":"2022-06-19T16:08:06+08:00","relpermalink":"/post/container/docker_install_alpine_linux/","section":"post","summary":"在 Alpine 上安装 Docker 真是一件让人感觉非常愉快的事情，因为过程非常简单。\n修改 apk 源 $ nano /etc/apk/repositories 因为 docker 在社区的库里，所以要打开 community 的源。\n#/media/cdrom/apks http://mirrors.tuna.tsinghua.edu.cn/alpine/v3.16/main http://mirrors.tuna.tsinghua.edu.cn/alpine/v3.16/community #http://mirrors.tuna.tsinghua.edu.cn/alpine/edge/main #http://mirrors.tuna.tsinghua.edu.cn/alpine/edge/community #http://mirrors.tuna.tsinghua.edu.cn/alpine/edge/testing 安装 Docker $ apk update $ apk add docker docker-cli-compose # 这里要特别注意，docker compose 的包名在 Alpine 里是 docker-cli-compose，不是 docker-compose-plugin。 # docker-compose 包是 compose 的独立安装包，官方已经不再支持这种安装方式。 ... $ docker -v Docker version 20.10.16, build aa7e414fdcb23a66e8fabbef0a560ef1769eace5 $ docker compose version Docker Compose version v2.12.2 配置 Docker (CentOS 7 | Rocky 9) 安装 Docker\n","tags":["linux","Alpine linux","Docker"],"title":"Alpine Linux 安装 Docker","type":"post"},{"authors":null,"categories":null,"content":"网卡静态地址 ~# nano /etc/network/interfaces auto lo iface lo inet loopback auto eth0 iface eth0 inet static address 192.168.10.16/24 gateway 192.168.10.10 hostname alpine 配置 DNS # nano /etc/resolv.conf nameserver 114.114.114.114 重启网络 ~# service networking restart ","date":1655623518,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"a955946ab9d04e61de33ce7943b49f84","permalink":"https://blog.cuile.com/post/alpine_linux/network/","publishdate":"2022-06-19T15:25:18+08:00","relpermalink":"/post/alpine_linux/network/","section":"post","summary":"网卡静态地址 ~# nano /etc/network/interfaces auto lo iface lo inet loopback auto eth0 iface eth0 inet static address 192.168.10.16/24 gateway 192.168.10.10 hostname alpine 配置 DNS # nano /etc/resolv.conf nameserver 114.114.114.114 重启网络 ~# service networking restart ","tags":["linux","network","Alpine linux"],"title":"Alpine Linux 网络设置","type":"post"},{"authors":null,"categories":null,"content":"特点：\n小巧：基于musl libc 和 busybox，和 busybox一样小巧，最小的Docker镜像只有5MB。 安全：面向安全的轻量发行版 简单：提供APK包管理工具，软件的搜索、安装、删除、升级都非常方便。 适合容器使用：由于小巧、功能完备，非常适合作为容器的基础镜像。 不同版本：\nSTANDARD：最小的可启动镜像，需要网络才能安装。带有Intel, AMD等CPU的微代码。 VIRTUAL：与STANDARD类似，但更小，更适合虚拟系统使用。 EXTENDED：包括最常用的软件包。适用于路由器和服务器。从RAM运行。扩展版本，带有更多软件包。 XEN：内置XEN Hypervisor支持。 NETBOOT：netboot的内核、initramfs和modloop。 RASPBERRY PI：带有树莓派内核的版本。 GENERIC ARM：带有ARM内核，带有uboot加载器。 MINI ROOT FILESYSTEM：最小系统版本，仅包含内核，只用于构建Docker镜像。 1. 准备系统 Alpine 有许多版本，其中 VIRTUAL 是专门针对虚拟环境优化过的，所以主要使用这个版本来安装。\nhttps://www.alpinelinux.org/downloads/\n2. 登录 ... # 使用启动盘启动后，直接使用 root 登录系统 localhost login: root 3. 安装 ... localhost:~# setup-alpine # 选择键盘布局 # 这里两个都选 cn 或都不选 ... Select keyboard layout: [none] cn ... Select variant (or \u0026#39;abort\u0026#39;): cn # 设置主机名 ... Enter system hostname (fully qualified form, e.g. \u0026#39;foo.example.org\u0026#39;) [localhost] home # 设置网络 ... Which one do you want to initialize? (or \u0026#39;?\u0026#39; or \u0026#39;done\u0026#39;) [eth0] eth0 Ip address for eth0? (or \u0026#39;dhcp\u0026#39;, \u0026#39;none\u0026#39;, \u0026#39;?\u0026#39;) [dhcp] dhcp Do you want to do any manual network configuration? (y/n) [n] n # or 手动输入IP地址 Ip address for eth0? (or \u0026#39;dhcp\u0026#39;, \u0026#39;none\u0026#39;, \u0026#39;?\u0026#39;) [dhcp] 192.168.10.16/24 Gateway? (or \u0026#39;none\u0026#39;) [none] 192.168.10.10 Do you want to do any manual network configuration? (y/n) [n] n DNS domain name? (e.g \u0026#39;bar.com\u0026#39;) DNS nameserver(s)? 114.114.114.114 # 设置密码 ... New password: ... Retype password: # 设置时区 # PRC 代理中国，也可以输入 Asia/，再输入 Shanghai ... Which timezone are you in? (\u0026#39;?\u0026#39; for list) [UTC] PRC # 设备代理 ... HTTP/FTP proxy URL? (e.g. \u0026#39;http://proxy:8080\u0026#39;, or \u0026#39;none\u0026#39;) [none] none # 设置更新源 # f 是自动测试并选择最快的源，建议使用 ... Enter mirror number (1-74) or URL to add (or r/f/e/done) [1] f # Setup a user? (enter a lower-case loginname, or \u0026#39;no\u0026#39;) [no] no # 设置ssh服务 Which ssh server? (\u0026#39;openssh\u0026#39;, \u0026#39;dropbear\u0026#39;, or \u0026#39;none\u0026#39;) [openssh] openssh # 这里一定要输入 yes # 许多教程都说 Alpine 默认没有远程登录，都上手动修改，其实是可以在安装时就设备好的 Allow root ssh login? (\u0026#39;?\u0026#39; for help) [prohibit-password] yes Enter ssh key or URL for root (or \u0026#39;none\u0026#39;) [none] none # 设置磁盘 ... Which disk(s) would you like to use? (or \u0026#39;?\u0026#39; for help or \u0026#39;none\u0026#39;) [none] sda ... How would you like to use it? (\u0026#39;sys\u0026#39;, \u0026#39;data\u0026#39;, \u0026#39;crypt\u0026#39;, \u0026#39;lvm\u0026#39; or \u0026#39;?\u0026#39; for help) [?] sys ... WARNING: Erase the aboue disk(s) and continue? (y/n) [n] y ... Installation is complete. Please reboot. # 到这里安装全部完成 3.1. 自动安装 # 准备应答文件 Answer Files 4. 命令重启电脑 home:~# reboot 5. 关闭防火墙 home:~# rc-service iptables stop home:~# rc-update del iptables ","date":1655610415,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"20de0daa75a29a19c5cc0a0458446487","permalink":"https://blog.cuile.com/post/alpine_linux/install/","publishdate":"2022-06-19T11:46:55+08:00","relpermalink":"/post/alpine_linux/install/","section":"post","summary":"特点：\n小巧：基于musl libc 和 busybox，和 busybox一样小巧，最小的Docker镜像只有5MB。 安全：面向安全的轻量发行版 简单：提供APK包管理工具，软件的搜索、安装、删除、升级都非常方便。 适合容器使用：由于小巧、功能完备，非常适合作为容器的基础镜像。 不同版本：\nSTANDARD：最小的可启动镜像，需要网络才能安装。带有Intel, AMD等CPU的微代码。 VIRTUAL：与STANDARD类似，但更小，更适合虚拟系统使用。 EXTENDED：包括最常用的软件包。适用于路由器和服务器。从RAM运行。扩展版本，带有更多软件包。 XEN：内置XEN Hypervisor支持。 NETBOOT：netboot的内核、initramfs和modloop。 RASPBERRY PI：带有树莓派内核的版本。 GENERIC ARM：带有ARM内核，带有uboot加载器。 MINI ROOT FILESYSTEM：最小系统版本，仅包含内核，只用于构建Docker镜像。 1. 准备系统 Alpine 有许多版本，其中 VIRTUAL 是专门针对虚拟环境优化过的，所以主要使用这个版本来安装。\nhttps://www.alpinelinux.org/downloads/\n2. 登录 ... # 使用启动盘启动后，直接使用 root 登录系统 localhost login: root 3. 安装 ... localhost:~# setup-alpine # 选择键盘布局 # 这里两个都选 cn 或都不选 ... Select keyboard layout: [none] cn ... Select variant (or 'abort'): cn # 设置主机名 ... Enter system hostname (fully qualified form, e.g. 'foo.example.org') [localhost] home # 设置网络 ... Which one do you want to initialize? (or '?' or 'done') [eth0] eth0 Ip address for eth0? (or 'dhcp', 'none', '?') [dhcp] dhcp Do you want to do any manual network configuration? (y/n) [n] n # or 手动输入IP地址 Ip address for eth0? (or 'dhcp', 'none', '?') [dhcp] 192.168.10.16/24 Gateway? (or 'none') [none] 192.168.10.10 Do you want to do any manual network configuration? (y/n) [n] n DNS domain name? (e.g 'bar.com') DNS nameserver(s)? 114.114.114.114 # 设置密码 ... New password: ... Retype password: # 设置时区 # PRC 代理中国，也可以输入 Asia/，再输入 Shanghai ... Which timezone are you in? ('?' for list) [UTC] PRC # 设备代理 ... HTTP/FTP proxy URL? (e.g. 'http://proxy:8080', or 'none') [none] none # 设置更新源 # f 是自动测试并选择最快的源，建议使用 ... Enter mirror number (1-74) or URL to add (or r/f/e/done) [1] f # Setup a user? (enter a lower-case loginname, or 'no') [no] no # 设置ssh服务 Which ssh server? ('openssh', 'dropbear', or 'none') [openssh] openssh # 这里一定要输入 yes # 许多教程都说 Alpine 默认没有远程登录，都上手动修改，其实是可以在安装时就设备好的 Allow root ssh login? ('?' for help) [prohibit-password] yes Enter ssh key or URL for root (or 'none') [none] none # 设置磁盘 ... Which disk(s) would you like to use? (or '?' for help or 'none') [none] sda ... How would you like to use it? ('sys', 'data', 'crypt', 'lvm' or '?' for help) [?] sys ... WARNING: Erase the aboue disk(s) and continue? (y/n) [n] y ... Installation is complete. Please reboot. # 到这里安装全部完成 3.1. 自动安装 # 准备应答文件 Answer Files 4. 命令重启电脑 home:~# reboot 5. 关闭防火墙 home:~# rc-service iptables stop home:~# rc-update del iptables ","tags":["vm","qmue\\kvm","linux","proxmoxve","Alpine linux"],"title":"虚拟机安装 Alpine Linux 3.16","type":"post"},{"authors":null,"categories":null,"content":"为家里的微形PVE服务器买了山克的UPS，发现与 linux 连接使用还是需要安装一下的，而且市场上基本都是 OEM 的产品，所以操作过程通用\n记录Gen8安装PVE+DSM+win10+UPS的一些过程 ViewPower中文使用手册 ","date":1655544915,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"d55760a29f1b8e3a1426e21e4b78047f","permalink":"https://blog.cuile.com/post/ups/ups_install/","publishdate":"2022-06-18T17:35:15+08:00","relpermalink":"/post/ups/ups_install/","section":"post","summary":"为家里的微形PVE服务器买了山克的UPS，发现与 linux 连接使用还是需要安装一下的，而且市场上基本都是 OEM 的产品，所以操作过程通用\n记录Gen8安装PVE+DSM+win10+UPS的一些过程 ViewPower中文使用手册 ","tags":["UPS"],"title":"山克 UPS 安装手册","type":"post"},{"authors":null,"categories":null,"content":"0、基础设置 # 查看代理 git config --global --get http.proxy git config --global --get https.proxy # 设置代理 git config --global http.proxy http://[username:passwrod@]ip or URL:port git config --global https.proxy http://[username:passwrod@]ip or URL:port # 取消代理 git config --global --unset http.proxy git config --global --unset https.proxy # 只代理github.com git config --global --get http.https://github.com.proxy git config --global --get https.https://github.com.proxy git config --global http.https://github.com.proxy http://[username:passwrod@]ip or URL:port git config --global https.https://github.com.proxy http://[username:passwrod@]ip or URL:port git config --global --unset http.https://github.com.proxy git config --global --unset https.https://github.com.proxy # push设置 git config --global push.default simple 【Git】git push.default 简析 - 简书 Git忽略文件.gitignore详解— 1、项目 1.1 克隆项目 git clone https://xxxx@bitbucket.org/xxxx/xxxx.git # or git clone git@github.com:xxxxx/xxxxx.git # 克隆指定分支，到指定目录 git clone -b branch-name repo path git config user.name \u0026#34;Your Name\u0026#34; git config user.email you@example.com 1.2 推送新项目到github 先在githubh上创建好项目\ngit init git add . git status -s git config user.name \u0026#34;Your Name\u0026#34; git config user.email you@example.com git commit --amend --reset-author git commit -m \u0026#34;first commit\u0026#34; git remote add origin git@github.com:Youname/repo_name.git git push -u origin master 1.3 导出 git archive --format zip -0 \\ # 使用zip格式，不压缩 --output output.zip \\ # 输出的文件名 --remote git@github.com:Cuile/NMP.git \\ # 远程项目地址 master \\ # 分支名 ./ # 输出到当前目录 2、分支 2.1 本地分支操作 # 拉取 git fetch origin branch-name git pull origin branch-name # 强制覆盖本地分支 git fetch --all git reset --hard origin/branch-name git pull # 查看分支 git branch -a # 创建分支 # 只创建一个分支 git branch branch-name # 创建一个分支并切换到该分支 git checkout -b branch-name # 切换分支 git checkout branch-name # 删除分支 git branch -d branch-name # 发布本地分支 git push 远程主机名 本地分支名:远程分支名 # 合并分支 # 将 a 分支合并到 b 分支 git checkout b git merge a git push # 推送 # 查看本地项目状态 git status -s # 添加文件 | 添加目录 | 添加所有内容 git add file | dir | . # 删除 add 的文件 git rm [-r] --cached file | . # 提交已修改的文件，但不提交未跟踪的文件 git commit -m \u0026#34;message\u0026#34; --untracked-files=no # 提交已删除的文件 git commit -m \u0026#34;message\u0026#34; -a # 推送到远程库 git push 2.2 远程分支操作 # 查看远程仓库地址 git remote -v # 更新远程分支列表 # 如果你的 remote branch 不是在 origin 下，把 origin 换成你的名字 # --prune 删除远程已经删除的分支 git remote update origin --prune 2.3 删除本地文件后，从远端重新拉取最新版本 git提示： up-to-date. 但未从远端得到文件\n# 1 查看本地分支是否发生变化 git branch -a # 2 如本地库处于另一个分支中，需将本地分支重置回原分支 git checkout branch-name git reset --hard # 3 如本地分支没有变化，则强行 pull 覆盖本地文件 git fetch --all git reset --hard origin/branch-name git pull 2.4 在本地修改分支名称 # 查看本地分支 git branch -a # 切换到要重命名的分支 git checkout branch-name # 重命名分支 git branch -m new-branch-name # 上传新分支 git push origin -u new-branch-name # 删除原分支 git push origin --delete old-branch-name 2.5 更改本地分支对应的远程分支 # 拉取远程最新分支信息 git fetch origin # 重命名本地分支 git branch -m old-branch-name new-branch-name # 设置新的远程分支 git branch -u origin/new-branch-name # or git branch --set-upstream-to=origin/new-branch-name old-branch-name # 验证配置结果 git branch -vv # 删除旧的远程跟踪分支 git branch -dr origin/old-branch-name ```--- ## 3、标签 ```bash # 查看现有的标签 git tag # 给最新的提交打标签 git tag 1.0 # 推送所有标签 git push --tags ```--- ","date":1652682747,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"8f83dccee36d907ee250d56b03e42fc4","permalink":"https://blog.cuile.com/post/git/git_cli/","publishdate":"2022-05-16T14:32:27+08:00","relpermalink":"/post/git/git_cli/","section":"post","summary":"0、基础设置 # 查看代理 git config --global --get http.proxy git config --global --get https.proxy # 设置代理 git config --global http.proxy http://[username:passwrod@]ip or URL:port git config --global https.proxy http://[username:passwrod@]ip or URL:port # 取消代理 git config --global --unset http.proxy git config --global --unset https.proxy # 只代理github.com git config --global --get http.https://github.com.proxy git config --global --get https.https://github.com.proxy git config --global http.https://github.com.proxy http://[username:passwrod@]ip or URL:port git config --global https.https://github.com.proxy http://[username:passwrod@]ip or URL:port git config --global --unset http.https://github.com.proxy git config --global --unset https.https://github.com.proxy # push设置 git config --global push.default simple 【Git】git push.default 简析 - 简书 Git忽略文件.gitignore详解— 1、项目 1.1 克隆项目 git clone https://xxxx@bitbucket.org/xxxx/xxxx.git # or git clone git@github.com:xxxxx/xxxxx.git # 克隆指定分支，到指定目录 git clone -b branch-name repo path git config user.name \"Your Name\" git config user.email you@example.com 1.2 推送新项目到github 先在githubh上创建好项目\n","tags":["CLI","git"],"title":"Git 命令行","type":"post"},{"authors":null,"categories":null,"content":"保持后台进程运行 设置 \u0026gt; 应用启动管理 \u0026gt; 关闭该应用的自动管理开关，并在弹框中勾选允许后台活动。 设置 \u0026gt; 电池优化 \u0026gt; 点击不允许 \u0026gt; 选择所有应用 \u0026gt; 找到无法后台运行的应用 \u0026gt; 设置为不允许。 设置 \u0026gt; 电池，关闭省电模式开关。 设置 \u0026gt; 电池 \u0026gt; 更多电池设置，开启休眠时始终保持网络连接开关。 打开应用 \u0026gt; 进入多任务界面 \u0026gt; 下拉选中的应用卡片，左上角出现加锁图标 \u0026gt; 点击清理图标，清理其他不经常使用的应用。 手机管家 \u0026gt; 设置，打开智能维护开关以确保良好的应用使用体验。 ","date":1652670599,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"0188e71896b7abca18e86062888dd3bb","permalink":"https://blog.cuile.com/post/harmonyos_optimization/","publishdate":"2022-05-16T11:09:59+08:00","relpermalink":"/post/harmonyos_optimization/","section":"post","summary":"保持后台进程运行 设置 \u003e 应用启动管理 \u003e 关闭该应用的自动管理开关，并在弹框中勾选允许后台活动。 设置 \u003e 电池优化 \u003e 点击不允许 \u003e 选择所有应用 \u003e 找到无法后台运行的应用 \u003e 设置为不允许。 设置 \u003e 电池，关闭省电模式开关。 设置 \u003e 电池 \u003e 更多电池设置，开启休眠时始终保持网络连接开关。 打开应用 \u003e 进入多任务界面 \u003e 下拉选中的应用卡片，左上角出现加锁图标 \u003e 点击清理图标，清理其他不经常使用的应用。 手机管家 \u003e 设置，打开智能维护开关以确保良好的应用使用体验。 ","tags":["HarmonyOS"],"title":"鸿蒙系统优化","type":"post"},{"authors":null,"categories":null,"content":"火炮 开局先找炮位，最好能把车头垫起来。 到达炮位后，预瞄全国点位。了解哪些点能打到，哪些打不到。 开局先瞄传统点位，收过路费。 不瞄与瞄准线垂直运动的车。 不瞄轻坦，视野跟着重坦走。 瞄准速度比装填速度重要。 用 Shift 瞄准后，按 G 切换到弹道视角，可提高命中率。 结合炮弹飞行时间，预留瞄准余量。 利用装填间隙转换炮位。 打击优先级： 火炮 \u0026gt; 反坦克炮 \u0026gt; 重坦 \u0026gt; 中坦 \u0026gt; 轻坦 远端 \u0026gt; 近端 血量少 \u0026gt; 血量多 敌方进入最大侦测范围，与你之间少于二辆已方车辆时，就应考虑转移。 战地升级 近战型选“瞄准圈缩小”，远程型选“减少瞄准时间”。 突击型选“维持速度”。 ","date":1652423422,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"3c3e0147a7a620e5e5aaacbf80465ac7","permalink":"https://blog.cuile.com/post/games/wot_tips/","publishdate":"2022-05-13T14:30:22+08:00","relpermalink":"/post/games/wot_tips/","section":"post","summary":"火炮 开局先找炮位，最好能把车头垫起来。 到达炮位后，预瞄全国点位。了解哪些点能打到，哪些打不到。 开局先瞄传统点位，收过路费。 不瞄与瞄准线垂直运动的车。 不瞄轻坦，视野跟着重坦走。 瞄准速度比装填速度重要。 用 Shift 瞄准后，按 G 切换到弹道视角，可提高命中率。 结合炮弹飞行时间，预留瞄准余量。 利用装填间隙转换炮位。 打击优先级： 火炮 \u003e 反坦克炮 \u003e 重坦 \u003e 中坦 \u003e 轻坦 远端 \u003e 近端 血量少 \u003e 血量多 敌方进入最大侦测范围，与你之间少于二辆已方车辆时，就应考虑转移。 战地升级 近战型选“瞄准圈缩小”，远程型选“减少瞄准时间”。 突击型选“维持速度”。 ","tags":["火炮","坦克世界","游戏"],"title":"坦克使用手册","type":"post"},{"authors":null,"categories":null,"content":"尝试使用 Ubuntu 的 Snap 后，发现真的非常方便。\n看过Snap的介绍以后，发现Snap的沙盒理念非常先进，在存储基本不成问题背景下，会系统环境的影响更小。\n而且docker-compose命令也会一起安装，更是方便。\n1.安装 $ sudo snap install docker 2.设置 # 设置开机启动 $ sudo snap start docker --enable # 确认服务状态 $ sudo snap services docker # 查看服务详情 $ service snap.docker.dockerd status 使用sudo安装后要注意以后调用时，都要使用sudo命令前缀。\n3.其它 # 安装目录 /snap/docker/current # 服务启动配置文件 /etc/systemd/system/snap.docker.dockerd.service # 配套 AppArmor 配置文件 /var/lib/snapd/apparmor/profiles/snap.docker.docker /var/lib/snapd/apparmor/profiles/snap.docker.dockerd # 默认 Unix Socket 文件路径 unix:///var/snap/docker/current/run/docker/libcontainerd/docker-containerd.sock 4.参考文献 Docker 安装指南\n","date":1652265708,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"3d604d14469b3dbdb0e29aafc577a11e","permalink":"https://blog.cuile.com/post/container/docker_install_snap/","publishdate":"2022-05-11T18:41:48+08:00","relpermalink":"/post/container/docker_install_snap/","section":"post","summary":"尝试使用 Ubuntu 的 Snap 后，发现真的非常方便。\n看过Snap的介绍以后，发现Snap的沙盒理念非常先进，在存储基本不成问题背景下，会系统环境的影响更小。\n而且docker-compose命令也会一起安装，更是方便。\n1.安装 $ sudo snap install docker 2.设置 # 设置开机启动 $ sudo snap start docker --enable # 确认服务状态 $ sudo snap services docker # 查看服务详情 $ service snap.docker.dockerd status 使用sudo安装后要注意以后调用时，都要使用sudo命令前缀。\n3.其它 # 安装目录 /snap/docker/current # 服务启动配置文件 /etc/systemd/system/snap.docker.dockerd.service # 配套 AppArmor 配置文件 /var/lib/snapd/apparmor/profiles/snap.docker.docker /var/lib/snapd/apparmor/profiles/snap.docker.dockerd # 默认 Unix Socket 文件路径 unix:///var/snap/docker/current/run/docker/libcontainerd/docker-containerd.sock 4.参考文献 Docker 安装指南\n","tags":["Snap","Docker"],"title":"使用 Snap 安装 Docker","type":"post"},{"authors":null,"categories":null,"content":"1 能力是否特殊？ 经济制约性 因果含糊性 路径稀缺性 2 能力是否核心？ 是否受到加持 是否适用环境 ","date":1652174932,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"f6b23258fdde3db9ca25ec2bf63373bb","permalink":"https://blog.cuile.com/post/tips/tips3/","publishdate":"2022-05-10T17:28:52+08:00","relpermalink":"/post/tips/tips3/","section":"post","summary":"1 能力是否特殊？ 经济制约性 因果含糊性 路径稀缺性 2 能力是否核心？ 是否受到加持 是否适用环境 ","tags":["tips"],"title":"能力的评价","type":"post"},{"authors":null,"categories":null,"content":" 见微知著，是对事物发展规律的洞察。 触类旁通，是对事物内在逻辑的洞悉。 ","date":1652174294,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"be1862b4675be0fe1a96fdc278436f70","permalink":"https://blog.cuile.com/post/tips/tips2/","publishdate":"2022-05-10T17:18:14+08:00","relpermalink":"/post/tips/tips2/","section":"post","summary":" 见微知著，是对事物发展规律的洞察。 触类旁通，是对事物内在逻辑的洞悉。 ","tags":["tips"],"title":"小差别","type":"post"},{"authors":null,"categories":null,"content":" 交浅语深，动机不良。 口说是非，心态不正。 刻薄挑剔，人际不和。 言高行低，品行不端。 至亲成仇，情感不真。 违规为乐，习惯不好。 酒后失控，心态不稳。 ","date":1652173799,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"0a138d921047fd56638a20d205ec4756","permalink":"https://blog.cuile.com/post/tips/tips1/","publishdate":"2022-05-10T17:09:59+08:00","relpermalink":"/post/tips/tips1/","section":"post","summary":" 交浅语深，动机不良。 口说是非，心态不正。 刻薄挑剔，人际不和。 言高行低，品行不端。 至亲成仇，情感不真。 违规为乐，习惯不好。 酒后失控，心态不稳。 ","tags":["tips"],"title":"七态为品","type":"post"},{"authors":null,"categories":null,"content":"1 准备环境 开发环境还是建议使用 Docker 来搭建，方便快捷。 不过 Django 的官方镜像已经弃用了，官方建议新版本使用 Python 官方提供的镜像来构建。\nDocker ┗ Python == 3.9.12-buster ┗ Django == 3.2.13 LTS ┗ django-simpleui==2022.11.30 可以参考[https://github.com/Cuile/Docker-to-Python/tree/master/Django]，提供了 Dockerfil、yml 文件，还提供全套使用命令。\n2 创建项目 # 创建项目 $ django-admin startproject mysite $ cd mysite # 生成项目 $ python manage.py startapp websrc # 运行项目测试 $ python manage.py runserver 0.0.0.0:80 修改配置后，建议使用项目调试的方式启动，不要使用快捷命令，项目正常启动稳定运行后，再使用快捷命令。\n# settings.py # 任意地址都可以访问 Django ALLOWED_HOSTS = [\u0026#39;*\u0026#39;] # 添加 simpleui 模板，和创建的项目 INSTALLED_APPS = [ \u0026#39;simpleui\u0026#39;, \u0026#39;websrc\u0026#39;, \u0026#39;......\u0026#39;, ] # 这个与多语种有关，在项目初始阶段不要修改，后续添加了多语种支持再修改，否则会导致无法启动。 # 具体参考(http://www.i18nguy.com/unicode/language-identifiers.html)，有个傻逼教程，上来就改成 zh-CN 果然导致项目无法正常启动。 # 正确的简体中文代码如下： LANGUAGE_CODE = \u0026#39;zh-Hans\u0026#39; # 时区，上海就代表北京时间，这个不能写错，写错就启动不了 # 具体参考(https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)，这里是标准的，有个傻逼教程非给写成 Asia/Beijing 导致怎么都起不来，太TMD的二逼了。 # 正解的北京时间时区如下： TIME_ZONE = \u0026#39;Asia/Shanghai\u0026#39; # 启动翻译，与上面的 LANGUAGE_CODE 设置相对应 USE_I18N = True # 启动格式控制 USE_L10N = True # 启动时区 USE_TZ = True 3 创建管理员账号 $ python manage.py createsuperuser Username: admin Email address: admin@example.com Password: ********** Password (again): ********* Superuser created successfully. 访问项目链接，比如\u0026#34;http://127.0.0.1:8000/admin/\n4 创建数据模型 4.1 编辑 models.py 文件，改变模型 ……\n4.2 为模型的改变生成迁移文件 $ python manage.py makemigrations websrc Migrations for \u0026#39;websrc\u0026#39;: polls/migrations/0001_initial.py - Create model Question - Create model Choice 可以查看生成的SQL语句\n$ python manage.py sqlmigrate websrc 0001 4.3 应用数据库迁移 $ python manage.py migrate Operations to perform: Apply all migrations: admin, auth, contenttypes, polls, sessions Running migrations: Rendering model states... DONE Applying websrc.0001_initial... OK 5 向管理页面加入数据模型 # websrc/admin.py from django.contrib import admin from .models import Question admin.site.register(Question) 6 Gunicorn 托管 Django 6.1 安装 Gunicorn 参考文档\nGunicorn-配置详解 6.2 收集静态文件 $ python manage.py collectstatic # 如果报错 django.core.exceptions.ImproperlyConfigured: You\u0026#39;re using the staticfiles app without having set the STATIC_ROOT setting to a filesystem path. 需要修改 settings.py ，添加 STATIC_ROOT\n# \u0026lt;myproject\u0026gt;/settings.py # STATICFILES_DIRS = [os.path.join(BASE_DIR, \u0026#34;static\u0026#34;), ] STATIC_ROOT = os.path.join(BASE_DIR, \u0026#34;static\u0026#34;) 如果你从 INSTALLED_APPS 中删除一个应用程序，最好使用 collectstatic –clear 选项来删除过时的静态文件。\n参考文档\nDjango - STATICFILES_DIRS - STATIC_ROOT 配置 6.3 设置静态文件路由 # \u0026lt;myproject\u0026gt;/urls.py ... urlpatterns = [ ... ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) 参考文档\n开发时提供静态文件服务 7 Supervisor 启动 Gunicorn 注意：使用 docker 时，要确保 nodaemon 选项为 true，否则 docker 不能正常启动\n[supervisord] nodaemon=true 参考文档\nUsing Supervisor with Docker ","date":1652171413,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"c88241fecb1dd918cffbdfeb71d2c98a","permalink":"https://blog.cuile.com/post/django/django_development_introduction/","publishdate":"2022-05-10T16:30:13+08:00","relpermalink":"/post/django/django_development_introduction/","section":"post","summary":"1 准备环境 开发环境还是建议使用 Docker 来搭建，方便快捷。 不过 Django 的官方镜像已经弃用了，官方建议新版本使用 Python 官方提供的镜像来构建。\nDocker ┗ Python == 3.9.12-buster ┗ Django == 3.2.13 LTS ┗ django-simpleui==2022.11.30 可以参考[https://github.com/Cuile/Docker-to-Python/tree/master/Django]，提供了 Dockerfil、yml 文件，还提供全套使用命令。\n2 创建项目 # 创建项目 $ django-admin startproject mysite $ cd mysite # 生成项目 $ python manage.py startapp websrc # 运行项目测试 $ python manage.py runserver 0.0.0.0:80 修改配置后，建议使用项目调试的方式启动，不要使用快捷命令，项目正常启动稳定运行后，再使用快捷命令。\n# settings.py # 任意地址都可以访问 Django ALLOWED_HOSTS = ['*'] # 添加 simpleui 模板，和创建的项目 INSTALLED_APPS = [ 'simpleui', 'websrc', '......', ] # 这个与多语种有关，在项目初始阶段不要修改，后续添加了多语种支持再修改，否则会导致无法启动。 # 具体参考(http://www.i18nguy.com/unicode/language-identifiers.html)，有个傻逼教程，上来就改成 zh-CN 果然导致项目无法正常启动。 # 正确的简体中文代码如下： LANGUAGE_CODE = 'zh-Hans' # 时区，上海就代表北京时间，这个不能写错，写错就启动不了 # 具体参考(https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)，这里是标准的，有个傻逼教程非给写成 Asia/Beijing 导致怎么都起不来，太TMD的二逼了。 # 正解的北京时间时区如下： TIME_ZONE = 'Asia/Shanghai' # 启动翻译，与上面的 LANGUAGE_CODE 设置相对应 USE_I18N = True # 启动格式控制 USE_L10N = True # 启动时区 USE_TZ = True 3 创建管理员账号 $ python manage.py createsuperuser Username: admin Email address: admin@example.com Password: ********** Password (again): ********* Superuser created successfully. 访问项目链接，比如\"http://127.0.0.1:8000/admin/\n","tags":["gunicorn","Supervisor","Python","docker","Django"],"title":"Docker 环境 Django 开发简介","type":"post"},{"authors":null,"categories":null,"content":"1、查看已安装的Python # 查看已安装的信息 $ yum info python3 # 查看python安装位置 $ whereis python3 2、卸载已安装的Python环境 # 卸载已安装的程序 $ yum erase python3 # 删除所有残余文件 $ whereis python3|xargs rm -frv # 查看现有的python $ whereis python3 3、yum安装依赖环境 $ yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel 4、官网下载Python3.9.12 $ yum -y install wget # 尽量使用国内镜像站点下载比较快 $ wget https://mirrors.huaweicloud.com/python/3.9.12/Python-3.9.12.tgz 5、创建安装目录 $ tar -zxvf Python-3.9.12.tgz -C ./ $ cd Python-3.9.12 $ mkdir /usr/local/python3 $ ./configure --prefix=/usr/local/python3.9.12 $ make \u0026amp;\u0026amp; make install 6、创建软链接 $ ln -s /usr/local/python3.9.12/bin/python3 /usr/bin/python3 $ ln -s /usr/local/python3.9.12/bin/pip3 /usr/bin/pip3 7、测试 $ python3 -V Python 3.9.12 $ pip3 -V pip 22.0.4 from /usr/local/python3.9.12/lib/python3.9/site-packages/pip (python 3.9) 8、pip升级、换源 # pip升级 $ python3 -m pip install --upgrade pip # pip换源 # 推荐使用清华的源，因为使用https协议 $ pip3 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple ","date":1651813887,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"e4b7fed7f1da8abbca74a06be74724b7","permalink":"https://blog.cuile.com/post/python/python3_install/","publishdate":"2022-05-06T13:11:27+08:00","relpermalink":"/post/python/python3_install/","section":"post","summary":"1、查看已安装的Python # 查看已安装的信息 $ yum info python3 # 查看python安装位置 $ whereis python3 2、卸载已安装的Python环境 # 卸载已安装的程序 $ yum erase python3 # 删除所有残余文件 $ whereis python3|xargs rm -frv # 查看现有的python $ whereis python3 3、yum安装依赖环境 $ yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel 4、官网下载Python3.9.12 $ yum -y install wget # 尽量使用国内镜像站点下载比较快 $ wget https://mirrors.huaweicloud.com/python/3.9.12/Python-3.9.12.tgz 5、创建安装目录 $ tar -zxvf Python-3.9.12.tgz -C ./ $ cd Python-3.9.12 $ mkdir /usr/local/python3 $ ./configure --prefix=/usr/local/python3.9.12 $ make \u0026\u0026 make install 6、创建软链接 $ ln -s /usr/local/python3.9.12/bin/python3 /usr/bin/python3 $ ln -s /usr/local/python3.9.12/bin/pip3 /usr/bin/pip3 7、测试 $ python3 -V Python 3.9.12 $ pip3 -V pip 22.0.4 from /usr/local/python3.9.12/lib/python3.9/site-packages/pip (python 3.9) 8、pip升级、换源 # pip升级 $ python3 -m pip install --upgrade pip # pip换源 # 推荐使用清华的源，因为使用https协议 $ pip3 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple ","tags":["pip","CentOS 7","Python"],"title":"CentOS 7 安装 Python3.9.12","type":"post"},{"authors":null,"categories":null,"content":"其实网上相关的文章已经非常多了，所以这篇文章的作用只是记录和明确一条确定可行的操作路径，为以后的操作节省时间，毕竟像我一样大部分人都不是专业的系统管理员，能够快速解决问题就可以了，并不想做过多的专业研究与探索。\n本操作手册是官方手册与网上手册的结合版本，集两家之所长，亲自操作可用。\nDebian # 安装 Docker 证书 sudo apt-get install -y ca-certificates curl sudo install -m 0755 -d /etc/apt/keyrings sudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc sudo chmod a+r /etc/apt/keyrings/docker.asc\\ sudo echo \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian $(. /etc/os-release \u0026amp;\u0026amp; echo \u0026#34;$VERSION_CODENAME\u0026#34;) stable\u0026#34; | sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null sudo apt-get update # 安装 Docker sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin # 启动 Docker sudo systemctl enable docker.service sudo systemctl start docker.service # 测试 sudo docker version \u0026gt; Client: Docker Engine - Community \u0026gt; ... \u0026gt; Server: Docker Engine - Community \u0026gt; ... sudo docker compose version \u0026gt; Docker Compose version v... # 使用非 root 用户管理 Docker # 创建 docker 用户组 sudo groupadd docker # 将当前用户添加到 docker 用户组 sudo usermod -aG docker $USER # 重启 # 再次测试 docker version \u0026gt; Client: Docker Engine - Community \u0026gt; ... \u0026gt; Server: Docker Engine - Community \u0026gt; ... docker compose version \u0026gt; Docker Compose version v... CentOS | Rocky # 查看系统版本 cat /etc/redhat-release \u0026gt; CentOS Linux release 7.6.1810 (Core) // CentOs 7 以上版本 # 查看系统内核版本 uname -r \u0026gt; 4.10.4-1.el7.elrepo.x86_64 // 内核版本要\u0026gt;3.10 # 卸载旧版本 yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine # 安装依赖包 yum install -y yum-utils lvm2 device-mapper-persistent-data # 添加 Docker 软件源 # 如果系统已切换到阿里云镜像源地址，可跳过此步。 # 阿里云镜像自带docker源 yum-config-manager --add-repo https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo # 使用官方源 yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo yum makecache fast # CentOS 8 or Rocky 9 使用timer替换fast yum makecache timer # 安装 Docker # 如果在 Rocky 9 系统上，会提示containerd.io版本过低，或下载失败，需要独立安装containerd.io # 可以重试几次 yum install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin # 启动 Docker # 设为开机启动 systemctl enable docker.service # 启动服务 systemctl start docker.service # 测试 docker run hello-world \u0026gt; Unable to find image \u0026#39;hello-world:latest\u0026#39; locally \u0026gt; latest: Pulling from library/hello-world \u0026gt; 1b930d010525: Pull complete \u0026gt; Digest: sha256:6540fc08ee6e6b7b63468dc3317e3303aae178cb8a45ed3123180328bcc1d20f \u0026gt; Status: Downloaded newer image for hello-world:latest \u0026gt; \u0026gt; Hello from Docker! \u0026gt; This message shows that your installation appears to be working correctly. \u0026gt; \u0026gt; To generate this message, Docker took the following steps: \u0026gt; 1. The Docker client contacted the Docker daemon. \u0026gt; 2. The Docker daemon pulled the \u0026#34;hello-world\u0026#34; image from the Docker Hub. \u0026gt; (amd64) \u0026gt; 3. The Docker daemon created a new container from that image which runs the \u0026gt; executable that produces the output you are currently reading. \u0026gt; 4. The Docker daemon streamed that output to the Docker client, which sent it \u0026gt; to your terminal. \u0026gt; \u0026gt; To try something more ambitious, you can run an Ubuntu container with: \u0026gt; docker run -it ubuntu bash \u0026gt; \u0026gt; Share images, automate workflows, and more with a free Docker ID: \u0026gt; https://hub.docker.com/ \u0026gt; \u0026gt; For more examples and ideas, visit: \u0026gt; https://docs.docker.com/get-started/ docker compose version \u0026gt; Docker Compose version v... 若能正常输出以上信息，则说明安装成功。\n配置 Docker // /etc/docker/daemon.json { // 添加官方仓库镜像地址，其实也没什么用很慢 \u0026#34;registry-mirrors\u0026#34;: [\u0026#34;https://registry.docker-cn.com\u0026#34;] } systemctl daemon-reload systemctl restart docker Docker / Podman 安装与换源 国内 Docker 服务状态 \u0026amp; 镜像加速监控 Docker/DockerHub 国内镜像源/加速列表（长期维护） 其实使用中仓库镜像的速度并不理想，还是设置代理更加实用 如何优雅的给 Docker 配置网络代理 测试安装结果 docker run hello-world \u0026gt; Unable to find image \u0026#39;hello-world:latest\u0026#39; locally \u0026gt; latest: Pulling from library/hello-world \u0026gt; 1b930d010525: Pull complete \u0026gt; Digest: sha256:6540fc08ee6e6b7b63468dc3317e3303aae178cb8a45ed3123180328bcc1d20f \u0026gt; Status: Downloaded newer image for hello-world:latest \u0026gt; \u0026gt; Hello from Docker! \u0026gt; This message shows that your installation appears to be working correctly. \u0026gt; \u0026gt; To generate this message, Docker took the following steps: \u0026gt; 1. The Docker client contacted the Docker daemon. \u0026gt; 2. The Docker daemon pulled the \u0026#34;hello-world\u0026#34; image from the Docker Hub. \u0026gt; (amd64) \u0026gt; 3. The Docker daemon created a new container from that image which runs the \u0026gt; executable that produces the output you are currently reading. \u0026gt; 4. The Docker daemon streamed that output to the Docker client, which sent it \u0026gt; to your terminal. \u0026gt; \u0026gt; To try something more ambitious, you can run an Ubuntu container with: \u0026gt; docker run -it ubuntu bash \u0026gt; \u0026gt; Share images, automate workflows, and more with a free Docker ID: \u0026gt; https://hub.docker.com/ \u0026gt; \u0026gt; For more examples and ideas, visit: \u0026gt; https://docs.docker.com/get-started/ docker compose version \u0026gt; Docker Compose version v... ","date":1651806323,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"3bcaab71d5c3736f10f131b2af90be4c","permalink":"https://blog.cuile.com/post/container/docker_install/","publishdate":"2022-05-06T11:05:23+08:00","relpermalink":"/post/container/docker_install/","section":"post","summary":"其实网上相关的文章已经非常多了，所以这篇文章的作用只是记录和明确一条确定可行的操作路径，为以后的操作节省时间，毕竟像我一样大部分人都不是专业的系统管理员，能够快速解决问题就可以了，并不想做过多的专业研究与探索。\n本操作手册是官方手册与网上手册的结合版本，集两家之所长，亲自操作可用。\nDebian # 安装 Docker 证书 sudo apt-get install -y ca-certificates curl sudo install -m 0755 -d /etc/apt/keyrings sudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc sudo chmod a+r /etc/apt/keyrings/docker.asc\\ sudo echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian $(. /etc/os-release \u0026\u0026 echo \"$VERSION_CODENAME\") stable\" | sudo tee /etc/apt/sources.list.d/docker.list \u003e /dev/null sudo apt-get update # 安装 Docker sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin # 启动 Docker sudo systemctl enable docker.service sudo systemctl start docker.service # 测试 sudo docker version \u003e Client: Docker Engine - Community \u003e ... \u003e Server: Docker Engine - Community \u003e ... sudo docker compose version \u003e Docker Compose version v... # 使用非 root 用户管理 Docker # 创建 docker 用户组 sudo groupadd docker # 将当前用户添加到 docker 用户组 sudo usermod -aG docker $USER # 重启 # 再次测试 docker version \u003e Client: Docker Engine - Community \u003e ... \u003e Server: Docker Engine - Community \u003e ... docker compose version \u003e Docker Compose version v... CentOS | Rocky # 查看系统版本 cat /etc/redhat-release \u003e CentOS Linux release 7.6.1810 (Core) // CentOs 7 以上版本 # 查看系统内核版本 uname -r \u003e 4.10.4-1.el7.elrepo.x86_64 // 内核版本要\u003e3.10 # 卸载旧版本 yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine # 安装依赖包 yum install -y yum-utils lvm2 device-mapper-persistent-data # 添加 Docker 软件源 # 如果系统已切换到阿里云镜像源地址，可跳过此步。 # 阿里云镜像自带docker源 yum-config-manager --add-repo https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo # 使用官方源 yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo yum makecache fast # CentOS 8 or Rocky 9 使用timer替换fast yum makecache timer # 安装 Docker # 如果在 Rocky 9 系统上，会提示containerd.io版本过低，或下载失败，需要独立安装containerd.io # 可以重试几次 yum install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin # 启动 Docker # 设为开机启动 systemctl enable docker.service # 启动服务 systemctl start docker.service # 测试 docker run hello-world \u003e Unable to find image 'hello-world:latest' locally \u003e latest: Pulling from library/hello-world \u003e 1b930d010525: Pull complete \u003e Digest: sha256:6540fc08ee6e6b7b63468dc3317e3303aae178cb8a45ed3123180328bcc1d20f \u003e Status: Downloaded newer image for hello-world:latest \u003e \u003e Hello from Docker! \u003e This message shows that your installation appears to be working correctly. \u003e \u003e To generate this message, Docker took the following steps: \u003e 1. The Docker client contacted the Docker daemon. \u003e 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub. \u003e (amd64) \u003e 3. The Docker daemon created a new container from that image which runs the \u003e executable that produces the output you are currently reading. \u003e 4. The Docker daemon streamed that output to the Docker client, which sent it \u003e to your terminal. \u003e \u003e To try something more ambitious, you can run an Ubuntu container with: \u003e docker run -it ubuntu bash \u003e \u003e Share images, automate workflows, and more with a free Docker ID: \u003e https://hub.docker.com/ \u003e \u003e For more examples and ideas, visit: \u003e https://docs.docker.com/get-started/ docker compose version \u003e Docker Compose version v... 若能正常输出以上信息，则说明安装成功。\n","tags":["linux","CentOS","Debian","rocky","Docker"],"title":"Docker 安装 ","type":"post"},{"authors":null,"categories":null,"content":"Proxmox系统安装后，日志报错\nrrdcached[4513]: handle_request_update: Could not read RRD file. pmxcfs[4527]: [status] notice: RRDC update error /var/lib/rrdcached/db/pve2-vm/85235: -1 pmxcfs[4527]: [status] notice: RRD update error /var/lib/rrdcached/db/pve2-vm/85235: mmaping file \u0026#39;/var/lib/rrdcached/db/pve2-vm/85235\u0026#39;: Invalid argument 修复命令\n$ rm -r /var/lib/rrdcached/db $ systemctl restart rrdcached.service 参考文档 Strange RRD error ","date":1644288155,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"e12dfc27dc17300f1090a61a79e7f7f2","permalink":"https://blog.cuile.com/post/proxmox/rrd_error/","publishdate":"2022-02-08T10:42:35+08:00","relpermalink":"/post/proxmox/rrd_error/","section":"post","summary":"Proxmox系统安装后，日志报错\nrrdcached[4513]: handle_request_update: Could not read RRD file. pmxcfs[4527]: [status] notice: RRDC update error /var/lib/rrdcached/db/pve2-vm/85235: -1 pmxcfs[4527]: [status] notice: RRD update error /var/lib/rrdcached/db/pve2-vm/85235: mmaping file '/var/lib/rrdcached/db/pve2-vm/85235': Invalid argument 修复命令\n$ rm -r /var/lib/rrdcached/db $ systemctl restart rrdcached.service 参考文档 Strange RRD error ","tags":["rrd","proxmoxve"],"title":"修复 ProxmoxVE RRD 错误","type":"post"},{"authors":null,"categories":null,"content":"脚本基于Windows10系统设计\n查看软件版本 D:\\ffmpeg\\bin\u0026gt;ver Microsoft Windows [版本 10.0.18362.356] D:\\ffmpeg\\bin\u0026gt;ffmpeg.exe -version ffmpeg version N-94600-g661a9b274b Copyright (c) 2000-2019 the FFmpeg developers built with gcc 9.1.1 (GCC) 20190807 configuration: --enable-gpl --enable-version3 --enable-sdl2 --enable-fontconfig --enable-gnutls --enable-iconv --enable-libass --enable-libdav1d --enable-libbluray --enable-li bfreetype --enable-libmp3lame --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libopus --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libtheora --enable-libtwolame --enable-libvpx --enable-libwavpack --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libzimg --enable-lzma --enable-zlib --enable-gmp --enable-libvidstab --enable-libvorbis --enable-libvo-amrwbenc --enable-libmysofa --enable-libspeex --enable-libxvid --enable-libaom --enable-libmfx --enable-amf --enable-ffnvcodec --enable-cuvid --enable-d3d11va --enable-nvenc --enable-nvdec --enable-dxva2 --enable-avisynth --enable-libopenmpt libavutil 56. 33.100 / 56. 33.100 libavcodec 58. 55.100 / 58. 55.100 libavformat 58. 31.101 / 58. 31.101 libavdevice 58. 9.100 / 58. 9.100 libavfilter 7. 58.100 / 7. 58.100 libswscale 5. 6.100 / 5. 6.100 libswresample 3. 6.100 / 3. 6.100 libpostproc 55. 6.100 / 55. 6.100 添加LOGO D:\\ffmpeg\\bin\\ffmpeg ^ -c:v h264_qsv ^ -i %1 ^ -i F:\\\\电教馆\\\\logo.png ^ -c:v h264_qsv ^ -b:v 1894k ^ -filter_complex [1:v]scale=125:125[logo];[0:v][logo]overlay=30:25 ^ -c:a copy ^ -y ^ %2 去掉LOGO D:\\ffmpeg\\bin\\ffmpeg ^ -c:v h264_qsv ^ -i %1 ^ -c:v h264_qsv ^ -b:v 1894k ^ -filter_complex [0:v]split[split_main][split_delogo];[split_delogo]trim=start=1:end=5,delogo=x=270:y=820:w=1420:h=50:show=0[delogoed];[split_main][delogoed]overlay=eof_action=pass ^ -c:a copy ^ -y ^ %2 合并操作 D:\\ffmpeg\\bin\\ffmpeg ^ -c:v h264_qsv ^ -i %1 ^ -i F:\\\\电教馆\\\\logo.png ^ -c:v h264_qsv ^ -b:v 1894k ^ -filter_complex [1:v]scale=125:125[logo];[0:v][logo]overlay=30:25[tmp_video];[tmp_video]split[main][delogo];[delogo]trim=start=1:end=5,delogo=x=270:y=820:w=1420:h=50:show=0[delogoed];[main][delogoed]overlay=eof_action=pass ^ -c:a copy ^ -y ^ %2 遍历文件夹下的MP4文件，打水印、去字幕、截图验证效果 @echo off \u0026amp; setlocal enabledelayedexpansion echo ################################################# echo 开始处理视频文件 echo. :: 指定起始文件夹 set DIR=\u0026#34;E:\\六年级\\\u0026#34; REM set DIR=\u0026#34;E:\\六年级\\第一学期\\sx6s01001\\\u0026#34; echo DIR=%DIR% REM 指定运行参数 set scale=\u0026#34;scale=90:90\u0026#34; set overlay=\u0026#34;overlay=50:15\u0026#34; set trim=\u0026#34;trim=start=2:end=6\u0026#34; set delogo=\u0026#34;delogo=x=190:y=545:w=930:h=30:show=0\u0026#34; :: 参数 /R 表示需要遍历子文件夹,去掉表示不遍历子文件夹 :: %%f 是一个变量,类似于迭代器,但是这个变量只能由一个字母组成,前面带上%% :: 括号中是通配符,可以指定后缀名,*.*表示所有文件 for /R %DIR% %%f in (*.mp4) do ( echo f=%%f call :check_info \u0026#34;%%f\u0026#34; ^ \u0026amp;\u0026amp; echo ################################################# ^ \u0026amp;\u0026amp; echo bit_rate=!bit_rate! ^ \u0026amp;\u0026amp; call :process_mpeg4 \u0026#34;%%f\u0026#34;,\u0026#34;%%~df%%~pf%%~nf_out%%~xf\u0026#34;,!bit_rate!,%scale%,%overlay%,%trim%,%delogo% ^ \u0026amp;\u0026amp; call :screenshot \u0026#34;%%~df%%~pf%%~nf_out%%~xf\u0026#34;,\u0026#34;%%~df%%~pf%%~nf_out\u0026#34; ) exit /b :check_info echo ################################################# echo check_info for /F %%s in (\u0026#39;D:\\ffmpeg\\bin\\ffprobe -hide_banner ^ -unit -prefix -byte_binary_prefix ^ -print_format flat ^ -show_format -show_streams ^ -i %1 ^| find \u0026#34;streams.stream.0.bit_rate\u0026#34;\u0026#39;) do (set bit_rate=%%s) set bit_rate=%bit_rate:~27,5% set bit_rate=%bit_rate:.=% goto :eof :process_mpeg4 echo ################################################# echo process_mpeg4 D:\\ffmpeg\\bin\\ffmpeg -hide_banner ^ -vcodec mpeg4 ^ -i %1 -i F:\\\\电教馆\\\\logo.png ^ -vcodec h264_qsv -b:v %3k ^ -filter_complex [1:v]%4[logo];[0:v][logo]%5[tmp_video];[tmp_video]split[main][delogo];[delogo]%6,%7[delogoed];[main][delogoed]overlay=eof_action=pass ^ -acodec copy ^ -y %2 goto :eof :process_h264_qsv echo ################################################# echo process_h264_qsv D:\\ffmpeg\\bin\\ffmpeg -hide_banner ^ -vcodec h264_qsv ^ -i %1 -i F:\\\\电教馆\\\\logo.png ^ -vcodec h264_qsv -b:v %3k ^ -filter_complex [1:v]%4[logo];[0:v][logo]%5[tmp_video];[tmp_video]split[main][delogo];[delogo]%6,%7[delogoed];[main][delogoed]overlay=eof_action=pass ^ -acodec copy ^ -y %2 goto :eof :screenshot echo ################################################# echo screenshot for /L %%i in (3,1,5) do ( D:\\ffmpeg\\bin\\ffmpeg -hide_banner ^ -ss 00:0%%i -vcodec h264_qsv ^ -i %1 ^ -vframes 1 -f image2 ^ -y %2_%%is_screenshot.jpg ) goto :eof ","date":1644287475,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"fded477233569e1f00a78fd29435a2ea","permalink":"https://blog.cuile.com/post/ffmpeg/ffmpeg_manual/","publishdate":"2022-02-08T10:31:15+08:00","relpermalink":"/post/ffmpeg/ffmpeg_manual/","section":"post","summary":"脚本基于Windows10系统设计\n查看软件版本 D:\\ffmpeg\\bin\u003ever Microsoft Windows [版本 10.0.18362.356] D:\\ffmpeg\\bin\u003effmpeg.exe -version ffmpeg version N-94600-g661a9b274b Copyright (c) 2000-2019 the FFmpeg developers built with gcc 9.1.1 (GCC) 20190807 configuration: --enable-gpl --enable-version3 --enable-sdl2 --enable-fontconfig --enable-gnutls --enable-iconv --enable-libass --enable-libdav1d --enable-libbluray --enable-li bfreetype --enable-libmp3lame --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libopus --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libtheora --enable-libtwolame --enable-libvpx --enable-libwavpack --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libzimg --enable-lzma --enable-zlib --enable-gmp --enable-libvidstab --enable-libvorbis --enable-libvo-amrwbenc --enable-libmysofa --enable-libspeex --enable-libxvid --enable-libaom --enable-libmfx --enable-amf --enable-ffnvcodec --enable-cuvid --enable-d3d11va --enable-nvenc --enable-nvdec --enable-dxva2 --enable-avisynth --enable-libopenmpt libavutil 56. 33.100 / 56. 33.100 libavcodec 58. 55.100 / 58. 55.100 libavformat 58. 31.101 / 58. 31.101 libavdevice 58. 9.100 / 58. 9.100 libavfilter 7. 58.100 / 7. 58.100 libswscale 5. 6.100 / 5. 6.100 libswresample 3. 6.100 / 3. 6.100 libpostproc 55. 6.100 / 55. 6.100 添加LOGO D:\\ffmpeg\\bin\\ffmpeg ^ -c:v h264_qsv ^ -i %1 ^ -i F:\\\\电教馆\\\\logo.png ^ -c:v h264_qsv ^ -b:v 1894k ^ -filter_complex [1:v]scale=125:125[logo];[0:v][logo]overlay=30:25 ^ -c:a copy ^ -y ^ %2 去掉LOGO D:\\ffmpeg\\bin\\ffmpeg ^ -c:v h264_qsv ^ -i %1 ^ -c:v h264_qsv ^ -b:v 1894k ^ -filter_complex [0:v]split[split_main][split_delogo];[split_delogo]trim=start=1:end=5,delogo=x=270:y=820:w=1420:h=50:show=0[delogoed];[split_main][delogoed]overlay=eof_action=pass ^ -c:a copy ^ -y ^ %2 合并操作 D:\\ffmpeg\\bin\\ffmpeg ^ -c:v h264_qsv ^ -i %1 ^ -i F:\\\\电教馆\\\\logo.png ^ -c:v h264_qsv ^ -b:v 1894k ^ -filter_complex [1:v]scale=125:125[logo];[0:v][logo]overlay=30:25[tmp_video];[tmp_video]split[main][delogo];[delogo]trim=start=1:end=5,delogo=x=270:y=820:w=1420:h=50:show=0[delogoed];[main][delogoed]overlay=eof_action=pass ^ -c:a copy ^ -y ^ %2 遍历文件夹下的MP4文件，打水印、去字幕、截图验证效果 @echo off \u0026 setlocal enabledelayedexpansion echo ################################################# echo 开始处理视频文件 echo. :: 指定起始文件夹 set DIR=\"E:\\六年级\\\" REM set DIR=\"E:\\六年级\\第一学期\\sx6s01001\\\" echo DIR=%DIR% REM 指定运行参数 set scale=\"scale=90:90\" set overlay=\"overlay=50:15\" set trim=\"trim=start=2:end=6\" set delogo=\"delogo=x=190:y=545:w=930:h=30:show=0\" :: 参数 /R 表示需要遍历子文件夹,去掉表示不遍历子文件夹 :: %%f 是一个变量,类似于迭代器,但是这个变量只能由一个字母组成,前面带上%% :: 括号中是通配符,可以指定后缀名,*.*表示所有文件 for /R %DIR% %%f in (*.mp4) do ( echo f=%%f call :check_info \"%%f\" ^ \u0026\u0026 echo ################################################# ^ \u0026\u0026 echo bit_rate=!bit_rate! ^ \u0026\u0026 call :process_mpeg4 \"%%f\",\"%%~df%%~pf%%~nf_out%%~xf\",!bit_rate!,%scale%,%overlay%,%trim%,%delogo% ^ \u0026\u0026 call :screenshot \"%%~df%%~pf%%~nf_out%%~xf\",\"%%~df%%~pf%%~nf_out\" ) exit /b :check_info echo ################################################# echo check_info for /F %%s in ('D:\\ffmpeg\\bin\\ffprobe -hide_banner ^ -unit -prefix -byte_binary_prefix ^ -print_format flat ^ -show_format -show_streams ^ -i %1 ^| find \"streams.stream.0.bit_rate\"') do (set bit_rate=%%s) set bit_rate=%bit_rate:~27,5% set bit_rate=%bit_rate:.=% goto :eof :process_mpeg4 echo ################################################# echo process_mpeg4 D:\\ffmpeg\\bin\\ffmpeg -hide_banner ^ -vcodec mpeg4 ^ -i %1 -i F:\\\\电教馆\\\\logo.png ^ -vcodec h264_qsv -b:v %3k ^ -filter_complex [1:v]%4[logo];[0:v][logo]%5[tmp_video];[tmp_video]split[main][delogo];[delogo]%6,%7[delogoed];[main][delogoed]overlay=eof_action=pass ^ -acodec copy ^ -y %2 goto :eof :process_h264_qsv echo ################################################# echo process_h264_qsv D:\\ffmpeg\\bin\\ffmpeg -hide_banner ^ -vcodec h264_qsv ^ -i %1 -i F:\\\\电教馆\\\\logo.png ^ -vcodec h264_qsv -b:v %3k ^ -filter_complex [1:v]%4[logo];[0:v][logo]%5[tmp_video];[tmp_video]split[main][delogo];[delogo]%6,%7[delogoed];[main][delogoed]overlay=eof_action=pass ^ -acodec copy ^ -y %2 goto :eof :screenshot echo ################################################# echo screenshot for /L %%i in (3,1,5) do ( D:\\ffmpeg\\bin\\ffmpeg -hide_banner ^ -ss 00:0%%i -vcodec h264_qsv ^ -i %1 ^ -vframes 1 -f image2 ^ -y %2_%%is_screenshot.jpg ) goto :eof ","tags":["Windwos","FFmpeg"],"title":"FFmpeg脚本","type":"post"},{"authors":null,"categories":null,"content":"APT Debian 全球镜像站\n查找延迟最小的镜像 sudo apt install -y netselect-apt \\ \u0026amp;\u0026amp; sudo netselect-apt \\ \u0026amp;\u0026amp; sudo apt autoremove -y netselect-apt \\ \u0026amp;\u0026amp; rm -f sources.list The fastest 10 servers seem to be: http://mirrors.bfsu.edu.cn/debian/ http://mirrors.tuna.tsinghua.edu.cn/debian/ http://mirrors.neusoft.edu.cn/debian/ http://mirrors.jlu.edu.cn/debian/ http://ftp.cn.debian.org/debian/ http://debian.cs.nycu.edu.tw/debian/ http://mirror.i3d.net/debian/ http://mirrors.163.com/debian/ http://mirror.bizflycloud.vn/debian/ http://ftp.kaist.ac.kr/debian/ Of the hosts tested we choose the fastest valid for http: http://mirrors.bfsu.edu.cn/debian/ Writing sources.list. Done. 修改仓库 # PVE QEMU debian-12-generic-amd64.qcow2 # echo \u0026#39;http://mirrors.bfsu.edu.cn/debian/\u0026#39; | sudo tee /etc/apt/mirrors/debian.list # echo \u0026#39;http://mirrors.bfsu.edu.cn/debian-security/\u0026#39; | sudo tee -a /etc/apt/mirrors/debian-security.list sed -i -e \u0026#34;s/deb.debian.org/mirrors.bfsu.edu.cn/\u0026#34; /etc/apt/mirrors/debian.list sed -i -e \u0026#34;s/deb.debian.org/mirrors.bfsu.edu.cn/\u0026#34; /etc/apt/mirrors/debian-security.list # PVE LXC debian-12-standard_12.7-1_amd64.tar.zst sed -i -e \u0026#34;s/deb.debian.org/mirrors.bfsu.edu.cn/\u0026#34; /etc/apt/sources.list sed -i -e \u0026#34;s/security.debian.org/mirrors.bfsu.edu.cn\\/debian-serurity/\u0026#34; /etc/apt/sources.list # Docker imaage debian:12 sed -i -e \u0026#34;s/deb.debian.org/mirrors.bfsu.edu.cn/\u0026#34; /etc/apt/sources.list.d/debian.sources # 启用非自由仓库 sed -i \u0026#39;s/main$/main contrib non-free non-free-firmware/\u0026#39; /etc/apt/sources.list # update apt update # 查询软件包版本信息、优先级和来源 apt policy \u0026lt;package_name\u0026gt; apt-cache policy \u0026lt;package_name\u0026gt; # 安装指定版本的包 apt install \u0026lt;package_name\u0026gt;=\u0026lt;version_number\u0026gt; YUM 查询仓库 yum repolist # 显示所有仓库 yum repolist all # 显示所有启动的仓库 yum repolist enabled # 显示所有禁用的仓库 yum repolist disabled 修改仓库 最常用的修改操作就是启动和停用, 可以使用以下命令实现:\nyum-config-manager --enable repository… yum-config-manager --disable repository… 更换阿里云软件安装源 # 备份原镜像文件，以免出错后可以恢复。 mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup \\ \u0026amp;\u0026amp; mv /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel.repo.backup \\ \u0026amp;\u0026amp; mv /etc/yum.repos.d/epel-testing.repo /etc/yum.repos.d/epel-testing.repo.backup # 下载新的CentOS-Base.repo 到/etc/yum.repos.d/ curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo \\ \u0026amp;\u0026amp; curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo \\ \u0026amp;\u0026amp; curl -o /etc/yum.repos.d/epel-testing.repo http://mirrors.aliyun.com/repo/epel-testing.repo # 运行yum makecache生成缓存 yum clean all \u0026amp;\u0026amp; yum makecache 查看已安装软件 yum list installed 更新软件 # 升级所有包同时也升级软件和系统内核 yum -y update # 只升级所有包，不升级软件和系统内核 yum -y upgrade 参考文档 查RPM 找不到包的时候，可以在这上面查查，非常有帮助 阿里巴巴开源镜像站 centos epel ","date":1644287330,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"0abf5fe32d6f54ece834f3b9a8afce6d","permalink":"https://blog.cuile.com/post/linux/repo_manual/","publishdate":"2022-02-08T10:28:50+08:00","relpermalink":"/post/linux/repo_manual/","section":"post","summary":"APT Debian 全球镜像站\n查找延迟最小的镜像 sudo apt install -y netselect-apt \\ \u0026\u0026 sudo netselect-apt \\ \u0026\u0026 sudo apt autoremove -y netselect-apt \\ \u0026\u0026 rm -f sources.list The fastest 10 servers seem to be: http://mirrors.bfsu.edu.cn/debian/ http://mirrors.tuna.tsinghua.edu.cn/debian/ http://mirrors.neusoft.edu.cn/debian/ http://mirrors.jlu.edu.cn/debian/ http://ftp.cn.debian.org/debian/ http://debian.cs.nycu.edu.tw/debian/ http://mirror.i3d.net/debian/ http://mirrors.163.com/debian/ http://mirror.bizflycloud.vn/debian/ http://ftp.kaist.ac.kr/debian/ Of the hosts tested we choose the fastest valid for http: http://mirrors.bfsu.edu.cn/debian/ Writing sources.list. Done. 修改仓库 # PVE QEMU debian-12-generic-amd64.qcow2 # echo 'http://mirrors.bfsu.edu.cn/debian/' | sudo tee /etc/apt/mirrors/debian.list # echo 'http://mirrors.bfsu.edu.cn/debian-security/' | sudo tee -a /etc/apt/mirrors/debian-security.list sed -i -e \"s/deb.debian.org/mirrors.bfsu.edu.cn/\" /etc/apt/mirrors/debian.list sed -i -e \"s/deb.debian.org/mirrors.bfsu.edu.cn/\" /etc/apt/mirrors/debian-security.list # PVE LXC debian-12-standard_12.7-1_amd64.tar.zst sed -i -e \"s/deb.debian.org/mirrors.bfsu.edu.cn/\" /etc/apt/sources.list sed -i -e \"s/security.debian.org/mirrors.bfsu.edu.cn\\/debian-serurity/\" /etc/apt/sources.list # Docker imaage debian:12 sed -i -e \"s/deb.debian.org/mirrors.bfsu.edu.cn/\" /etc/apt/sources.list.d/debian.sources # 启用非自由仓库 sed -i 's/main$/main contrib non-free non-free-firmware/' /etc/apt/sources.list # update apt update # 查询软件包版本信息、优先级和来源 apt policy \u003cpackage_name\u003e apt-cache policy \u003cpackage_name\u003e # 安装指定版本的包 apt install \u003cpackage_name\u003e=\u003cversion_number\u003e YUM 查询仓库 yum repolist # 显示所有仓库 yum repolist all # 显示所有启动的仓库 yum repolist enabled # 显示所有禁用的仓库 yum repolist disabled 修改仓库 最常用的修改操作就是启动和停用, 可以使用以下命令实现:\n","tags":["CentOS","debian","repo","yum","apt","Linux"],"title":"软件库管理","type":"post"},{"authors":null,"categories":null,"content":"脚本基于Centos 7\n1、查看系统内核版本 $ uname -r 3.10.0-514.26.2.el7.x86_64 $ cat /etc/redhat-release CentOS Linux release 7.6.1810 (Core) 2、升级内核 导入elrepo的key，然后安装elrepo的yum源\n$ rpm -import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org $ rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm 查看可用的内核相关包\n$ yum --disablerepo=\u0026#34;*\u0026#34; --enablerepo=\u0026#34;elrepo-kernel\u0026#34; list available 主分支ml(mainline)，稳定版(stable)，长期维护版lt(longterm) 安装内核\n$ yum -y --enablerepo=elrepo-kernel install kernel-ml.x86_64 kernel-ml-devel.x86_64 3、修改grub # 查看系统内核列表 $ awk -F\\\u0026#39; \u0026#39;$1==\u0026#34;menuentry \u0026#34; {print $2}\u0026#39; /etc/grub2.cfg CentOS Linux (5.2.11-1.el7.elrepo.x86_64) 7 (Core) # 新内核（5.2.11）在0的位置上 CentOS Linux (3.10.0-957.27.2.el7.x86_64) 7 (Core) CentOS Linux (3.10.0-514.26.2.el7.x86_64) 7 (Core) CentOS Linux (3.10.0-514.el7.x86_64) 7 (Core) CentOS Linux (0-rescue-963c2c41b08343f7b063dddac6b2e486) 7 (Core) $ vim /etc/default/grub #将 GRUB_DEFAULT=saved 改为 GRUB_DEFAULT=0 # 重建内核配置 $ grub2-mkconfig -o /boot/grub2/grub.cfg # or 使用第二种命令行方式，减少操作复杂度，减少出错机率 # 查看系统内核列表 $ cat /boot/grub2/grub.cfg | grep menuentry if [ x\u0026#34;${feature_menuentry_id}\u0026#34; = xy ]; then menuentry_id_option=\u0026#34;--id\u0026#34; menuentry_id_option=\u0026#34;\u0026#34; export menuentry_id_option menuentry \u0026#39;CentOS Linux (6.2.2-1.el7.elrepo.x86_64) 7 (Core)\u0026#39; --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option \u0026#39;gnulinux-3.10.0-1160.81.1.el7.x86_64-advanced-fbc2582d-2e8a-4c41-8ba8-83656d8df89b\u0026#39; { menuentry \u0026#39;CentOS Linux (3.10.0-1160.83.1.el7.x86_64) 7 (Core)\u0026#39; --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option \u0026#39;gnulinux-3.10.0-1160.81.1.el7.x86_64-advanced-fbc2582d-2e8a-4c41-8ba8-83656d8df89b\u0026#39; { menuentry \u0026#39;CentOS Linux (3.10.0-1160.81.1.el7.x86_64) 7 (Core)\u0026#39; --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option \u0026#39;gnulinux-3.10.0-1160.81.1.el7.x86_64-advanced-fbc2582d-2e8a-4c41-8ba8-83656d8df89b\u0026#39; { menuentry \u0026#39;CentOS Linux (3.10.0-1160.el7.x86_64) 7 (Core)\u0026#39; --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option \u0026#39;gnulinux-3.10.0-1160.el7.x86_64-advanced-fbc2582d-2e8a-4c41-8ba8-83656d8df89b\u0026#39; { menuentry \u0026#39;CentOS Linux (0-rescue-9745ea2ecc634c89aef55f4dc21ee8fc) 7 (Core)\u0026#39; --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option \u0026#39;gnulinux-0-rescue-9745ea2ecc634c89aef55f4dc21ee8fc-advanced-fbc2582d-2e8a-4c41-8ba8-83656d8df89b\u0026#39; { # 配置默认内核 $ grub2-set-default \u0026#34;CentOS Linux (6.2.2-1.el7.elrepo.x86_64) 7 (Core)\u0026#34; # 验证修改结果 $ grub2-editenv list saved_entry=CentOS Linux (6.2.2-1.el7.elrepo.x86_64) 7 (Core) 4、重启系统 $ reboot #查看内核版本 $ uname -r 5.2.11-1.el7.elrepo.x86_64 ","date":1644286668,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"1111685652fc5901044feee15ce9d63e","permalink":"https://blog.cuile.com/post/linux/kernel_update/","publishdate":"2022-02-08T10:17:48+08:00","relpermalink":"/post/linux/kernel_update/","section":"post","summary":"脚本基于Centos 7\n1、查看系统内核版本 $ uname -r 3.10.0-514.26.2.el7.x86_64 $ cat /etc/redhat-release CentOS Linux release 7.6.1810 (Core) 2、升级内核 导入elrepo的key，然后安装elrepo的yum源\n$ rpm -import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org $ rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm 查看可用的内核相关包\n$ yum --disablerepo=\"*\" --enablerepo=\"elrepo-kernel\" list available 主分支ml(mainline)，稳定版(stable)，长期维护版lt(longterm) 安装内核\n$ yum -y --enablerepo=elrepo-kernel install kernel-ml.x86_64 kernel-ml-devel.x86_64 3、修改grub # 查看系统内核列表 $ awk -F\\' '$1==\"menuentry \" {print $2}' /etc/grub2.cfg CentOS Linux (5.2.11-1.el7.elrepo.x86_64) 7 (Core) # 新内核（5.2.11）在0的位置上 CentOS Linux (3.10.0-957.27.2.el7.x86_64) 7 (Core) CentOS Linux (3.10.0-514.26.2.el7.x86_64) 7 (Core) CentOS Linux (3.10.0-514.el7.x86_64) 7 (Core) CentOS Linux (0-rescue-963c2c41b08343f7b063dddac6b2e486) 7 (Core) $ vim /etc/default/grub #将 GRUB_DEFAULT=saved 改为 GRUB_DEFAULT=0 # 重建内核配置 $ grub2-mkconfig -o /boot/grub2/grub.cfg # or 使用第二种命令行方式，减少操作复杂度，减少出错机率 # 查看系统内核列表 $ cat /boot/grub2/grub.cfg | grep menuentry if [ x\"${feature_menuentry_id}\" = xy ]; then menuentry_id_option=\"--id\" menuentry_id_option=\"\" export menuentry_id_option menuentry 'CentOS Linux (6.2.2-1.el7.elrepo.x86_64) 7 (Core)' --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option 'gnulinux-3.10.0-1160.81.1.el7.x86_64-advanced-fbc2582d-2e8a-4c41-8ba8-83656d8df89b' { menuentry 'CentOS Linux (3.10.0-1160.83.1.el7.x86_64) 7 (Core)' --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option 'gnulinux-3.10.0-1160.81.1.el7.x86_64-advanced-fbc2582d-2e8a-4c41-8ba8-83656d8df89b' { menuentry 'CentOS Linux (3.10.0-1160.81.1.el7.x86_64) 7 (Core)' --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option 'gnulinux-3.10.0-1160.81.1.el7.x86_64-advanced-fbc2582d-2e8a-4c41-8ba8-83656d8df89b' { menuentry 'CentOS Linux (3.10.0-1160.el7.x86_64) 7 (Core)' --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option 'gnulinux-3.10.0-1160.el7.x86_64-advanced-fbc2582d-2e8a-4c41-8ba8-83656d8df89b' { menuentry 'CentOS Linux (0-rescue-9745ea2ecc634c89aef55f4dc21ee8fc) 7 (Core)' --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option 'gnulinux-0-rescue-9745ea2ecc634c89aef55f4dc21ee8fc-advanced-fbc2582d-2e8a-4c41-8ba8-83656d8df89b' { # 配置默认内核 $ grub2-set-default \"CentOS Linux (6.2.2-1.el7.elrepo.x86_64) 7 (Core)\" # 验证修改结果 $ grub2-editenv list saved_entry=CentOS Linux (6.2.2-1.el7.elrepo.x86_64) 7 (Core) 4、重启系统 $ reboot #查看内核版本 $ uname -r 5.2.11-1.el7.elrepo.x86_64 ","tags":["kernel","Linux"],"title":"Linux系统内核升级","type":"post"},{"authors":null,"categories":null,"content":"基于Centos 7\n注意：CentOS 7默认的防火墙不是iptables,而是firewalld\n停止firewalld服务 # 停止firewalld服务 systemctl stop firewalld # 禁用firewalld服务 # systemctl mask firewalld # 删除firewalld yum erase firewalld 安装 iptables # 先检查是否安装了iptables systemctl status iptables # 安装iptables yum install iptables iptables-services -y 启动 iptables # 注册iptables服务，相当于以前的chkconfig iptables on systemctl enable iptables # 开启服务 systemctl start iptables # 查看状态 systemctl status iptables # 重启防火墙 systemctl restart iptables # 保存规则 service iptables save # 如果报“-bash: service: command not found”，则需要安装initscripts yum install initscripts -y 关键规则 注意添加规则的先后顺序\n# 允许已建立的或相关连的通行 iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT # 添加SSH访问端口 iptables -A INPUT -p tcp -m tcp --dport 28124 -j ACCEPT # 允许本地回环接口(即运行本机访问本机) iptables -A INPUT -i lo -j ACCEPT # 允许ping iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT # 禁止所有本机入站访问 iptables -P INPUT DROP // 默认入站规则为拒绝 # 允许所有本机出站访问 iptables -P OUTPUT ACCEPT # 允许所有本机转发访问 iptables -P FORWARD ACCEPT # 禁止的话podman桥接网络不无正常工作，或者要配置相应的podman规则 其它规则 # 允许访问指定端口 iptables -A INPUT -p tcp -m tcp --dport 6443 -j ACCEPT # 允许访问连续端口 iptables -A INPUT -p tcp -m tcp --dport 21:25 -j ACCEPT # 允许访问不连续端口 iptables -A INPUT -p tcp -m multiport --dport 21:25,135:139 -j ACCEPT # 转发数据包 # 将\u0026lt;本地端口\u0026gt;接收到的TCP数据包，直接转发到\u0026lt;目标IP\u0026gt;的\u0026lt;目标端口\u0026gt; iptables -t nat -A PREROUTING -p tcp --dport \u0026lt;本地端口\u0026gt; -j DNAT --to-destination \u0026lt;目标IP\u0026gt;:\u0026lt;目标端口\u0026gt; # 将\u0026lt;目标IP\u0026gt;的\u0026lt;目标端口\u0026gt;发来的TCP数据包，IP地址修改为\u0026lt;本地IP\u0026gt;后，原路转发回去 iptables -t nat -A POSTROUTING -p tcp -d \u0026lt;目标IP\u0026gt; --dport \u0026lt;目标端口\u0026gt; -j SNAT --to \u0026lt;本地IP\u0026gt; # 如果要添加内网ip信任（接受其所有TCP请求） iptables -A INPUT -p tcp -s 45.96.174.68 -j ACCEPT # 封停一个IP iptables -I INPUT -s ***.***.***.*** -j DROP # 删除规则 iptables -D INPUT #rulenum# # or 使用建立规则时条件，删除指定规则，这个方法比如适合代码使用 iptables -D INPUT -p tcp -m tcp --dport 6443 -j ACCEPT # 解封一个IP iptables -D INPUT -s ***.***.***.*** -j DROP 查看规则 iptables -L -n --line-numbers 重置规则 # 使用这些命令刷新和重置 iptables 到默认状态 # 清除已有iptables规则 iptables -F iptables -X iptables -t nat -F iptables -t nat -X iptables -t mangle -F iptables -t mangle -X iptables -t raw -F iptables -t raw -X iptables -t security -F iptables -t security -X iptables -P INPUT ACCEPT iptables -P FORWARD ACCEPT iptables -P OUTPUT ACCEPT ","date":1644286188,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"1e2a5a0a31d52c8cd3c42295bc62b9b5","permalink":"https://blog.cuile.com/post/linux/iptables_manual/","publishdate":"2022-02-08T10:09:48+08:00","relpermalink":"/post/linux/iptables_manual/","section":"post","summary":"基于Centos 7\n注意：CentOS 7默认的防火墙不是iptables,而是firewalld\n停止firewalld服务 # 停止firewalld服务 systemctl stop firewalld # 禁用firewalld服务 # systemctl mask firewalld # 删除firewalld yum erase firewalld 安装 iptables # 先检查是否安装了iptables systemctl status iptables # 安装iptables yum install iptables iptables-services -y 启动 iptables # 注册iptables服务，相当于以前的chkconfig iptables on systemctl enable iptables # 开启服务 systemctl start iptables # 查看状态 systemctl status iptables # 重启防火墙 systemctl restart iptables # 保存规则 service iptables save # 如果报“-bash: service: command not found”，则需要安装initscripts yum install initscripts -y 关键规则 注意添加规则的先后顺序\n","tags":["iptables","Firewall","linux"],"title":"iptables 配置","type":"post"},{"authors":null,"categories":null,"content":"1、准备环境 建议使用纯linux系统进行编译，如 Ubuntu 20.04 LTS，这样环境比较简单，兼容问题也少。\n用WSL环境编译，可参考\n使用 Windows 子系统 ( WSL ) 编译 OpenWrt 为提高编译的成功率，采用国内大神Lean的版本。\n官方版本因编译过程中，下载、兼容等等太多问题，建议不要使用。\nsudo apt-get update sudo apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync 2、下载代码 国内用户请准备好梯子\ngit clone https://github.com/coolsnowwolf/lede cd lede ./scripts/feeds update -a ./scripts/feeds install -a 3、配置组件 make menuconfig Hyper-V平台配置，可参考\n让OpenWRT完美适应Hyper-V 4、开始编译 make -j8 download V=sc make -j1 V=sc 编译过程中下载库很难一次成功，如果编译报错，可多尝试几次，每次都可以补全几个文件\n详细的命令说明，可参考\nOpenWrt 编译步骤与命令详解教程 如何编译一个属于自己的OpenWrt固件 编译完成无报错的情况下，最终文件在\ncd ./bin/targets/x86/64/ 5、转成vhdx格式 vhdx格式，可以方便的在Hyper-V虚拟机中使用\nqemu-img convert something.vmdk -O vhdx something.vhdx 如何使用，可参考\n在 Windows 10 上使用 Hyper-V 安装 LEDE 软路由 参考文档 Lean Github openwrt.org Quickstart build images ","date":1644285920,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"def385d862618dc2b216e0d96b955597","permalink":"https://blog.cuile.com/post/openwrt/openwrt_make/","publishdate":"2022-02-08T10:05:20+08:00","relpermalink":"/post/openwrt/openwrt_make/","section":"post","summary":"1、准备环境 建议使用纯linux系统进行编译，如 Ubuntu 20.04 LTS，这样环境比较简单，兼容问题也少。\n用WSL环境编译，可参考\n使用 Windows 子系统 ( WSL ) 编译 OpenWrt 为提高编译的成功率，采用国内大神Lean的版本。\n官方版本因编译过程中，下载、兼容等等太多问题，建议不要使用。\nsudo apt-get update sudo apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync 2、下载代码 国内用户请准备好梯子\ngit clone https://github.com/coolsnowwolf/lede cd lede ./scripts/feeds update -a ./scripts/feeds install -a 3、配置组件 make menuconfig Hyper-V平台配置，可参考\n","tags":["make","OpenWRT"],"title":"编译x86_64版本的OpenWrt","type":"post"},{"authors":null,"categories":null,"content":"1. 升级系统软件包 $ apt-get update $ apt-get dist-upgrade 2. 安装 ifupdown2 使用 ifupdown2 网络管理软件包，还可以实时重新加载网络配置，而无需重新启动。\n$ apt install ifupdown2 3. 配置物理网卡 使用 PVE 的 WEB 管理界面，设置物理网卡的配置。\n注意：一定要分配一个静态的IP地址，否则无法正常登录 PVE\n节点 \u0026gt; 系统 \u0026gt; 网络：\naddress：192.168.10.66/24 gateway：192.168.10.1 保存后应用配置\n4. 配置虚拟网卡 4.1 修改虚拟网卡配置 使用 PVE 提供管理界面进行配置。 删除 vmbr0 设备的所有配置内容。\n编辑 /etc/network/interfaces\n$ nano /etc/network/interfaces 加入\nsource /etc/network/interfaces.d/* # network interface settings; autogenerated # Please do NOT modify this file directly, unless you know what # you\u0026#39;re doing. # # If you want to manage parts of the network configuration manually, # please utilize the \u0026#39;source\u0026#39; or \u0026#39;source-directory\u0026#39; directives to do # so. # PVE will preserve these directives, but will NOT read its network # configuration from sourced files, so do not attempt to move any of # the PVE managed interfaces into external files! source /etc/network/interfaces.d/* auto lo iface lo inet loopback auto enp1s0 iface enp1s0 inet static address 192.168.10.66/24 gateway 192.168.10.1 iface vmbr0 inet manual bridge-ports none bridge-stp off brideg-fd 4.2 新建虚拟网卡配置 创建新的虚拟网卡配置\n注意：给虚拟网卡指定一个新的静态地址，是为下一级网络提供NAT服务\n$ nano /etc/network/interfaces.d/vmbr0-nat 配置内容\nauto vmbr0 # private sub network iface vmbr0 inet static address 192.168.100.1/24 bridge-ports none bridge-stp off bridge-fd 0 post-up echo 1 \u0026gt; /proc/sys/net/ipv4/ip_forward post-down echo 0 \u0026gt; /proc/sys/net/ipv4/ip_forward post-up iptables -t nat -A POSTROUTING -s \u0026#39;192.168.100.0/24\u0026#39; -o enp1s0 -j MASQUERADE post-down iptables -t nat -D POSTROUTING -s \u0026#39;192.168.100.0/24\u0026#39; -o enp1s0 -j MASQUERADE 4.3 应用配置 $ ifup -a ","date":1644214052,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"be49241a942b0ef6cc80b36ee3924881","permalink":"https://blog.cuile.com/post/proxmox/nat/","publishdate":"2022-02-07T14:07:32+08:00","relpermalink":"/post/proxmox/nat/","section":"post","summary":"1. 升级系统软件包 $ apt-get update $ apt-get dist-upgrade 2. 安装 ifupdown2 使用 ifupdown2 网络管理软件包，还可以实时重新加载网络配置，而无需重新启动。\n$ apt install ifupdown2 3. 配置物理网卡 使用 PVE 的 WEB 管理界面，设置物理网卡的配置。\n注意：一定要分配一个静态的IP地址，否则无法正常登录 PVE\n节点 \u003e 系统 \u003e 网络：\naddress：192.168.10.66/24 gateway：192.168.10.1 保存后应用配置\n4. 配置虚拟网卡 4.1 修改虚拟网卡配置 使用 PVE 提供管理界面进行配置。 删除 vmbr0 设备的所有配置内容。\n编辑 /etc/network/interfaces\n$ nano /etc/network/interfaces 加入\nsource /etc/network/interfaces.d/* # network interface settings; autogenerated # Please do NOT modify this file directly, unless you know what # you're doing. # # If you want to manage parts of the network configuration manually, # please utilize the 'source' or 'source-directory' directives to do # so. # PVE will preserve these directives, but will NOT read its network # configuration from sourced files, so do not attempt to move any of # the PVE managed interfaces into external files! source /etc/network/interfaces.d/* auto lo iface lo inet loopback auto enp1s0 iface enp1s0 inet static address 192.168.10.66/24 gateway 192.168.10.1 iface vmbr0 inet manual bridge-ports none bridge-stp off brideg-fd 4.2 新建虚拟网卡配置 创建新的虚拟网卡配置\n","tags":["NAT","proxmoxve"],"title":"ProxmoxVE 配置 NAT 网络","type":"post"},{"authors":null,"categories":null,"content":"本文记录OpenWrt设置透明代理的步骤及原理。\n1. 系统环境 硬件环境：Windows 10 Hyper-V虚拟机，单核处理器，256M内存 固件版本：OpenWrt 19.07.6 r11278-8055e38794 / LuCI openwrt-19.07 branch git-21.101.59933-c56d9f2 shadowsocks-libev：3.3.5 luci-app-shadowsocks：2.0.2 v2ray-plugin：4.37.3-20210413 ChinaDNS：1.3.3 luci-app-chinadns：1.6.2 https-dns-proxy：2021-01-17-5 luci-app-https-dns-proxy：git-21.062.76689-a607f9c-1 luci-i18n-https-dns-proxy-zh-cn：git-21.062.76689-a607f9c-1 2. 运行流程 透明代理的运行原理主要由DNS访问流程、IP访问流程两部分组成组成\n2.1 DNS访问流程 flowchart LR lh((localhost)); dm(Dnsmasq); cd(ChinaDNS); hdp(https-dns-proxy); ss(Shadowsocks); fd(国外DNS); dd(国内DNS); lh -- 1 udp:53 --\u0026gt; dm; dm -- 2 udp:5555 --\u0026gt; cd; cd -- 3.1 udp:5353--\u0026gt; hdp; cd -- 3.2 udp --\u0026gt; dd; hdp -- 4 tcp --\u0026gt; ss; ss -- 5 tcp --\u0026gt; fd; fd -. 6 .-\u0026gt; ss; ss -. 7 .-\u0026gt; hdp; hdp -. 8.1 .-\u0026gt; cd; dd -. 8.2 .-\u0026gt; cd; cd -. 9 缓存 .-\u0026gt; dm; dm -. 10 IP地址 .-\u0026gt; lh; 2.2 IP访问流程 flowchart LR fs(国外服务器); ds(国内服务器); lh((localhost)); route{chinadns_chnroute.txt}; ss(Shadowsocks); lh -- 1 --\u0026gt; route; route -- 2.1 国内IP --\u0026gt; ds; route -- 2.2 国外IP --\u0026gt; ss; ss -- 3 加密访问 --\u0026gt; fs; fs -. 4 返回加密数据 .-\u0026gt; ss; ds -. 5.1 返回数据 .-\u0026gt; lh; ss -. 5.2 返回解密数据 .-\u0026gt; lh; 3. 配置 3.1 Shadowsocks-libev + v2ray-plugin 服务器管理-编辑服务器-插件参数：一定要加上\u0026#34;loglevel=none\u0026#34;，如果不加v2ray-plugin插件几分钟就会被系统杀死 访问控制-被忽略IP列表：/etc/chinadns_chnroute.txt 3.2 https-dns-proxy 由于使用了v2ray-plugin 插件，导致Shadowsocks不再支持UDP包，所以使用TCP的方式查询DNS\n在开始/停止时更新DNSMASQ配置：不更新配置 如果自动更新配置，会影响到ChinaDNS的配置 Force Router DNS：Let local devices use their own DNS servers if set 实例 谷歌, 127.0.0.1, 5353 Cloudflare(安全防护), 127.0.0.1, 5454 3.3 ChinaDNS 启用双向过滤：勾选 监听端口：5555 上游服务器：114.114.114.114,127.0.0.1:5353,127.0.0.1:5454 3.4 DHCP/DNS 将OpenWrt的上游DNS指向ChinaDNS\n常规设置-DNS转发：127.0.0.1#5555 关闭使用解析文件，指定上游DNS\nHOSTS和解析文件-忽略解析文件：勾选 3.5 计划任务 ## For ipip.net ## 每周一12:30执行 30 12 * * 1 wget https://raw.githubusercontent.com/17mon/china_ip_list/master/china_ip_list.txt -O /tmp/china_ip_list.txt \u0026amp;\u0026amp; mv /tmp/china_ip_list.txt /etc/chinadns_chnroute.txt 5 * * * * /usr/bin/ss-subscribe auto \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 3.6 防火墙 常规设置-区域-wan-IP动态伪装：一定要勾选！！！ 参考文档 OpenWRT下安装和配置shadowsocks Shadowsocks + ChnRoute 实现 OpenWRT / LEDE 路由器自动科学上网 Shadowsocks for OpenWRT / LEDE 拾遗 ChinaDNS原理与源码分析 ","date":1644212239,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"740370ad2056338115e26123cee4adb3","permalink":"https://blog.cuile.com/post/openwrt/openwrt_shadowsocks_proxy/","publishdate":"2022-02-07T13:37:19+08:00","relpermalink":"/post/openwrt/openwrt_shadowsocks_proxy/","section":"post","summary":"本文记录OpenWrt设置透明代理的步骤及原理。\n1. 系统环境 硬件环境：Windows 10 Hyper-V虚拟机，单核处理器，256M内存 固件版本：OpenWrt 19.07.6 r11278-8055e38794 / LuCI openwrt-19.07 branch git-21.101.59933-c56d9f2 shadowsocks-libev：3.3.5 luci-app-shadowsocks：2.0.2 v2ray-plugin：4.37.3-20210413 ChinaDNS：1.3.3 luci-app-chinadns：1.6.2 https-dns-proxy：2021-01-17-5 luci-app-https-dns-proxy：git-21.062.76689-a607f9c-1 luci-i18n-https-dns-proxy-zh-cn：git-21.062.76689-a607f9c-1 2. 运行流程 透明代理的运行原理主要由DNS访问流程、IP访问流程两部分组成组成\n2.1 DNS访问流程 flowchart LR lh((localhost)); dm(Dnsmasq); cd(ChinaDNS); hdp(https-dns-proxy); ss(Shadowsocks); fd(国外DNS); dd(国内DNS); lh -- 1 udp:53 --\u003e dm; dm -- 2 udp:5555 --\u003e cd; cd -- 3.1 udp:5353--\u003e hdp; cd -- 3.2 udp --\u003e dd; hdp -- 4 tcp --\u003e ss; ss -- 5 tcp --\u003e fd; fd -. 6 .-\u003e ss; ss -. 7 .-\u003e hdp; hdp -. 8.1 .-\u003e cd; dd -. 8.2 .-\u003e cd; cd -. 9 缓存 .-\u003e dm; dm -. 10 IP地址 .-\u003e lh; 2.2 IP访问流程 flowchart LR fs(国外服务器); ds(国内服务器); lh((localhost)); route{chinadns_chnroute.txt}; ss(Shadowsocks); lh -- 1 --\u003e route; route -- 2.1 国内IP --\u003e ds; route -- 2.2 国外IP --\u003e ss; ss -- 3 加密访问 --\u003e fs; fs -. 4 返回加密数据 .-\u003e ss; ds -. 5.1 返回数据 .-\u003e lh; ss -. 5.2 返回解密数据 .-\u003e lh; 3. 配置 3.1 Shadowsocks-libev + v2ray-plugin 服务器管理-编辑服务器-插件参数：一定要加上\"loglevel=none\"，如果不加v2ray-plugin插件几分钟就会被系统杀死 访问控制-被忽略IP列表：/etc/chinadns_chnroute.txt 3.2 https-dns-proxy 由于使用了v2ray-plugin 插件，导致Shadowsocks不再支持UDP包，所以使用TCP的方式查询DNS\n","tags":["v2ray","proxy","ShadowSocks","OpenWRT"],"title":"OpenWRT 配置透明代理","type":"post"},{"authors":null,"categories":null,"content":"1. 使用自定义域名访问WEB管理界面 网络-DHCP/DNS-常规设置-DNS转发：/openwrt.lan/192.168.xxx.xxx 网络-DHCP/DNS-常规设置-重绑定保护：不勾选 /etc/config/uhttpd-option redirect_https：‘1’ 不强制跳转https ","date":1644211059,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"20f658e861a46cc2fd1a75ba78dc720d","permalink":"https://blog.cuile.com/post/openwrt/openwrt_dns/","publishdate":"2022-02-07T13:17:39+08:00","relpermalink":"/post/openwrt/openwrt_dns/","section":"post","summary":"1. 使用自定义域名访问WEB管理界面 网络-DHCP/DNS-常规设置-DNS转发：/openwrt.lan/192.168.xxx.xxx 网络-DHCP/DNS-常规设置-重绑定保护：不勾选 /etc/config/uhttpd-option redirect_https：‘1’ 不强制跳转https ","tags":["DNS","OpenWRT"],"title":"OpenWRT DNS设置","type":"post"},{"authors":null,"categories":null,"content":"1. 安装软件包 # opkg install kmod-nf-nathelper-extra # opkg install kmod-nf-ipvs-ftp 2. 添加配置 # nano /etc/sysctl.d/11-nf-conntrack.conf 增加\u0026#34;net.netfilter.nf_conntrack_helper=1\u0026#34;\n在使用FTP的主动模式时，要注意关闭网关上的ALG功能（如Windows ALG服务），同时使用可能引起失败\n参考文档\n原版OpenWRT启用FTP ALG功能 防火墙设置了NAT ALG功能导致FTP数据连接故障 ","date":1644199682,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"f938a6854d37f5fd8eac269f57ae0ae7","permalink":"https://blog.cuile.com/post/openwrt/openwrt_ftp_alg/","publishdate":"2022-02-07T10:08:02+08:00","relpermalink":"/post/openwrt/openwrt_ftp_alg/","section":"post","summary":"1. 安装软件包 # opkg install kmod-nf-nathelper-extra # opkg install kmod-nf-ipvs-ftp 2. 添加配置 # nano /etc/sysctl.d/11-nf-conntrack.conf 增加\"net.netfilter.nf_conntrack_helper=1\"\n在使用FTP的主动模式时，要注意关闭网关上的ALG功能（如Windows ALG服务），同时使用可能引起失败\n参考文档\n原版OpenWRT启用FTP ALG功能 防火墙设置了NAT ALG功能导致FTP数据连接故障 ","tags":["FTP","ALG","OpenWRT"],"title":"OpenWRT 启用 ALG 功能","type":"post"},{"authors":null,"categories":null,"content":"1. 复制 复制表数据，表结构的3种方法 2. 导入 2.1 使用 LOAD DATA 如果是导入有中文的数据，我的mysql 设置的utf8 字符集，所以你要导入的 文件也要保存utf-8的字符集，数据表列的顺序必须和excel的对应，否则导入的数据会有错误,\n文件路径名要上的 \u0026#34; \\ “要变成 “ \\ ”或者 \u0026#34; / “,否则会报错\n如果mysql用户没有读取本地文件的权限，那必须添加local参数，通过mysql client来读取文件\n通过load data infile，20秒导入100W数据\nLOAD DATA INFILE语句导入数据进入MySQL的一些注意事项\n3. 删除 清空表(truncate)与删除表中数据(delete) 详解 ","date":1642488628,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"58282e459bd75b4e5e10eb39931b8ed4","permalink":"https://blog.cuile.com/post/database/mysql_manual/","publishdate":"2022-01-18T14:50:28+08:00","relpermalink":"/post/database/mysql_manual/","section":"post","summary":"1. 复制 复制表数据，表结构的3种方法 2. 导入 2.1 使用 LOAD DATA 如果是导入有中文的数据，我的mysql 设置的utf8 字符集，所以你要导入的 文件也要保存utf-8的字符集，数据表列的顺序必须和excel的对应，否则导入的数据会有错误,\n文件路径名要上的 \" \\ “要变成 “ \\ ”或者 \" / “,否则会报错\n如果mysql用户没有读取本地文件的权限，那必须添加local参数，通过mysql client来读取文件\n通过load data infile，20秒导入100W数据\nLOAD DATA INFILE语句导入数据进入MySQL的一些注意事项\n3. 删除 清空表(truncate)与删除表中数据(delete) 详解 ","tags":["mysql"],"title":"MySQL 数据操作","type":"post"},{"authors":null,"categories":null,"content":" urllib.parse.urlencode(query, doseq=False, safe=’’, encoding=None, errors=None, quote_via=quote_plus) urllib.parse.urlencode 将对象或两元素序列转换为百分比编码的ASCII文本字符串，字符串是由’\u0026amp;‘字符分隔的一系列 key=value 对，其中 key 和 value 都使用 quote_via 函数引用。\nGET 请求 import urllib params = urllib.parse.urlencode({\u0026#39;spam\u0026#39;: 1, \u0026#39;eggs\u0026#39;: 2, \u0026#39;bacon\u0026#39;: 0}) url = \u0026#34;http://www.musi-cal.com/cgi-bin/query?%s\u0026#34; % params with urllib.request.urlopen(url) as f: print(f.read().decode(\u0026#39;utf-8\u0026#39;)) POST 请求 import urllib.request import urllib.parse data = urllib.parse.urlencode({\u0026#39;spam\u0026#39;: 1, \u0026#39;eggs\u0026#39;: 2, \u0026#39;bacon\u0026#39;: 0}) data = data.encode(\u0026#39;ascii\u0026#39;) with urllib.request.urlopen(\u0026#34;http://requestb.in/xrbl82xr\u0026#34;, data) as f: print(f.read().decode(\u0026#39;utf-8\u0026#39;)) 如果结果字符串要用作具有 urlopen() 函数的POST操作的 data，则它应该被编码为字节，否则将导致 TypeError。\n默认情况下 urlencode 函数使用 quote_plus() 函数进行编码，也可以选用 quote() 函数进行编码，两者最大的不同在于对特定字符的处理。\nurllib.parse.quote_plus(string, safe=’’, encoding=None, errors=None) 默认情况下使用 quote_plus() 函数，它将空格被编码为 ‘+’ 字符，而“/”字符被编码为 %2F，它遵循GET请求（application/x-www-form-urlencoded）的标准。 urllib.parse.quote(string, safe=’/’, encoding=None, errors=None) 可以作为备用的函数是 quote()，它将空格编码为 %20，字母，数字和 ‘_.-‘字符不被编码，而“/”字符被默认为安全字符不被编码。\n编码时会对所有字符进行编码处理，这会导致一些情况下编码后的参数不能被正确的识别，所以在使用时可根据编码的需求，指定一个编码函数。\nurllib.parse.urlencode({\u0026#39;spam\u0026#39;: 1, \u0026#39;eggs\u0026#39;: 2, \u0026#39;bacon\u0026#39;: 0}, quote_via=urllib.parse.quote) 但即使指定函数，还会有一些特殊情况，需要保留一些特定的字符不被编码。 比如，我们想得到下面的参数\nconstraints[colors][0]=blue\u0026amp;amp;constraints[colors][1]=%E7%99%BD%20%E8%89%B2\u0026amp;amp;constraints[colors][2]=red\u0026amp;amp;order=newest 但无论使用 quote_plus() 或 quote()，“[” 和 “]” 字符一定会被编码。\n要最大限度地控制编码的内容，请使用 quote() 并指定 safe 的值。\n遇到这种情况，就需要根据手册的说明，指定 safe 的值来保证某字符不会被编码。\nurllib.parse.urlencode(data, safe=\u0026#39;/[]\u0026#39;, quote_via=urllib.parse.quote) safe，encoding 和 errors 参数被传递到 quote_via (encoding 和 errors 参数仅当查询元素是 str 时被传递)。\n参考 urllib.parse.urlencode 手册 urllib.parse.quote 手册 ","date":1642404298,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"9cc41fc2364ef735268b27e2e34bdee5","permalink":"https://blog.cuile.com/post/python/urllib.parse.urlencode_manual/","publishdate":"2022-01-17T15:24:58+08:00","relpermalink":"/post/python/urllib.parse.urlencode_manual/","section":"post","summary":" urllib.parse.urlencode(query, doseq=False, safe=’’, encoding=None, errors=None, quote_via=quote_plus) urllib.parse.urlencode 将对象或两元素序列转换为百分比编码的ASCII文本字符串，字符串是由’\u0026‘字符分隔的一系列 key=value 对，其中 key 和 value 都使用 quote_via 函数引用。\nGET 请求 import urllib params = urllib.parse.urlencode({'spam': 1, 'eggs': 2, 'bacon': 0}) url = \"http://www.musi-cal.com/cgi-bin/query?%s\" % params with urllib.request.urlopen(url) as f: print(f.read().decode('utf-8')) POST 请求 import urllib.request import urllib.parse data = urllib.parse.urlencode({'spam': 1, 'eggs': 2, 'bacon': 0}) data = data.encode('ascii') with urllib.request.urlopen(\"http://requestb.in/xrbl82xr\", data) as f: print(f.read().decode('utf-8')) 如果结果字符串要用作具有 urlopen() 函数的POST操作的 data，则它应该被编码为字节，否则将导致 TypeError。\n默认情况下 urlencode 函数使用 quote_plus() 函数进行编码，也可以选用 quote() 函数进行编码，两者最大的不同在于对特定字符的处理。\nurllib.parse.quote_plus(string, safe=’’, encoding=None, errors=None) 默认情况下使用 quote_plus() 函数，它将空格被编码为 ‘+’ 字符，而“/”字符被编码为 %2F，它遵循GET请求（application/x-www-form-urlencoded）的标准。 urllib.parse.quote(string, safe=’/’, encoding=None, errors=None) 可以作为备用的函数是 quote()，它将空格编码为 %20，字母，数字和 ‘_.-‘字符不被编码，而“/”字符被默认为安全字符不被编码。\n","tags":["url编码","Python"],"title":"urllib.parse.urlencode 使用详解","type":"post"},{"authors":null,"categories":null,"content":"基于Centos 7\n查看设备信息 # 简单接口状态 $ nmcli dev status # 详细的接口信息 $ nmcli dev show # 接口的详细信息 $ nmcli dev show \u0026lt;interface-name\u0026gt; 查看连接(connection)的信息 # 简单信息 $ nmcli conn show # 详细的连接信息 $ nmcli conn show # 某个连接的详细信息 $ nmcli conn show \u0026lt;conn-name\u0026gt; 创建连接 nmcli conn add type \u0026lt;ethernet\u0026gt; con-name \u0026lt;conn-name\u0026gt; ifname \u0026lt;dev-name\u0026gt; ip4 \u0026lt;192.168.100.100/24\u0026gt; [gw4 \u0026lt;192.168.100.1\u0026gt;] 修改配置 静态IP改动态IP nmcli conn mod \u0026lt;conn-name\u0026gt; / ipv4.method auto / ipv4.address \u0026#34;\u0026#34; / ipv4.gateway \u0026#34;\u0026#34; / ipv4.dns \u0026#34;\u0026#34; 修改DNS $ nmcli conn mod \u0026lt;conn-name\u0026gt; ipv4.dns \u0026#34;1.2.4.8\u0026#34; 设置自动连接 # 查询和显示所有网络连接的自动连接属性的当前值 $ nmcli -f name,autoconnect connection # 更改网络连接的属性值 $ nmcli conn mod \u0026lt;conn-name\u0026gt; connection.autoconnect yes 配置生效 nmcli conn up \u0026lt;conn-name\u0026gt; 激活连接 $ nmcli conn up \u0026lt;conn-name\u0026gt; $ nmcli conn down \u0026lt;conn-name\u0026gt; $ nmcli dev connect \u0026lt;dev-name\u0026gt; $ nmcli dev disconnect \u0026lt;dev-name\u0026gt; 建议使用 nmcli dev disconnect interface-name 命令，而不是 nmcli con down connection-name 命令，因为连接断开可将该接口放到“手动”模式，这样做用户让 NetworkManager 启动某个连接前，或发生外部事件（比如载波变化、休眠或睡眠）前，不会启动任何自动连接。\n参考链接 nmcli 使用方法 在Linux系统上使用nmcli命令配置各种网络（有线、无线、vlan、vxlan、路由、网桥等） CentOS 7 下网络管理之命令行工具nmcli 修改 NetworkManager 配置文件的自动连接属性 在 Ubuntu/Debian 上安装和使用 NetworkManager (NMCLI) ","date":1642403878,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"f02e3736ad7d1a6e1424f2d69463d8c7","permalink":"https://blog.cuile.com/post/linux/nmcli_manual/","publishdate":"2022-01-17T15:17:58+08:00","relpermalink":"/post/linux/nmcli_manual/","section":"post","summary":"基于Centos 7\n查看设备信息 # 简单接口状态 $ nmcli dev status # 详细的接口信息 $ nmcli dev show # 接口的详细信息 $ nmcli dev show \u003cinterface-name\u003e 查看连接(connection)的信息 # 简单信息 $ nmcli conn show # 详细的连接信息 $ nmcli conn show # 某个连接的详细信息 $ nmcli conn show \u003cconn-name\u003e 创建连接 nmcli conn add type \u003cethernet\u003e con-name \u003cconn-name\u003e ifname \u003cdev-name\u003e ip4 \u003c192.168.100.100/24\u003e [gw4 \u003c192.168.100.1\u003e] 修改配置 静态IP改动态IP nmcli conn mod \u003cconn-name\u003e / ipv4.method auto / ipv4.address \"\" / ipv4.gateway \"\" / ipv4.dns \"\" 修改DNS $ nmcli conn mod \u003cconn-name\u003e ipv4.dns \"1.2.4.8\" 设置自动连接 # 查询和显示所有网络连接的自动连接属性的当前值 $ nmcli -f name,autoconnect connection # 更改网络连接的属性值 $ nmcli conn mod \u003cconn-name\u003e connection.autoconnect yes 配置生效 nmcli conn up \u003cconn-name\u003e 激活连接 $ nmcli conn up \u003cconn-name\u003e $ nmcli conn down \u003cconn-name\u003e $ nmcli dev connect \u003cdev-name\u003e $ nmcli dev disconnect \u003cdev-name\u003e 建议使用 nmcli dev disconnect interface-name 命令，而不是 nmcli con down connection-name 命令，因为连接断开可将该接口放到“手动”模式，这样做用户让 NetworkManager 启动某个连接前，或发生外部事件（比如载波变化、休眠或睡眠）前，不会启动任何自动连接。\n","tags":["CLI","nmcli","network","Linux"],"title":"使用 nmcli 配置网络","type":"post"},{"authors":null,"categories":null,"content":" sed [OPTION] [expression] file [OPTION] -n 屏蔽输出 -i 替换模式 -i.bak 替换前先备份文件 -E 使用扩展正则表达式，语法更接近现代正则表达式（如 Perl、Python、JavaScript），代码更清晰易读（去掉了很多反斜杠），减少转义错误 -e 使用表达式，可使用多个表达式 [expression] s/regular/replace/ 替换命令 0,/regular/s//replace/ 仅替换从文件开头（第 0 行）首次匹配regular成功的内容，只用GNU版本的sed /regular/replace/g 匹配整行，默认只匹配一次 /regular/replace/d 删除行 /regular/replace/p 打印匹配的行 读取指定行 sed -n \u0026#39;1,2p\u0026#39; file 删除行 # 删除空行 sed -i \u0026#39;/^\\s*$/d\u0026#39; merge1.log sed -i \u0026#39;/^$/d\u0026#39; filename.txt # `^$` 匹配空行 # 按行号删除 sed -i \u0026#39;5d\u0026#39; filename.txt # 删除第5行 # 删除最后一行 sed -i \u0026#39;$d\u0026#39; filename.txt # `$` 表示最后一行 # 删除连续行 sed -i \u0026#39;10,20d\u0026#39; filename.txt # 删除第10到20行 # 删除不连续的行 sed -i \u0026#39;5d;10d;15d\u0026#39; filename.txt # 删除第5、10、15行 # 删除包含特定文本的行 sed -i \u0026#39;/pattern/d\u0026#39; filename.txt # 删除含\u0026#34;pattern\u0026#34;的行 # 删除不匹配的行（保留匹配行） sed -i \u0026#39;/pattern/!d\u0026#39; filename.txt # `!` 表示取反 # 删除以某文本开头/结尾的行 sed -i \u0026#39;/^prefix/d\u0026#39; filename.txt # 删除以\u0026#34;prefix\u0026#34;开头的行 sed -i \u0026#39;/suffix$/d\u0026#39; filename.txt # 删除以\u0026#34;suffix\u0026#34;结尾的行 删除冗余信息 sed -i \u0026#39;s/.*a2p_replyclient_log.*[infoerror].[0-9].log.gz://\u0026#39; merge.log \\ \u0026amp;\u0026amp; sed -i \u0026#39;s/org.springframework.amqp.rabbit.RabbitListenerEndpointContainer.* - //\u0026#39; merge.log \\ \u0026amp;\u0026amp; sed -i \u0026#39;/.*send 1 time for the url is .*/d\u0026#39; merge.log \\ \u0026amp;\u0026amp; sed -i \u0026#39;/.*redis key:[0-9]*,value:.*/d\u0026#39; merge.log sed -i \u0026#39;/\u0026gt;\u0026gt;\u0026gt;\u0026gt;.* retry:2/d\u0026#39; 2021.8.log sed -i \u0026#39;s/the content of the url:.*receiveStatusReportResultChinaMobile.shtml //\u0026#39; 2021.8.log 删除毫秒 sed -i \u0026#39;s/\\.[0-9]\\{0,3\\}\\( \\[\\)/\\1/\u0026#39; merge.log 删除时间 sed -i \u0026#39;s/.*\\(\\[INFO\\]\\)/\\1/\u0026#39; 2021.8.log sed -i \u0026#39;s/.*\\(\\[ERROR\\]\\)/\\1/\u0026#39; 2021.8.log sed -i \u0026#39;s/time:.*,\\(is_china_mobile\\)/\\1/\u0026#39; 2021.8.log 删除冗余字符 sed -i \u0026#39;s/error for the url//\u0026#39; merge.log sed -i \u0026#39;s/can not read content from the url//\u0026#39; merge.log 统计 sed -n \u0026#39;/ status:DELIVRD,/p\u0026#39; result.log | wc -l sed -n \u0026#39;/\u0026#34;originalStatus\u0026#34;:\u0026#34;DELIVRD\u0026#34;/p\u0026#39; merge.log | wc -l 去重复 awk \u0026#39;!x[$0]++\u0026#39; merge.log sort -n merge.log | uniq 修改Ubuntu源地址 sudo sed -i \u0026#39;s/\\(archive\\|security\\).ubuntu/mirrors.aliyun/\u0026#39; /etc/apt/sources.list SSH连接不自动断开 sed -i \u0026#39;s/^#\\(ClientAliveInterval\\) 0$/\\1 60/g\u0026#39; /etc/ssh/sshd_config sed -i \u0026#39;s/^#\\(ClientAliveCountMax\\) 3$/\\1 5/g\u0026#39; /etc/ssh/sshd_config systemctl restart sshd /etc/hosts # sed 参考 http://man.linuxde.net/sed # https://www.cnblogs.com/ggjucheng/archive/2013/01/13/2856901.html sed ...... 参考文档 sed入门详解教程 ","date":1642389527,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"80507d8ae409480e51cf2af16377407a","permalink":"https://blog.cuile.com/post/linux/sed_manual/","publishdate":"2022-01-17T11:18:47+08:00","relpermalink":"/post/linux/sed_manual/","section":"post","summary":" sed [OPTION] [expression] file [OPTION] -n 屏蔽输出 -i 替换模式 -i.bak 替换前先备份文件 -E 使用扩展正则表达式，语法更接近现代正则表达式（如 Perl、Python、JavaScript），代码更清晰易读（去掉了很多反斜杠），减少转义错误 -e 使用表达式，可使用多个表达式 [expression] s/regular/replace/ 替换命令 0,/regular/s//replace/ 仅替换从文件开头（第 0 行）首次匹配regular成功的内容，只用GNU版本的sed /regular/replace/g 匹配整行，默认只匹配一次 /regular/replace/d 删除行 /regular/replace/p 打印匹配的行 读取指定行 sed -n '1,2p' file 删除行 # 删除空行 sed -i '/^\\s*$/d' merge1.log sed -i '/^$/d' filename.txt # `^$` 匹配空行 # 按行号删除 sed -i '5d' filename.txt # 删除第5行 # 删除最后一行 sed -i '$d' filename.txt # `$` 表示最后一行 # 删除连续行 sed -i '10,20d' filename.txt # 删除第10到20行 # 删除不连续的行 sed -i '5d;10d;15d' filename.txt # 删除第5、10、15行 # 删除包含特定文本的行 sed -i '/pattern/d' filename.txt # 删除含\"pattern\"的行 # 删除不匹配的行（保留匹配行） sed -i '/pattern/!d' filename.txt # `!` 表示取反 # 删除以某文本开头/结尾的行 sed -i '/^prefix/d' filename.txt # 删除以\"prefix\"开头的行 sed -i '/suffix$/d' filename.txt # 删除以\"suffix\"结尾的行 删除冗余信息 sed -i 's/.*a2p_replyclient_log.*[infoerror].[0-9].log.gz://' merge.log \\ \u0026\u0026 sed -i 's/org.springframework.amqp.rabbit.RabbitListenerEndpointContainer.* - //' merge.log \\ \u0026\u0026 sed -i '/.*send 1 time for the url is .*/d' merge.log \\ \u0026\u0026 sed -i '/.*redis key:[0-9]*,value:.*/d' merge.log sed -i '/\u003e\u003e\u003e\u003e.* retry:2/d' 2021.8.log sed -i 's/the content of the url:.*receiveStatusReportResultChinaMobile.shtml //' 2021.8.log 删除毫秒 sed -i 's/\\.[0-9]\\{0,3\\}\\( \\[\\)/\\1/' merge.log 删除时间 sed -i 's/.*\\(\\[INFO\\]\\)/\\1/' 2021.8.log sed -i 's/.*\\(\\[ERROR\\]\\)/\\1/' 2021.8.log sed -i 's/time:.*,\\(is_china_mobile\\)/\\1/' 2021.8.log 删除冗余字符 sed -i 's/error for the url//' merge.log sed -i 's/can not read content from the url//' merge.log 统计 sed -n '/ status:DELIVRD,/p' result.log | wc -l sed -n '/\"originalStatus\":\"DELIVRD\"/p' merge.log | wc -l 去重复 awk '!x[$0]++' merge.log sort -n merge.log | uniq 修改Ubuntu源地址 sudo sed -i 's/\\(archive\\|security\\).ubuntu/mirrors.aliyun/' /etc/apt/sources.list SSH连接不自动断开 sed -i 's/^#\\(ClientAliveInterval\\) 0$/\\1 60/g' /etc/ssh/sshd_config sed -i 's/^#\\(ClientAliveCountMax\\) 3$/\\1 5/g' /etc/ssh/sshd_config systemctl restart sshd /etc/hosts # sed 参考 http://man.linuxde.net/sed # https://www.cnblogs.com/ggjucheng/archive/2013/01/13/2856901.html sed ...... 参考文档 sed入门详解教程 ","tags":["sed","CLI","Linux"],"title":"使用 sed 命令操作","type":"post"},{"authors":null,"categories":null,"content":"初始化配置 # 配置时区 timedatectl set-timezone Asia/Shanghai # 关闭邮件服务 systemctl stop \u0026#39;postfix@*\u0026#39; ; systemctl disable \u0026#39;postfix@\\x2a\u0026#39; ; apt purge postfix # 配置Shell提示符 echo \u0026#34;PS1=\u0026#39;\\[\\e[36;40m\\][\\D{%Y-%m-%d} \\A] \\[\\e[0m\\] \\[\\e[35;40m\\]\\w\\[\\e[0m\\]\\n\\[\\e[33;40m\\][\\u@\\H]\\[\\e[0m\\] \\\\$ \u0026#39;\u0026#34; \u0026gt;\u0026gt; ~/.bashrc # 打开自定义命令 sed -E -i.bak \\ -e \u0026#39;/(export|eval|alias (ls|ll|l|rm|cp|mv))/s/^# //\u0026#39; ~/.bashrc \\ \u0026amp;\u0026amp; . ~/.bashrc # 配置 sshd # 允许root密码登录 # 允许密码登录 # 解决SSH自动断开问题 sed -E -i.bak \\ -e \u0026#39;s/#(Port 22)/\\1/\u0026#39; \\ -e \u0026#39;s/#(PermitRootLogin) prohibit-password/\\1 yes/\u0026#39; \\ -e \u0026#39;s/#(PubkeyAuthentication yes)/\\1/\u0026#39; \\ -e \u0026#39;s/#(PasswordAuthentication yes)/\\1/\u0026#39; \\ -e \u0026#39;s/#(AllowTcpForwarding yes)/\\1/\u0026#39; \\ -e \u0026#39;s/(X11Forwarding yes)/#\\1/\u0026#39; \\ -e \u0026#39;s/#(Compression delayed)/\\1/\u0026#39; \\ -e \u0026#39;s/#(ClientAliveInterval) 0/\\1 60/\u0026#39; \\ -e \u0026#39;s/#(ClientAliveCountMax) 3/\\1 3/\u0026#39; \\ /etc/ssh/sshd_config \\ \u0026amp;\u0026amp; systemctl restart sshd.service 软件更新 软件库管理\n配置防火墙 iptables 配置\nUbuntu 22 环境初始化 关闭IPv6 # /etc/sysctl.conf # 禁用所有接口的IPv6 net.ipv6.conf.all.disable_ipv6 = 1 # 禁用默认接口的IPv6 net.ipv6.conf.default.disable_ipv6 = 1 # 禁用特定接口（如eth0）的IPv6，将eth0替换为你的实际接口名 net.ipv6.conf.eth0.disable_ipv6 = 1 sysctl -p # /etc/hosts # ::1 ...... reboot 远程公私钥登录 # 生成公钥、私钥 ssh-keygen -t rsa -b 4096 -C \u0026#34;your_email@example.com\u0026#34; ... Enter a file in which to save the key (/home/you/.ssh/algorithm): \u0026lt;key_name\u0026gt; Enter passphrase (empty for no passphrase): [输入密码] Enter same passphrase again: [再次输入密码] # 设置访问权限 cd ~/.ssh chmod 600 \u0026lt;key_name\u0026gt; # 将公钥追加到 authorized_keys 文件，可追加多个公钥 cat \u0026lt;key.pub\u0026gt; \u0026gt;\u0026gt; authorized_keys # 私钥在 SSH 登录时使用 网络端口操作 # 查看端口占用 # 查看所有端口占用情况 netstat -tlunp # 查看指定端口占用情况 netstat -tlunp | grep \u0026lt;port\u0026gt; 查看系统版本 lsb_release -a cat /etc/redhat-release cat /etc/issue 系统进程操作 # 定位高CPU占用 ps H -eo user,pid,ppid,tid,time,%cpu,cmd --sort=%cpu # 可视化显示CPU的使用状况的工具 yum install -y htop htop # 查看进程的启动目录 ls -l /proc/\u0026lt;PID\u0026gt;/cwd 查看CPU和内存使用情况 查看运行进程的启动目录 硬件 # 查看硬件信息 hwinfo --short # 查看内核提示的缺失驱动 dmesg | grep -i \u0026#34;firmware\\|error\u0026#34; 磁盘操作 # 修改硬盘挂载目录 # 卸载硬盘 umount -v /mnt/raid1-2disk-500G # 修改挂载目录 mv /mnt/raid1-2disk-500G /mnt/raid1-250G-2disk # 修改/etc/fstab文件里的挂载目录 nano /etc/fstab # 重装挂载 mount -av /dev/md127 /mnt/raid1-250G-2disk 查询并筛选 磁盘空间 统计 排序 修改密码 passwd \u0026lt;username\u0026gt; 查看文件夹大小 du -h --max-depth=1 \u0026lt;path\u0026gt; 实时查看文件变化 apt install inotify-tools inotifywait -m -r -e modify,create,delete \u0026lt;path\u0026gt; 使用ssh跳转 ssh -p 2222 \\ -i ~/.ssh/cuile.key \\ -L localhost:5432:169.254.0.4:8888 \\ -o StrictHostKeyChecking=accept-new \\ -o SessionType=none \\ -o Compression=yes \\ -o BatchMode=yes \\ -o AddressFamily=inet \\ cuile@pro.cuile.com # 测试代码网络 curl -x http://localhost:5432 ifconfig.me # 返回代理服务器的IP，即为成功。 传输文件 # 拉取文件 scp -i ~/.ssh/cuile.key \\ -P 28883 \\ root@dev.cuile.com:~/Container-SmartDNS/smartdns.tar /root/Container-SmartDNS/ # 推送文件 scp -i ~/.ssh/cuile.key \\ -P 28883 \\ /root/Container-SmartDNS/ root@dev.cuile.com:~/Container-SmartDNS/smartdns.tar ","date":1642388827,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"6c48df5d007445a0131164c82c4d913d","permalink":"https://blog.cuile.com/post/linux/configure_manual/","publishdate":"2022-01-17T11:07:07+08:00","relpermalink":"/post/linux/configure_manual/","section":"post","summary":"初始化配置 # 配置时区 timedatectl set-timezone Asia/Shanghai # 关闭邮件服务 systemctl stop 'postfix@*' ; systemctl disable 'postfix@\\x2a' ; apt purge postfix # 配置Shell提示符 echo \"PS1='\\[\\e[36;40m\\][\\D{%Y-%m-%d} \\A] \\[\\e[0m\\] \\[\\e[35;40m\\]\\w\\[\\e[0m\\]\\n\\[\\e[33;40m\\][\\u@\\H]\\[\\e[0m\\] \\\\$ '\" \u003e\u003e ~/.bashrc # 打开自定义命令 sed -E -i.bak \\ -e '/(export|eval|alias (ls|ll|l|rm|cp|mv))/s/^# //' ~/.bashrc \\ \u0026\u0026 . ~/.bashrc # 配置 sshd # 允许root密码登录 # 允许密码登录 # 解决SSH自动断开问题 sed -E -i.bak \\ -e 's/#(Port 22)/\\1/' \\ -e 's/#(PermitRootLogin) prohibit-password/\\1 yes/' \\ -e 's/#(PubkeyAuthentication yes)/\\1/' \\ -e 's/#(PasswordAuthentication yes)/\\1/' \\ -e 's/#(AllowTcpForwarding yes)/\\1/' \\ -e 's/(X11Forwarding yes)/#\\1/' \\ -e 's/#(Compression delayed)/\\1/' \\ -e 's/#(ClientAliveInterval) 0/\\1 60/' \\ -e 's/#(ClientAliveCountMax) 3/\\1 3/' \\ /etc/ssh/sshd_config \\ \u0026\u0026 systemctl restart sshd.service 软件更新 软件库管理\n","tags":["CLI","bash","ssh","top","linux","setup"],"title":"Linux 系统配置","type":"post"},{"authors":null,"categories":null,"content":"设置流程 不过多说明了，网上教程非常多，可以找来看。\n参考文档\n使用 Github Actions 自动发布 hugo 站点 Hugo的基本安装｜网站生成｜托管至Github Pages 各种坑位 1. 网页正常部署后，访问时页面却无法正常显示，部局完全是乱的。 这可能是https请求报\u0026#34;block:mixed-content\u0026#34;错误导致的，是浏览器不允许在https页面里嵌入http的请求，现在高版本的浏览器为了用户体验，都不会弹窗报错，只会在控制台上打印一条错误信息。\n解决这个问题，可以从以下2点入手：\n1.1. 在\u0026#34;theme/\u0026lt;YouThemeName\u0026gt;/layouts/partials/head.html\u0026#34;文件内，添加代码\n\u0026lt;meta http-equiv=\u0026#34;Content-Security-Policy\u0026#34; content=\u0026#34;upgrade-insecure-requests\u0026#34;\u0026gt; https请求报错block:mixed-content问题的解决办法 1.2. 确保config.toml文件内，“baseUrl\u0026#34;的值与实际地址一致。\n2. config.toml 里的 theme 值，要与主题文档夹名一致，不然可能会导致主题无法应用的问题。 3. Github Actions 设置里的 gh-pages.yml 写法要注意 “Setup Hugo\u0026#34;项目里，标准版本与扩展版本的参数写法不一样。\n# 使用扩展版本 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.92.0\u0026#39; extended: true # 使用标准版本 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; GitHub Actions for Hugo 4. 自定义域名 4.1. 在\u0026#34;theme/\u0026lt;YouThemeName\u0026gt;/static\u0026#34;目录下，添加CNAME文件，里面放自定义的域名\nblog.cuile.com 上传后，Settings -\u0026gt; Pages -\u0026gt; Custom domain 设置中会出现自定义的域名\n4.2. 修改 baseurl\n... baseurl = \u0026#34;https://blog.cuile.com/\u0026#34; ... ","date":1642151706,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"849734b6d6facd3142bb1b86e9d6f170","permalink":"https://blog.cuile.com/post/hugo_setup_for_github/","publishdate":"2022-01-14T17:15:06+08:00","relpermalink":"/post/hugo_setup_for_github/","section":"post","summary":"设置流程 不过多说明了，网上教程非常多，可以找来看。\n参考文档\n使用 Github Actions 自动发布 hugo 站点 Hugo的基本安装｜网站生成｜托管至Github Pages 各种坑位 1. 网页正常部署后，访问时页面却无法正常显示，部局完全是乱的。 这可能是https请求报\"block:mixed-content\"错误导致的，是浏览器不允许在https页面里嵌入http的请求，现在高版本的浏览器为了用户体验，都不会弹窗报错，只会在控制台上打印一条错误信息。\n解决这个问题，可以从以下2点入手：\n1.1. 在\"theme/\u003cYouThemeName\u003e/layouts/partials/head.html\"文件内，添加代码\n\u003cmeta http-equiv=\"Content-Security-Policy\" content=\"upgrade-insecure-requests\"\u003e https请求报错block:mixed-content问题的解决办法 1.2. 确保config.toml文件内，“baseUrl\"的值与实际地址一致。\n2. config.toml 里的 theme 值，要与主题文档夹名一致，不然可能会导致主题无法应用的问题。 3. Github Actions 设置里的 gh-pages.yml 写法要注意 “Setup Hugo\"项目里，标准版本与扩展版本的参数写法不一样。\n# 使用扩展版本 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: '0.92.0' extended: true # 使用标准版本 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: 'latest' GitHub Actions for Hugo 4. 自定义域名 4.1. 在\"theme/\u003cYouThemeName\u003e/static\"目录下，添加CNAME文件，里面放自定义的域名\nblog.cuile.com 上传后，Settings -\u003e Pages -\u003e Custom domain 设置中会出现自定义的域名\n4.2. 修改 baseurl\n","tags":["Hugo","Github Action","Blog"],"title":"Github使用Hugo生成Blog","type":"post"},{"authors":null,"categories":null,"content":"镜像列表 [docker|podman] image ls -a # or [docker|podman] images 容器列表 [docker|podman] container ls -a # or [docker|podman] ps 查看输出 [docker|podman] compose -f \u0026lt;yaml_file\u0026gt; logs [-f] [service name] # or [docker|podman] logs [-f] [container id] 验证配置文件 [docker|podman] compose -f \u0026lt;yaml_file\u0026gt; config 删除冗余镜像 echo \u0026#39;y\u0026#39; | [docker|podman] system prune 导入导出镜像 # 导出 [docker|podman] save -o \u0026lt;image\u0026gt;.tar \u0026lt;image_name:label | image_id\u0026gt; # 导入 # 使用image_id导出的镜像，导入时也没有名字 [docker|podman] load -i \u0026lt;image\u0026gt;.tar 不启动镜像，查看镜像内的文件 # 创建临时容器 [docker|podman] conatiner create --name \u0026lt;container_name\u0026gt; \u0026lt;image_name\u0026gt; # 从容器复制文件到宿主机 [docker|podman] conatiner cp \u0026lt;container_name\u0026gt;:\u0026lt;file_path\u0026gt; \u0026lt;dest_path\u0026gt; # 清理临时窗口 [docker|podman] container rm \u0026lt;container_name\u0026gt; 创建桥接网络 [docker|podman] network create [name] [docker|podman]快捷命令 echo \u0026#34;alias d-ll=\u0026#39;[docker|podman] image ls -a; echo; [docker|podman] container ls -a\u0026#39;\u0026#34; \u0026gt;\u0026gt; ~/.bashrc \\ \u0026amp;\u0026amp; echo \u0026#34;alias d-ps=\u0026#39;[docker|podman] ps\u0026#39;\u0026#34; \u0026gt;\u0026gt; ~/.bashrc \\ \u0026amp;\u0026amp; echo \u0026#34;alias d-clean=\u0026#39;[docker|podman] system prune -f\u0026#39;\u0026#34; \u0026gt;\u0026gt; ~/.bashrc \\ \u0026amp;\u0026amp; echo \u0026#34;alias d-rm=\u0026#39;_a(){ [docker|podman] image rm $1; echo; [docker|podman] container rm $1; }; _a\u0026#39;\u0026#34; \u0026gt;\u0026gt; ~/.bashrc \\ \u0026amp;\u0026amp; echo \u0026#34;alias d-exec=\u0026#39;_a(){ [docker|podman] exec -it $1 /bin/bash; }; _a\u0026#39;\u0026#34; \u0026gt;\u0026gt; ~/.bashrc \\ \u0026amp;\u0026amp; echo \u0026#34;alias d-stop=\u0026#39;_a(){ [docker|podman] container stop $1; }; _a\u0026#39;\u0026#34; \u0026gt;\u0026gt; ~/.bashrc \\ \u0026amp;\u0026amp; echo \u0026#34;alias d-kill=\u0026#39;_a(){ [docker|podman] container kill $1; }; _a\u0026#39;\u0026#34; \u0026gt;\u0026gt; ~/.bashrc source ~/.bashrc ","date":1642083652,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"758fe3a4c8f3e8c4209dcb9d428524ec","permalink":"https://blog.cuile.com/post/container/docker_cli/","publishdate":"2022-01-13T22:20:52+08:00","relpermalink":"/post/container/docker_cli/","section":"post","summary":"镜像列表 [docker|podman] image ls -a # or [docker|podman] images 容器列表 [docker|podman] container ls -a # or [docker|podman] ps 查看输出 [docker|podman] compose -f \u003cyaml_file\u003e logs [-f] [service name] # or [docker|podman] logs [-f] [container id] 验证配置文件 [docker|podman] compose -f \u003cyaml_file\u003e config 删除冗余镜像 echo 'y' | [docker|podman] system prune 导入导出镜像 # 导出 [docker|podman] save -o \u003cimage\u003e.tar \u003cimage_name:label | image_id\u003e # 导入 # 使用image_id导出的镜像，导入时也没有名字 [docker|podman] load -i \u003cimage\u003e.tar 不启动镜像，查看镜像内的文件 # 创建临时容器 [docker|podman] conatiner create --name \u003ccontainer_name\u003e \u003cimage_name\u003e # 从容器复制文件到宿主机 [docker|podman] conatiner cp \u003ccontainer_name\u003e:\u003cfile_path\u003e \u003cdest_path\u003e # 清理临时窗口 [docker|podman] container rm \u003ccontainer_name\u003e 创建桥接网络 [docker|podman] network create [name] [docker|podman]快捷命令 echo \"alias d-ll='[docker|podman] image ls -a; echo; [docker|podman] container ls -a'\" \u003e\u003e ~/.bashrc \\ \u0026\u0026 echo \"alias d-ps='[docker|podman] ps'\" \u003e\u003e ~/.bashrc \\ \u0026\u0026 echo \"alias d-clean='[docker|podman] system prune -f'\" \u003e\u003e ~/.bashrc \\ \u0026\u0026 echo \"alias d-rm='_a(){ [docker|podman] image rm $1; echo; [docker|podman] container rm $1; }; _a'\" \u003e\u003e ~/.bashrc \\ \u0026\u0026 echo \"alias d-exec='_a(){ [docker|podman] exec -it $1 /bin/bash; }; _a'\" \u003e\u003e ~/.bashrc \\ \u0026\u0026 echo \"alias d-stop='_a(){ [docker|podman] container stop $1; }; _a'\" \u003e\u003e ~/.bashrc \\ \u0026\u0026 echo \"alias d-kill='_a(){ [docker|podman] container kill $1; }; _a'\" \u003e\u003e ~/.bashrc source ~/.bashrc ","tags":["CLI","docker","podman","container"],"title":"docker|podman 命令","type":"post"},{"authors":null,"categories":null,"content":"Python 的 pypi.python.org 站点终于要退休了，而新的接任者 pypi.org 无论从美观、风格上都让人大大的喜欢，终于在审美一这项上及格了。\n而且新的 pypi.org 能够正确的渲染 Markdown 格式的描述，实在是让人欣慰，终于可以和 Github 同步了，不用在麻烦的转换一次了。\n下面就来聊聊，如何正确的把库发布到 pypi.org 上：\n1. 注册 pypi.org 账号 嗯，这是正确的废话！\n2. 编写 setup.py setup.py 的内容比较重要，但其它的细节不谈，主要聊聊 long_description 部分，这部分是对库能力的详细描述。\n如果说 keywords 和 description 能提高别人搜索到项目的概率的话，那 long_description 就在很大程度上决定别人对你对项目有没有进一步的想法了。\n在针对 long_description 的网上介绍中，对具体使用方法明确写出的是少之又少，所以我今天就特别举例说明一下。\n2.1 setup.py #!/usr/bin/env python # coding: utf-8 from setuptools import setup setup( name=\u0026#39;sequence2hash\u0026#39;, version=\u0026#39;1.1.2\u0026#39;, keywords=\u0026#39;tuple dict list sequence hash key/value\u0026#39;, packages=[\u0026#39;sequence2hash\u0026#39;], url=\u0026#39;https://github.com/Cuile/sequence2hash\u0026#39;, description=\u0026#39;This tool converts a valid value in a sequence to a hash and contains a path to a valid value in the key field\u0026#39;, long_description_content_type=\u0026#39;text/markdown\u0026#39;, long_description=open(\u0026#39;README.md\u0026#39;, encoding=\u0026#39;utf8\u0026#39;).read(), author=\u0026#39;cuile\u0026#39;, author_email=\u0026#39;i@cuile.com\u0026#39; ) 2.2 读取 readme.md 文件 long_description=open(\u0026#39;README.md\u0026#39;, encoding=\u0026#39;utf8\u0026#39;).read() 这句代码是较少明确说明的，可以不引用 io 库，而直接使用 open 函数读取文件内容，由于 pypi.org 支持 Markdown ，所以可以和 Github 使用同一份 README.md 文件。\n2.3 设置内容类型 long_description_content_type=\u0026#39;text/markdown\u0026#39; 这句很重要，标明元数据字段中 long_description 的格式，支持 text/plain, text/x-rst, text/markdown 。\nA content type can be specified with the long_description_content_type argument, which can be one of text/plain, text/x-rst, or text/markdown, corresponding to no formatting, reStructuredText (reST), and the Github-flavored Markdown dialect of Markdown respectively.\n3. 打包上传 先升级一下必要的打包工具，setuptools\u0026gt;= 38.6.0 才能使用新的元数据生成发布包， twine\u0026gt; = 1.11.0 才能将元数据正确发送到 PyPI 。\n$ pip install -U setuptools twine # 打包 $ python setup.py sdist # 上传 $ twine upload dist/* twine 会依次上传 dist 文件夹下的所有内容，但 pypi.org 对已上传过的文件和版本是不允许再次上传的，所以每次更新内容时除了 version 字段递增外，还要在打包前删除 dist 文件夹，由打包命令重新生成，以防文件夹内有老版本的包，导致上传失败。\n参考 如何将自己的程序发布到 PyPI PyPI 终于支持 Markdown 了 打包 python package 到 pypi 在Pypi上发布自己的Python包 Packaging and distributing projects EMOJI CHEAT SHEET GitHub上README写法暨GFM语法解读 ","date":1526021397,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"459d549bddefc2efa9dc7d221f4b78e3","permalink":"https://blog.cuile.com/post/python/release_pypi_package/","publishdate":"2018-05-11T14:49:57+08:00","relpermalink":"/post/python/release_pypi_package/","section":"post","summary":"Python 的 pypi.python.org 站点终于要退休了，而新的接任者 pypi.org 无论从美观、风格上都让人大大的喜欢，终于在审美一这项上及格了。\n而且新的 pypi.org 能够正确的渲染 Markdown 格式的描述，实在是让人欣慰，终于可以和 Github 同步了，不用在麻烦的转换一次了。\n下面就来聊聊，如何正确的把库发布到 pypi.org 上：\n1. 注册 pypi.org 账号 嗯，这是正确的废话！\n2. 编写 setup.py setup.py 的内容比较重要，但其它的细节不谈，主要聊聊 long_description 部分，这部分是对库能力的详细描述。\n如果说 keywords 和 description 能提高别人搜索到项目的概率的话，那 long_description 就在很大程度上决定别人对你对项目有没有进一步的想法了。\n在针对 long_description 的网上介绍中，对具体使用方法明确写出的是少之又少，所以我今天就特别举例说明一下。\n2.1 setup.py #!/usr/bin/env python # coding: utf-8 from setuptools import setup setup( name='sequence2hash', version='1.1.2', keywords='tuple dict list sequence hash key/value', packages=['sequence2hash'], url='https://github.com/Cuile/sequence2hash', description='This tool converts a valid value in a sequence to a hash and contains a path to a valid value in the key field', long_description_content_type='text/markdown', long_description=open('README.md', encoding='utf8').read(), author='cuile', author_email='i@cuile.com' ) 2.2 读取 readme.md 文件 long_description=open('README.md', encoding='utf8').read() 这句代码是较少明确说明的，可以不引用 io 库，而直接使用 open 函数读取文件内容，由于 pypi.org 支持 Markdown ，所以可以和 Github 使用同一份 README.md 文件。\n","tags":["PyPi","Python"],"title":"在pypi上发布自己的Python库","type":"post"},{"authors":null,"categories":null,"content":"崔乐 📱 13810393066 | 📧 i@cuile.com\n🎓 北京理工大学 | 计算机科学与技术 | 本科\n💼 15年移动互联网产研经验 | 10年团队管理\n🎨 核心优势 15年移动互联网产研经验，10年团队管理经验。 精通产品全生命周期管理，擅长从0到1构建产品体系。 熟练使用Axure、JustinMind等原型工具，掌握Python、SQL等数据分析工具。 擅长平台级、技术型产品，数据驱动产品决策 🗃 工作经历 2024/05-2024/08 彩讯科技股份有限公司 - 高级项目经理 互联网通信云与数字化解决方案服务商\n工作职责：\n“AI+大数据数智化”产品改造：\n根据AI领域的发展趋势，结合《终端管理与服务系统》的业务痛点和需求，以营销场景切入，从营销决策、营销策略、市场洞察、售后服务四个角度规划数智化产品改造方案。 根据AI技术在系统中的应用可能性，结合RAG技术构建终端营销知识库，使用可视化的Agent编排智能体和Prompt管理能力，重构产品架构。 撰写产品规划PPT，向公司领导及移动领导汇报产品思路。 数据运营与厂商对接：\n积极了解终端厂商的需求特点、数据资源及合作意向，挖掘数据潜在价值，为厂商提供数据增值服务。 优化数据标签体系，根据自己所学的网络知识，纠正了家庭宽带数据统计口径中的错误。 系统培训与推广：\n根据移动各省公司对系统的使用需求，量身定制培训课程和教材。 采用线上通过录制操作视频、开展网络直播课程等形式，方便学员随时随地学习。 2020/02-2024/05 北京神州泰岳智能数据技术有限公司 - 产品总监 运营商大数据及联合运营服务商\n工作职责：\n5G消息产品创新：\n调研中国移动互联网公司的核心竞争优势，结合市场需求反馈，与甲方反复讨论产品设计与商业模式。 制定《数智5G消息》产品规划，设计移动数据与5G消息结合的产品方案，实现月均创收50万+。 用户画像与精准营销：\n深入电商客户公司调研，分析客户需求与构建用户画像维度。 形成电商用户分层模型，设计化妆品行业用户画像模型，使短信营销点击率提升至10%。 DPI数据合作与生态拓展：\n主导与中移互联网公司的DPI数据建模项目，完成产品规划与商务谈判，成功签定合作协议，构建运营商大数据联合运营体系。 主导与中国电信云公司合作，完成了需求沟通与技术方案，成功签订了大数据联合建模项目合作协议，并顺利推进项目实施。 在全国范围内，与山东、江西、江苏、广东、广西、重庆、北京、河北、湖北、湖南、福建等超过十个省份的移动省公司建立了精准营销业务合作关系，形成了广泛而深入的业务联动网络，共同推动营销精准化与效率提升。 2012/10 - 2020/02 北京新媒传信科技有限公司 - 产品总监 中国移动ODM服务提供商\n工作职责：\n融合通讯数据分析平台升级：\n梳理数据埋点，结合时间标签形成用户使用路径，建立用户使用体验分析模型。 重新规划平台架构，培养数据分析团队，提升数据分析平台效能。 推广Python, SQL等工具的使用，提升数据分析工作效率24倍。 为产品设计与运营提供数据支持。 5G产品预研与设计：\n调研主流通讯软件，输出产品设计思路，主导5G通话、5G消息功能的产品与功能设计。 完成产品文档、产品交互原型、产品逻辑流程图。 依托WebRTC技术，成功开发出了一对一高清音视频通话、多人音视频会议以及会议白板等全面的5G通话功能。 根据MaaP协议，成功实现了5G消息的全部功能。 游戏平台生态建设：\n分析游戏平台竞争优势，设计“游戏社交SDK”，构建以手机号为核心的游戏生态，形成裂变传播链。 带领项目组15人，45天完成设计、开发、测试等环节。 在上线仅一个月的时间内，便成功与超过60家游戏开发商签署了合作协议，展现了强大的市场吸引力和广阔的发展前景。 中移互运营支撑平台：\n为中移互联网公司全业务线的，产品运营、业务控制、计费信控等环节，提供统一的控制与管理能力，加速各业务线的日常运营速度、降低操作复杂度。 飞信APP：\n带领产研团队，开发飞信APP，为移动用户提供优秀的融合通信产品。 2011/09 - 2012/10 北京金山云网络技术有限公司 - 产品经理 国内首批云存储服务提供商\n工作职责：\n管理快盘APP的产品设计与研发工作。 与小米合作，研发设计 MIUI 专用的网盘。 2007/09 - 2011/09 北京畅享互联科技有限公司 - 产品经理 手机平台游戏开发商、福彩彩票平台开发运营服务商\n工作职责：\n游戏研发与运营：\n为国内MTK平台手机方案商提供游戏产品。 年研发游戏60+款，月收入流水达到1000万。 福彩线上投注系统：\n规划福利彩票官方网络投注平台的功能及业务流程，设计手机端、WEB端彩票销售软件。 福彩线上投注系统在北京、天津、青海等多地上线，并向淘宝彩票提供投注接口。 🚀 项目经历 2020/02 - 2020/06 电商用户研究项目（特殊类化妆品）- 项目负责人 项目背景：\n为一特殊类化妆品商户提供用户消费行为研究。 项目经历：\n深入合作企业内部，了解产品特点、用户群体特征，并据此建立用户模型。 优化产品宣传落地页，突出产品优势。 跟踪营销数据反馈，对投后数据进行复盘。 项目成果：\n对运营商数据进行建模分析，筛选后的精准用户使短信点击率上升到≈10%左右。 对投后数据进行分析，发现≈50%的订单来自全国≈8%的城市地区，建议优化广告投放区域。 对复购数据进行分析，发现1次复购率为≈25%（符合商家预期），但2次复购率急速衰减为≈2%，建议加强持续的用户管理与运营。 进一步分析后，又发现新一线城市的1次、2次复购率均为最高，建议重点关注这部分地区的用户。 2019/06 - 2019/12 社群营销（公众号）- 项目负责人 项目背景：\n搭建了社群营销业务线、组织开展了面向幼儿教育方向的社群营销业务。 项目经历：\n带领2名市场同事，搭建公众号运营团队。 安排市场同事进行KOL的招募工作，我负责订单结算、公众号、商城系统搭建等工作。 通过微信群营销、线上会销等方式销售幼儿教育产品的销售。 项目成果：\n完成社群营销月收入达到10万+的阶段性目标。 2015/04 - 2015/07 飞信同窗社交SDK - 项目负责人 项目背景：\n飞信同窗游戏平台被APP游戏强烈冲击，原有的网页游戏与互动社区用户活跃严重下跌，平台面临被行业淘汰的危机。 项目经历：\n深入研究手机游戏推广模式，抓住游戏粘性与推广成本这两个痛点。 基于中国移动手机号码这个用户体系，将飞信同窗的用户ID、社区能力、 短信能力、 通讯录数据，这四者打通，包装成“一键登录-\u0026gt;好友邀约-\u0026gt;社区互动”的裂变传播链，为游戏厂商的用户运营赋能。 带领十几名产开测人员，用时一个半月完成SDK的开发。 带领7名运营同事，进行2B的市场推广。 项目成果：\nSDK上线1个月，就与60+家游戏厂商签约合作。 2007/09 - 2010/06 游戏研发与运营 - 产品负责人 项目背景：\n公司从运营商SP业务转向手机内置应用业务，重新组建团队，与手机方案商配合，完成手机游戏内置与计费能力。 项目经历：\n重新组建游戏研发组队，招聘产品、开发、运营、测试人员≈30人，分为5个研发小组，每小组独立负责一个游戏项目的研发。 安排每个小组的游戏选题、审核策划方案，制定开发方案、开发计划、测试进度，游戏上线等日常工作。 处理日常运营数据，与各手机方案商同步运营数据、协调内置需求。 根据每个游戏的反馈数据，迭代更新游戏研发计划。 项目成果：\n形成了自有知识产权的游戏编辑器。 年研发游戏65款，月收入流水达到300万。 率先推出了国内第一款在线斗地主游戏，成为当时国内第二大MTK手机游戏提供商。 📑 技能与证书 工具：Axure/JustinMind（原型设计）、SQL（数据查询）、Python（自动化分析） 认证：CCNA网络工程师 核心能力：产品需求文档（PRD）撰写、跨部门资源协调、商业模式设计 🎓 教育经历 时间 学校 专业 学历 2007/03 - 2010/01 北京理工大学 计算机科学与技术 本科 2003/09 - 2006/06 北京财贸干部管理学院 电子商务 专科 ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"bfb69e1ca1b8e6fbfb0cdcccbad538e1","permalink":"https://blog.cuile.com/_%E5%B4%94%E4%B9%90/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/_%E5%B4%94%E4%B9%90/","section":"","summary":"崔乐 📱 13810393066 | 📧 i@cuile.com\n🎓 北京理工大学 | 计算机科学与技术 | 本科\n💼 15年移动互联网产研经验 | 10年团队管理\n🎨 核心优势 15年移动互联网产研经验，10年团队管理经验。 精通产品全生命周期管理，擅长从0到1构建产品体系。 熟练使用Axure、JustinMind等原型工具，掌握Python、SQL等数据分析工具。 擅长平台级、技术型产品，数据驱动产品决策 🗃 工作经历 2024/05-2024/08 彩讯科技股份有限公司 - 高级项目经理 互联网通信云与数字化解决方案服务商\n工作职责：\n“AI+大数据数智化”产品改造：\n根据AI领域的发展趋势，结合《终端管理与服务系统》的业务痛点和需求，以营销场景切入，从营销决策、营销策略、市场洞察、售后服务四个角度规划数智化产品改造方案。 根据AI技术在系统中的应用可能性，结合RAG技术构建终端营销知识库，使用可视化的Agent编排智能体和Prompt管理能力，重构产品架构。 撰写产品规划PPT，向公司领导及移动领导汇报产品思路。 数据运营与厂商对接：\n积极了解终端厂商的需求特点、数据资源及合作意向，挖掘数据潜在价值，为厂商提供数据增值服务。 优化数据标签体系，根据自己所学的网络知识，纠正了家庭宽带数据统计口径中的错误。 系统培训与推广：\n根据移动各省公司对系统的使用需求，量身定制培训课程和教材。 采用线上通过录制操作视频、开展网络直播课程等形式，方便学员随时随地学习。 2020/02-2024/05 北京神州泰岳智能数据技术有限公司 - 产品总监 运营商大数据及联合运营服务商\n工作职责：\n5G消息产品创新：\n调研中国移动互联网公司的核心竞争优势，结合市场需求反馈，与甲方反复讨论产品设计与商业模式。 制定《数智5G消息》产品规划，设计移动数据与5G消息结合的产品方案，实现月均创收50万+。 用户画像与精准营销：\n深入电商客户公司调研，分析客户需求与构建用户画像维度。 形成电商用户分层模型，设计化妆品行业用户画像模型，使短信营销点击率提升至10%。 DPI数据合作与生态拓展：\n主导与中移互联网公司的DPI数据建模项目，完成产品规划与商务谈判，成功签定合作协议，构建运营商大数据联合运营体系。 主导与中国电信云公司合作，完成了需求沟通与技术方案，成功签订了大数据联合建模项目合作协议，并顺利推进项目实施。 在全国范围内，与山东、江西、江苏、广东、广西、重庆、北京、河北、湖北、湖南、福建等超过十个省份的移动省公司建立了精准营销业务合作关系，形成了广泛而深入的业务联动网络，共同推动营销精准化与效率提升。 2012/10 - 2020/02 北京新媒传信科技有限公司 - 产品总监 中国移动ODM服务提供商\n工作职责：\n融合通讯数据分析平台升级：\n梳理数据埋点，结合时间标签形成用户使用路径，建立用户使用体验分析模型。 重新规划平台架构，培养数据分析团队，提升数据分析平台效能。 推广Python, SQL等工具的使用，提升数据分析工作效率24倍。 为产品设计与运营提供数据支持。 5G产品预研与设计：\n","tags":null,"title":"","type":"page"},{"authors":null,"categories":null,"content":"崔乐 13810393066 | i@cuile.com\n男 | 180cm | 汉 | 北京理工大学 | 计算机 | 本科\n🎨 个人概况 15年移动互联网产研经验，10年团队管理经验。 经历过公司从0到1的创业过程，深知创业难点。 拥有软件开发、运营商服务、大数据业务等多领域的工作经验。 熟练使用 Office, Project, Visio, Axure, JsutinMind等产品管理工具。 熟练使用 Linux, Docker, Python, H5, Javascript, MySQL, PostgreSQL 等开发工具。 熟悉网络架构，拥有CCNA证书。 💼 工作经历 2024/05-2024/08 彩讯科技股份有限公司 - 项目经理 互联网通信云与数字化解决方案服务商\n作为互联网通信云技术与数字化服务领域的佼佼者，公司专注行业多年，依托强大的技术研发实力，积累了丰富的项目实践经验、庞大的用户群体以及稳固的战略合作伙伴关系。\n工作职责：\n中国移动终端公司《终端管理与服务系统》，建设项目与运营项目的研发与运营管理。 制定中国移动终端公司《终端管理与服务系统》的“AI+大数据数智化改造”规划。 工作内容：\n协调产品、研发、数据分析师，完成移动各分公司对《终端管理与服务系统》的需求工作。\n主动搭建产品、研发、数据分析师与移动各分公司之间的沟通桥梁，组织定期的需求沟通会议，确保各方信息及时共享。 深入了解各分公司业务场景和实际需求，协同产品团队将业务需求转化为详细的产品功能需求文档，指导研发团队开展针对性开发，同时借助数据分析师的专业能力，对需求进行数据层面的验证和优化，保障系统功能精准满足各分公司需求。 对接各终端厂商，完成数据运营与销售工作。\n积极与各终端厂商建立长期稳定的合作关系，通过定期拜访、商务洽谈等方式，深入了解厂商的产品特点、数据资源及合作意向。 结合《终端管理与服务系统》的业务需求，制定个性化的数据运营方案，挖掘数据潜在价值，为厂商提供数据增值服务。 根据市场动态和公司战略，制定数据销售策略，拓展销售渠道，推动数据产品的市场推广与销售，实现数据业务的商业价值。 面向移动各省公司，培训《终端管理与服务系统》的使用。\n根据移动各省公司对系统的使用需求，量身定制培训课程和教材。 采用线上通过录制操作视频、开展网络直播课程等形式，方便学员随时随地学习。 规划《终端管理与服务系统》的“AI+大数据数智化改造”规划。\n根据AI领域的发展趋势，结合《终端管理与服务系统》的业务痛点和需求，以营销场景切入，从营销决策、营销策略、市场洞察、售后服务四个角度推动数智化改造。 根据AI技术在系统中的应用可能性，结合RAG技术构建终端营销知识库，使用可视化的Agent编排智能体和Prompt管理能力，实现节约人力成本、提高营销效率的目标。 因家人突发重大疾病，选择离职回家照顾病人。\n2020/02-2024/05 北京神州泰岳智能数据技术有限公司 - 部门总监 运营商大数据及联合运营服务商\n运营商大数据服务与精准营销服务领域的先驱者，公司深耕行业，凭借卓越的数据服务能力，累积了丰厚的市场实战经验、广泛的客户基础以及坚实的合作伙伴网络。 在2019年至2020年间，公司实现了超过一亿元的收入规模。\n工作职责：\n研发SCRM营销产品，结合用户画像研究与精准营销建模，为微信粉丝运营提供工具。 负责拓展运营商关系，达成大数据合作目标。 制定5G消息发展策略，探索5G消息业务发展路径。 工作内容：\n规划设计了SCRM营销产品《粉丝超人》。\n通过智能加粉、朋友圈营销、粉丝裂变、社群管理、智能客服等功能，为客户提供优化的运营工具。 通过用户画像研究与精准营销建模，实现用户分层营销，提升用户留存与转化。 深化与各大运营商的战略伙伴关系，携手推进基于深度包检测（DPI）数据的精准营销业务合作，共同探索数据驱动的营销新境界。\n成功携手中移互联网公司及中国电信云公司，签订了大数据联合建模项目合作协议，并顺利推进项目实施，致力于通过数据融合与模型创新，挖掘数据价值，赋能业务发展。 在全国范围内，与山东、江西、江苏、广东、广西、重庆、北京、河北、湖北、湖南、福建等超过十个省份的移动省公司建立了精准营销业务合作关系，形成了广泛而深入的业务联动网络，共同推动营销精准化与效率提升。 制定公司5G消息业务的发展规划，探索5G消息的商业模式。\n凭借我在中国移动ODM项目服务中积累的深厚经验，以及在主导5G消息预研项目期间对5G消息业务的深刻理解，我参与了泰岳集团5G消息云平台的能力布局工作。 不仅于此，我还全面参与了5G消息预付平台的整体设计规划。这些经历不仅极大地拓宽并深化了我对5G消息技术运用及其商业变现潜力的认知，更为我在为中移互联网公司构思并设计“数智5G消息”业务方案时，提供了坚实的实践基础与无限的灵感启迪。 我基于对中移互联网公司内在业务资源与数据能力的洞察，结合我个人对运营商多种业务形态及数据优势的全面理解，并遵循数据安全与合规性的要求，为中移互联网公司设计了《数智5G消息》这一“智能营销产品”，帮助中移互联网公司月均创收50万+。 同时也帮助公司成为“数智5G消息”业务的合作代理商，为公司在5G消息业务上的发展铺平了道路。 2012/10 - 2020/02 北京新媒传信科技有限公司 - 高级总监 中国移动ODM服务提供商\n中国移动ODM服务的提供商，负责中国移动飞信业务的研发与运营工作，累计达成注册用户5亿+，活跃用户9000万+。\n工作职责：\n负责与甲方沟通制定项目规划，维护甲方客户关系。 带领项目团队工作，进行项目全流程管理，保证项目按期完成。 同时交付多个中国移动项目，项目共金额达到亿级。 工作内容：\n融合通讯数据分析平台：\n对融全通讯客户端与后台业务数据的收集与分析平台，为公司培养数据分析人才，输出数据分析方式与成果。 重建了融合通讯的产品运营与用户体验跟踪系统，提升运营效率70%以上，提升产品体验反馈率100%。 飞信同窗游戏平台：\n我接手飞信同窗游戏专区后，对社区能力与资源进行了全面分析，通过整合飞信同窗的用户体系、社区互动功能、短信服务以及通讯录数据资源，打造了一个以移动手机号码为核心的游戏生态系统，旨在为用户提供更加丰富、便捷的社交游戏体验。 经过精心打造的同窗游戏平台“社交SDK”，凭借其出色的性能和广泛的应用场景，赢得了市场的广泛认可。 在上线仅一个月的时间内，便成功与超过60家游戏开发商签署了合作协议，展现了强大的市场吸引力和广阔的发展前景。 中移互运营支撑平台：\n为中移互联网公司全业务线的，产品运营、业务控制、计费信控等环节，提供统一的控制与管理能力，加速各业务线的日常运营速度、降低操作复杂度。 5G新通话能力研发：\n我带领团队依托先进的WebRTC技术架构，成功开发出了一对一高清音视频通话、多人音视频会议以及会议白板等全面的语音视频通讯功能。 在此过程中，我们与中兴展开激烈竞争，共同角逐5G新通话的标准技术方案。 RCS客户端、5G消息预研：\n我带领产研团队，根据GSMA的设计规范，设计与开发一系列基于RCS及MAAP协议的前沿功能，包括富媒体消息传递、音视频通话功能以及chatbot智能人机交互等，为中国移动的5G新通话与5G消息业务奠定了坚实的技术基石，探索通信服务迈向更加智能化、多媒体化的业务形态。 飞信APP iOS端：\n带领产研团队，开发飞信APP的iOS版本，为移动用户提供优秀的融合通信产品。 2011/09 - 2012/10 北京金山云网络技术有限公司 - 团队负责人 国内首批云存储服务提供商，为市场提供低成本的云存储解决方案。\n工作职责：\n带领并管理 Android 团队，达成公司业务目标。 工作内容：\n管理快盘APP的产品设计与研发工作。 与小米合作，研发设计 MIUI 专用的网盘。 2007/09 - 2011/09 北京畅享互联科技有限公司 - 部门经理 MTK手机平台游戏开发商、福彩彩票平台开发运营服务商\n工作职责：\n手机游戏团队的搭建与管理。 福利彩票系统开发团队的管理。 工作内容：\n游戏研发与运营： 为国内MTK平台手机方案商提供游戏产品。 年研发游戏60+款，月收入流水达到1000万。 福彩线上投注系统： 规划福利彩票官方网络投注平台的功能及业务流程，设计手机端、WEB端彩票销售软件。 福彩线上投注系统在北京、天津、青海等多地上线，并向淘宝彩票提供投注接口。 🗃 项目经历 2020/02 - 2020/06 电商用户研究项目（特殊类化妆品）- 项目负责人 项目背景：\n为一特殊类化妆品商户提供用户消费行为研究。 项目经历：\n深入合作企业内部，了解产品特点、用户群体特征，并据此建立用户模型。 优化产品宣传落地页，突出产品优势。 跟踪营销数据反馈，对投后数据进行复盘。 项目成果：\n对运营商数据进行建模分析，筛选后的精准用户使短信点击率上升到≈10%左右。 对投后数据进行分析，发现≈50%的订单来自全国≈8%的城市地区，建议优化广告投放区域。 对复购数据进行分析，发现1次复购率为≈25%（符合商家预期），但2次复购率急速衰减为≈2%，建议加强持续的用户管理与运营。 进一步分析后，双发现新一线城市的1次、2次复购率均为最高，建议重点观注这部分地区的用户。 2019/06 - 2019/12 社群营销（公众号）- 项目负责人 项目背景：\n搭建了社群营销业务线、组织开展了面向幼儿教育方向的社群营销业务。 项目经历：\n带领2名市场同事，搭建公众号运营团队。 安排市场同事进行KOL的招募工作，我负责订单结算、公众号、商城系统搭建等工作。 通过微信群营销、线上会销等方式销售幼儿教育产品的销售。 项目成果：\n完成社群营销月收入达到10万+的阶段性目标。 2015/04 - 2015/07 飞信同窗游戏SDK - 项目负责人 项目背景：\n飞信同窗游戏平台被APP游戏强烈冲击，原有的网页游戏与互动社区用户活跃严重下跌，平台面临被行业淘汰的危机。 项目经历：\n深入研究手机游戏推广模式，抓住游戏粘性与推广成本这两个痛点。 基于中国移动手机号码这个用户体系，将飞信同窗的用户ID、社区能力、 短信能力、 通讯录数据，这四者打通，包装成“一键登录-\u0026gt;好友邀约-\u0026gt;社区互动”的裂变传播链，为游戏厂商的用户运营赋能。 带领十几名产开测人员，用时一个半月完成SDK的开发。 带领7名运营同事，进行2B的市场推广。 项目成果：\nSDK上线1个月，就与60+家游戏厂商签约合作。 2007/09 - 2010/06 游戏研发与运营 - 团队负责人 项目背景：\n公司从运营商SP业务转向手机内置应用业务，重新组建团队，与手机方案商配合，完成手机游戏内置与计费能力。 项目经历：\n重新组建游戏研发组队，招聘产品、开发、运营、测试人员≈30人，分为5个研发小组，每小组独立负责一个游戏项目的研发。 安排每个小组的游戏选题、审核策划方案，制定开发方案、开发计划、测试进度，游戏上线等日常工作。 处理日常运营数据，与各手机方案商同步运营数据、协调内置需求。 根据每个游戏的反馈数据，迭代更新游戏研发计划。 项目成果：\n形成了自有知识产权的游戏编辑器。 年研发游戏65款，月收入流水达到300万。 率先推出了国内第一款在线斗地主游戏，成为当时国内第二大MTK手机游戏提供商。 ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"b2a23c0ec0c3c1ef44546b571e7e0935","permalink":"https://blog.cuile.com/_%E5%B4%94%E4%B9%90_scrm/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/_%E5%B4%94%E4%B9%90_scrm/","section":"","summary":"崔乐 13810393066 | i@cuile.com\n男 | 180cm | 汉 | 北京理工大学 | 计算机 | 本科\n🎨 个人概况 15年移动互联网产研经验，10年团队管理经验。 经历过公司从0到1的创业过程，深知创业难点。 拥有软件开发、运营商服务、大数据业务等多领域的工作经验。 熟练使用 Office, Project, Visio, Axure, JsutinMind等产品管理工具。 熟练使用 Linux, Docker, Python, H5, Javascript, MySQL, PostgreSQL 等开发工具。 熟悉网络架构，拥有CCNA证书。 💼 工作经历 2024/05-2024/08 彩讯科技股份有限公司 - 项目经理 互联网通信云与数字化解决方案服务商\n作为互联网通信云技术与数字化服务领域的佼佼者，公司专注行业多年，依托强大的技术研发实力，积累了丰富的项目实践经验、庞大的用户群体以及稳固的战略合作伙伴关系。\n工作职责：\n中国移动终端公司《终端管理与服务系统》，建设项目与运营项目的研发与运营管理。 制定中国移动终端公司《终端管理与服务系统》的“AI+大数据数智化改造”规划。 工作内容：\n协调产品、研发、数据分析师，完成移动各分公司对《终端管理与服务系统》的需求工作。\n主动搭建产品、研发、数据分析师与移动各分公司之间的沟通桥梁，组织定期的需求沟通会议，确保各方信息及时共享。 深入了解各分公司业务场景和实际需求，协同产品团队将业务需求转化为详细的产品功能需求文档，指导研发团队开展针对性开发，同时借助数据分析师的专业能力，对需求进行数据层面的验证和优化，保障系统功能精准满足各分公司需求。 对接各终端厂商，完成数据运营与销售工作。\n积极与各终端厂商建立长期稳定的合作关系，通过定期拜访、商务洽谈等方式，深入了解厂商的产品特点、数据资源及合作意向。 结合《终端管理与服务系统》的业务需求，制定个性化的数据运营方案，挖掘数据潜在价值，为厂商提供数据增值服务。 根据市场动态和公司战略，制定数据销售策略，拓展销售渠道，推动数据产品的市场推广与销售，实现数据业务的商业价值。 面向移动各省公司，培训《终端管理与服务系统》的使用。\n根据移动各省公司对系统的使用需求，量身定制培训课程和教材。 采用线上通过录制操作视频、开展网络直播课程等形式，方便学员随时随地学习。 规划《终端管理与服务系统》的“AI+大数据数智化改造”规划。\n根据AI领域的发展趋势，结合《终端管理与服务系统》的业务痛点和需求，以营销场景切入，从营销决策、营销策略、市场洞察、售后服务四个角度推动数智化改造。 根据AI技术在系统中的应用可能性，结合RAG技术构建终端营销知识库，使用可视化的Agent编排智能体和Prompt管理能力，实现节约人力成本、提高营销效率的目标。 因家人突发重大疾病，选择离职回家照顾病人。\n2020/02-2024/05 北京神州泰岳智能数据技术有限公司 - 部门总监 运营商大数据及联合运营服务商\n运营商大数据服务与精准营销服务领域的先驱者，公司深耕行业，凭借卓越的数据服务能力，累积了丰厚的市场实战经验、广泛的客户基础以及坚实的合作伙伴网络。 在2019年至2020年间，公司实现了超过一亿元的收入规模。\n工作职责：\n研发SCRM营销产品，结合用户画像研究与精准营销建模，为微信粉丝运营提供工具。 负责拓展运营商关系，达成大数据合作目标。 制定5G消息发展策略，探索5G消息业务发展路径。 工作内容：\n","tags":null,"title":"","type":"page"},{"authors":null,"categories":null,"content":"崔乐 📱 13810393066 | 📧 i@cuile.com\n🎓 北京理工大学 | 计算机科学与技术 | 本科\n💼 15年移动互联网产研经验 | 10年团队管理\n🎨 核心优势 15年移动互联网产研经验，10年团队管理经验。 精通产品全生命周期管理，擅长从0到1构建产品体系。 熟练使用Axure、JustinMind等原型工具，掌握Python、SQL等数据分析工具。 擅长平台级、技术型产品，数据驱动产品决策 🗃 工作经历 2024/05-2024/08 彩讯科技股份有限公司 - 高级产品经理 互联网通信云与数字化解决方案服务商\n工作职责：\n“AI+大数据数智化”产品改造：\n根据AI领域的发展趋势，结合《终端管理与服务系统》的业务痛点和需求，以营销场景切入，从营销决策、营销策略、市场洞察、售后服务四个角度规划数智化产品改造方案。 根据AI技术在系统中的应用可能性，结合RAG技术构建终端营销知识库，使用可视化的Agent编排智能体和Prompt管理能力，重构产品架构。 撰写产品规划PPT，向公司领导及移动领导汇报产品思路。 数据运营与厂商对接：\n积极了解终端厂商的需求特点、数据资源及合作意向，挖掘数据潜在价值，为厂商提供数据增值服务。 优化数据标签体系，根据自己所学的网络知识，纠正了家庭宽带数据统计口径中的错误。 系统培训与推广：\n根据移动各省公司对系统的使用需求，量身定制培训课程和教材。 采用线上通过录制操作视频、开展网络直播课程等形式，方便学员随时随地学习。 2020/02-2024/05 北京神州泰岳智能数据技术有限公司 - 产品总监 运营商大数据及联合运营服务商\n工作职责：\n5G消息产品创新：\n调研中国移动互联网公司的核心竞争优势，结合市场需求反馈，与甲方反复讨论产品设计与商业模式。 制定《数智5G消息》产品规划，设计移动数据与5G消息结合的产品方案，实现月均创收50万+。 用户画像与精准营销：\n深入电商客户公司调研，分析客户需求与构建用户画像维度。 形成电商用户分层模型，设计化妆品行业用户画像模型，使短信营销点击率提升至10%。 DPI数据合作与生态拓展：\n主导与中移互联网公司的DPI数据建模项目，完成产品规划与商务谈判，成功签定合作协议，构建运营商大数据联合运营体系。 主导与中国电信云公司合作，完成了需求沟通与技术方案，成功签订了大数据联合建模项目合作协议，并顺利推进项目实施。 在全国范围内，与山东、江西、江苏、广东、广西、重庆、北京、河北、湖北、湖南、福建等超过十个省份的移动省公司建立了精准营销业务合作关系，形成了广泛而深入的业务联动网络，共同推动营销精准化与效率提升。 2012/10 - 2020/02 北京新媒传信科技有限公司 - 产品总监 中国移动ODM服务提供商\n工作职责：\n融合通讯数据分析平台升级：\n梳理数据埋点，结合时间标签形成用户使用路径，建立用户使用体验分析模型。 重新规划平台架构，培养数据分析团队，提升数据分析平台效能。 推广Python, SQL等工具的使用，提升数据分析工作效率24倍。 为产品设计与运营提供数据支持。 5G产品预研与设计：\n调研主流通讯软件，输出产品设计思路，主导5G通话、5G消息功能的产品与功能设计。 完成产品文档、产品交互原型、产品逻辑流程图。 依托WebRTC技术，成功开发出了一对一高清音视频通话、多人音视频会议以及会议白板等全面的5G通话功能。 根据MaaP协议，成功实现了5G消息的全部功能。 游戏平台生态建设：\n分析游戏平台竞争优势，设计“游戏社交SDK”，构建以手机号为核心的游戏生态，形成裂变传播链。 带领项目组15人，45天完成设计、开发、测试等环节。 在上线仅一个月的时间内，便成功与超过60家游戏开发商签署了合作协议，展现了强大的市场吸引力和广阔的发展前景。 中移互运营支撑平台：\n为中移互联网公司全业务线的，产品运营、业务控制、计费信控等环节，提供统一的控制与管理能力，加速各业务线的日常运营速度、降低操作复杂度。 飞信APP：\n带领产研团队，开发飞信APP，为移动用户提供优秀的融合通信产品。 2011/09 - 2012/10 北京金山云网络技术有限公司 - 产品经理 国内首批云存储服务提供商\n工作职责：\n管理快盘APP的产品设计与研发工作。 与小米合作，研发设计 MIUI 专用的网盘。 2007/09 - 2011/09 北京畅享互联科技有限公司 - 产品经理 手机平台游戏开发商、福彩彩票平台开发运营服务商\n工作职责：\n游戏研发与运营：\n为国内MTK平台手机方案商提供游戏产品。 年研发游戏60+款，月收入流水达到1000万。 福彩线上投注系统：\n规划福利彩票官方网络投注平台的功能及业务流程，设计手机端、WEB端彩票销售软件。 福彩线上投注系统在北京、天津、青海等多地上线，并向淘宝彩票提供投注接口。 🚀 项目经历 2020/02 - 2020/06 电商用户研究项目（特殊类化妆品）- 项目负责人 项目背景：\n为一特殊类化妆品商户提供用户消费行为研究。 项目经历：\n深入合作企业内部，了解产品特点、用户群体特征，并据此建立用户模型。 优化产品宣传落地页，突出产品优势。 跟踪营销数据反馈，对投后数据进行复盘。 项目成果：\n对运营商数据进行建模分析，筛选后的精准用户使短信点击率上升到≈10%左右。 对投后数据进行分析，发现≈50%的订单来自全国≈8%的城市地区，建议优化广告投放区域。 对复购数据进行分析，发现1次复购率为≈25%（符合商家预期），但2次复购率急速衰减为≈2%，建议加强持续的用户管理与运营。 进一步分析后，又发现新一线城市的1次、2次复购率均为最高，建议重点关注这部分地区的用户。 2019/06 - 2019/12 社群营销（公众号）- 项目负责人 项目背景：\n搭建了社群营销业务线、组织开展了面向幼儿教育方向的社群营销业务。 项目经历：\n带领2名市场同事，搭建公众号运营团队。 安排市场同事进行KOL的招募工作，我负责订单结算、公众号、商城系统搭建等工作。 通过微信群营销、线上会销等方式销售幼儿教育产品的销售。 项目成果：\n完成社群营销月收入达到10万+的阶段性目标。 2015/04 - 2015/07 飞信同窗社交SDK - 项目负责人 项目背景：\n飞信同窗游戏平台被APP游戏强烈冲击，原有的网页游戏与互动社区用户活跃严重下跌，平台面临被行业淘汰的危机。 项目经历：\n深入研究手机游戏推广模式，抓住游戏粘性与推广成本这两个痛点。 基于中国移动手机号码这个用户体系，将飞信同窗的用户ID、社区能力、 短信能力、 通讯录数据，这四者打通，包装成“一键登录-\u0026gt;好友邀约-\u0026gt;社区互动”的裂变传播链，为游戏厂商的用户运营赋能。 带领十几名产开测人员，用时一个半月完成SDK的开发。 带领7名运营同事，进行2B的市场推广。 项目成果：\nSDK上线1个月，就与60+家游戏厂商签约合作。 2007/09 - 2010/06 游戏研发与运营 - 产品负责人 项目背景：\n公司从运营商SP业务转向手机内置应用业务，重新组建团队，与手机方案商配合，完成手机游戏内置与计费能力。 项目经历：\n重新组建游戏研发组队，招聘产品、开发、运营、测试人员≈30人，分为5个研发小组，每小组独立负责一个游戏项目的研发。 安排每个小组的游戏选题、审核策划方案，制定开发方案、开发计划、测试进度，游戏上线等日常工作。 处理日常运营数据，与各手机方案商同步运营数据、协调内置需求。 根据每个游戏的反馈数据，迭代更新游戏研发计划。 项目成果：\n形成了自有知识产权的游戏编辑器。 年研发游戏65款，月收入流水达到300万。 率先推出了国内第一款在线斗地主游戏，成为当时国内第二大MTK手机游戏提供商。 📑 技能与证书 工具：Axure/JustinMind（原型设计）、SQL（数据查询）、Python（自动化分析） 认证：CCNA网络工程师 核心能力：产品需求文档（PRD）撰写、跨部门资源协调、商业模式设计 🎓 教育经历 时间 学校 专业 学历 2007/03 - 2010/01 北京理工大学 计算机科学与技术 本科 2003/09 - 2006/06 北京财贸干部管理学院 电子商务 专科 ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"577e2ced55bc7a6575ed3f1a3a1a56f8","permalink":"https://blog.cuile.com/_%E5%B4%94%E4%B9%90_%E4%BA%A7%E5%93%81/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/_%E5%B4%94%E4%B9%90_%E4%BA%A7%E5%93%81/","section":"","summary":"崔乐 📱 13810393066 | 📧 i@cuile.com\n🎓 北京理工大学 | 计算机科学与技术 | 本科\n💼 15年移动互联网产研经验 | 10年团队管理\n🎨 核心优势 15年移动互联网产研经验，10年团队管理经验。 精通产品全生命周期管理，擅长从0到1构建产品体系。 熟练使用Axure、JustinMind等原型工具，掌握Python、SQL等数据分析工具。 擅长平台级、技术型产品，数据驱动产品决策 🗃 工作经历 2024/05-2024/08 彩讯科技股份有限公司 - 高级产品经理 互联网通信云与数字化解决方案服务商\n工作职责：\n“AI+大数据数智化”产品改造：\n根据AI领域的发展趋势，结合《终端管理与服务系统》的业务痛点和需求，以营销场景切入，从营销决策、营销策略、市场洞察、售后服务四个角度规划数智化产品改造方案。 根据AI技术在系统中的应用可能性，结合RAG技术构建终端营销知识库，使用可视化的Agent编排智能体和Prompt管理能力，重构产品架构。 撰写产品规划PPT，向公司领导及移动领导汇报产品思路。 数据运营与厂商对接：\n积极了解终端厂商的需求特点、数据资源及合作意向，挖掘数据潜在价值，为厂商提供数据增值服务。 优化数据标签体系，根据自己所学的网络知识，纠正了家庭宽带数据统计口径中的错误。 系统培训与推广：\n根据移动各省公司对系统的使用需求，量身定制培训课程和教材。 采用线上通过录制操作视频、开展网络直播课程等形式，方便学员随时随地学习。 2020/02-2024/05 北京神州泰岳智能数据技术有限公司 - 产品总监 运营商大数据及联合运营服务商\n工作职责：\n5G消息产品创新：\n调研中国移动互联网公司的核心竞争优势，结合市场需求反馈，与甲方反复讨论产品设计与商业模式。 制定《数智5G消息》产品规划，设计移动数据与5G消息结合的产品方案，实现月均创收50万+。 用户画像与精准营销：\n深入电商客户公司调研，分析客户需求与构建用户画像维度。 形成电商用户分层模型，设计化妆品行业用户画像模型，使短信营销点击率提升至10%。 DPI数据合作与生态拓展：\n主导与中移互联网公司的DPI数据建模项目，完成产品规划与商务谈判，成功签定合作协议，构建运营商大数据联合运营体系。 主导与中国电信云公司合作，完成了需求沟通与技术方案，成功签订了大数据联合建模项目合作协议，并顺利推进项目实施。 在全国范围内，与山东、江西、江苏、广东、广西、重庆、北京、河北、湖北、湖南、福建等超过十个省份的移动省公司建立了精准营销业务合作关系，形成了广泛而深入的业务联动网络，共同推动营销精准化与效率提升。 2012/10 - 2020/02 北京新媒传信科技有限公司 - 产品总监 中国移动ODM服务提供商\n工作职责：\n融合通讯数据分析平台升级：\n梳理数据埋点，结合时间标签形成用户使用路径，建立用户使用体验分析模型。 重新规划平台架构，培养数据分析团队，提升数据分析平台效能。 推广Python, SQL等工具的使用，提升数据分析工作效率24倍。 为产品设计与运营提供数据支持。 5G产品预研与设计：\n","tags":null,"title":"","type":"page"},{"authors":null,"categories":null,"content":"崔乐 13810393066 | i@cuile.com\n男 | 180cm | 汉 | 北京理工大学 | 计算机 | 本科\n🎨 个人概况 15年移动互联网经验，10年团队管理经验。 经历过从0到1的创业过程，深知创业难点。 拥有产品、技术、运营、数据、商务等多个岗位工作经验。 拥有APP、后台、运营商、大数据等领域的工作经验。 熟练使用 Linux, Docker, Python, H5, Javascript, MySQL, PostgreSQL 等开发工具。 熟悉网络架构，拥有CCNA证书。 💼 技术经历 2005年，开始研究使用hook技术，获取IE浏览器内容。 2006年，带领公司前端团队，使用XHTML完成华为WAP2.0手机门户项目。 2008年，开始研究Firefox前端平台。 2010年，开始接触自动化测试，selenium、phantomjs、SlimerJS等WEB自动化工具。 2016年，使用Chrome浏览器插件技术，配合后端数据库，完成了自己第一个爬虫系统。 2018年，开始使用Chrome CDP协议，进行浏览器自动化测试。 2022年，开始使用playwright工具，进行爬虫开发。 2023年，完成爬虫系统基本框架，正在向分布式发展。 ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1759630162,"objectID":"91a7b806634454ded73e08393b9f8e6a","permalink":"https://blog.cuile.com/_%E5%B4%94%E4%B9%90_%E7%88%AC%E8%99%AB/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/_%E5%B4%94%E4%B9%90_%E7%88%AC%E8%99%AB/","section":"","summary":"崔乐 13810393066 | i@cuile.com\n男 | 180cm | 汉 | 北京理工大学 | 计算机 | 本科\n🎨 个人概况 15年移动互联网经验，10年团队管理经验。 经历过从0到1的创业过程，深知创业难点。 拥有产品、技术、运营、数据、商务等多个岗位工作经验。 拥有APP、后台、运营商、大数据等领域的工作经验。 熟练使用 Linux, Docker, Python, H5, Javascript, MySQL, PostgreSQL 等开发工具。 熟悉网络架构，拥有CCNA证书。 💼 技术经历 2005年，开始研究使用hook技术，获取IE浏览器内容。 2006年，带领公司前端团队，使用XHTML完成华为WAP2.0手机门户项目。 2008年，开始研究Firefox前端平台。 2010年，开始接触自动化测试，selenium、phantomjs、SlimerJS等WEB自动化工具。 2016年，使用Chrome浏览器插件技术，配合后端数据库，完成了自己第一个爬虫系统。 2018年，开始使用Chrome CDP协议，进行浏览器自动化测试。 2022年，开始使用playwright工具，进行爬虫开发。 2023年，完成爬虫系统基本框架，正在向分布式发展。 ","tags":null,"title":"","type":"page"}]