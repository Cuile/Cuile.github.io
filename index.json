[{"body":"","link":"https://blog.cuile.com/","section":"","tags":null,"title":""},{"body":"","link":"https://blog.cuile.com/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"https://blog.cuile.com/posts/","section":"posts","tags":null,"title":"Posts"},{"body":"","link":"https://blog.cuile.com/tags/python/","section":"tags","tags":null,"title":"Python"},{"body":"","link":"https://blog.cuile.com/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"不同版本中，不同的表现形式：\n Python 2.x：reload() 是内置函数 Python 3.0 - 3.3：使用 imp.reload(module) Python 3.4：imp 已经被废弃，取而代之的是 importlib  1from importlib import reload 2 3reload(\u0026lt;module\u0026gt;) 参考文档\n Python 重新加载模块 reload  ","link":"https://blog.cuile.com/posts/python/python_shell_import_reload/","section":"posts","tags":["python"],"title":"在 Python Shell 中重新导入模块"},{"body":"","link":"https://blog.cuile.com/categories/%E7%BC%96%E7%A8%8B/","section":"categories","tags":null,"title":"编程"},{"body":"","link":"https://blog.cuile.com/tags/alpine-linux/","section":"tags","tags":null,"title":"alpine linux"},{"body":"","link":"https://blog.cuile.com/tags/remote-ssh/","section":"tags","tags":null,"title":"remote ssh"},{"body":"","link":"https://blog.cuile.com/series/","section":"series","tags":null,"title":"Series"},{"body":"","link":"https://blog.cuile.com/series/vscode/","section":"series","tags":null,"title":"vscode"},{"body":"VsCode Remote SSH 默认是不支持 Alpine Linux 的，不过，对 Alpine Linux 进行一些改动，就可以实现，比较方便。\n步骤如下：\n安装  安装 Bash 安装需要的包  1$ apk del dropbear 2$ apk add gcompat libstdc++6 openssh wget git Alpine 配置 1$ nano /etc/ssh/sshd-config 1AllowTcpForwarding yes 2PermitTunnel yes git 配置  VsCode 连接 Alpine Linux F1 \u0026gt; \u0026quot;Preferences: Open Remote Settings (JSON) (SSH: )\u0026quot; 添加下面的内容：  1{ 2\t\u0026#34;git.path\u0026#34;: \u0026#34;/usr/bin/git\u0026#34;, 3} 参考文档：  Alpine Linux and VS Code Remote SSH Working with Remote SSH in Alpine ssh_config(5) — Linux manual page  ","link":"https://blog.cuile.com/posts/vscode/vscode_with_remote_ssh_in_alpine_linux/","section":"posts","tags":["alpine linux","remote ssh"],"title":"VsCode 使用 Remote SSH 连接 Alpine Linux"},{"body":"","link":"https://blog.cuile.com/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/","section":"categories","tags":null,"title":"系统配置"},{"body":"Alpine Linux 原始安装的是 busybox，小巧精干，但毕竟与主流的 Bash 还是有区别，特别是与其它系统联动时会比较麻烦，所以还是安装 Bash，统一 Shell 环境，方便日后使用。\n而且基本网上的安装教程都有问题，所以这里给出正确的安装步骤。\n安装 1$ apk add bash libuser 配置 1$ touch /etc/login.defs 2$ mkdir /etc/default 3$ touch /etc/default/useradd 4$ lchsh \u0026lt;root\u0026gt; 5Changing shell for root. 6Password: \u0026lt;root password\u0026gt; 7New Shell [/bin/ash]: /bin/bash 8Shell changed. 参考文档：  Working with Remote SSH in Alpine Linux命令之 chsh -- 用来更换登录系统时使用的shell  ","link":"https://blog.cuile.com/posts/linux/alpine_linux_bash/","section":"posts","tags":["bash","alpine linux"],"title":"Alpine Linux 安装 Bash"},{"body":"","link":"https://blog.cuile.com/tags/bash/","section":"tags","tags":null,"title":"bash"},{"body":"","link":"https://blog.cuile.com/series/linux/","section":"series","tags":null,"title":"linux"},{"body":"","link":"https://blog.cuile.com/tags/frp/","section":"tags","tags":null,"title":"frp"},{"body":"1. 使用手册 看完这3篇足以把服务建起来，非常方便\n 官方文档 教程1 教程2  2. 服务端安装配置 可直接使用 Docker 的配置进行\n3. 客户端下载、 安装、运行 原本也想使用Docker镜像，但发现kvm之间通过Docker通信好像有问题，所幸在宿主机上可以直接使用release文件。 【注意：每次添加新的客户端，要同步更新服务端的端口配置】\n3.1. 下载 官网下载地址【注意：s, c两端使用的版本号要相同】\n1$ cd ~ 2# 下载安装软件 3$ yum install wget tar git 4# 下载 frp 5$ wget -c https://github.com/fatedier/frp/releases/download/v0.34.3/frp_0.34.3_linux_amd64.tar.gz 6$ tar -axvf frp_0.34.3_linux_amd64.tar.gz 7$ rm -rf frp_0.34.3_linux_amd64.tar.gz 8# 下载 frp 配置 9$ git clone https://github.com/Cuile/frp.git 3.2. 安装 1# 此处只能使用硬链接，使用软链接会导致无法启动服务 2# 安装配置文件 3$ mkdir /etc/frp 4$ ln -b ~/frp/conf/frpc-pve.ini /etc/frp/frpc.ini 5# 安装运行文件 6$ ln -b ~/frp_0.34.3_linux_amd64/frpc /usr/bin/frpc 7# 安装服务 8$ ln -b ~/frp_0.34.3_linux_amd64/systemd/frpc.service /lib/systemd/system/frpc.service 3.3. 运行 1$ systemctl enable frpc.service ##设定指定服务开机开启 2$ systemctl disable frpc.service ##设定指定服务开机关闭 3 4$ systemctl start frpc.service 5$ systemctl stop frpc.service 6$ systemctl restart frpc.service 7 8$ systemctl status frpc.service 9$ systemctl list-units | grep frpc 3.4. 更新 通过 git 更新 frpc 的配置后，要重新链接配置文件\n1$ bash ~/frp/CentOS/restart.frpc.service.sh ","link":"https://blog.cuile.com/posts/linux/linux_frp_install/","section":"posts","tags":["frp"],"title":"frp安装配置"},{"body":"","link":"https://blog.cuile.com/series/proxy/","section":"series","tags":null,"title":"proxy"},{"body":"WindTerm 无法认证 WindTerm客户端，取消 “会话设置 -\u0026gt; SSH -\u0026gt; 验证 -\u0026gt; 尝试键盘交互认证” 可已正常连接。\n终端配置和环境变量 在 /etc/profile.d 文件夹下，创建sh文件来实现。\n1# cli.sh 2alias ll=\u0026#39;ls -la --color=tty\u0026#39; 1# keychain.sh 2eval `keychain --eval ~/.ssh/github.com` ","link":"https://blog.cuile.com/posts/linux/alpine_linux_manual/","section":"posts","tags":["alpine linux"],"title":"Alpine Linux 配置"},{"body":"","link":"https://blog.cuile.com/series/cli/","section":"series","tags":null,"title":"CLI"},{"body":"","link":"https://blog.cuile.com/tags/screen/","section":"tags","tags":null,"title":"screen"},{"body":"创建屏幕 1# 离线方式创建屏幕，一般用在启动脚本 2$ screen -S \u0026lt;screen_name\u0026gt; -d -m 执行命令 1# 在指定屏幕内输入cmd，注意\\n代表回车 2$ screen -S \u0026lt;screen_name\u0026gt; -X stuff \u0026#34;\u0026lt;cmd\u0026gt;\\n\u0026#34; 3# 在当前窗口内，通过另一个过滤进程控制窗口的输入或输出。 4# 非常复杂，还没有搞明白有什么用 5# 官方建议：小心使用！ 6$ screen -S \u0026lt;screen_name\u0026gt; -X |\u0026lt;cmd\u0026gt; 7$ screen -S \u0026lt;screen_name\u0026gt; -X !..|\u0026lt;cmd\u0026gt; 8$ screen -S \u0026lt;screen_name\u0026gt; -X exec\u0026lt;cmd\u0026gt; 参考文档\n screen stuff screen exec  退出屏幕 1# 进入指定屏幕，再退出 2$ screen -r \u0026lt;screen_name|pid\u0026gt; 3$ exit 4# 指定屏幕，直接退出 5$ screen -S \u0026lt;screen_name\u0026gt; -X quit ","link":"https://blog.cuile.com/posts/linux/linux_screen_manual/","section":"posts","tags":["screen"],"title":"screen 命令"},{"body":"","link":"https://blog.cuile.com/tags/cli/","section":"tags","tags":null,"title":"CLI"},{"body":"","link":"https://blog.cuile.com/tags/systemd/","section":"tags","tags":null,"title":"Systemd"},{"body":"systemctl命令 1systemctl list-units ##列出当前系统服务的状态 2systemctl list-unit-files ##列出服务的开机状态 3systemctl status sshd ##查看指定服务的状态 4systemctl stop sshd ##关闭指定服务 5systemctl start sshd ##开启指定服务 6systemctl restart sshd ##从新启动服务 7systemctl enable sshd ##设定指定服务开机开启 8systemctl disable sshd ##设定指定服务开机关闭 9systemctl reload sshd ##使指定服务从新加载配置 10systemctl list-dependencies sshd ##查看指定服务的倚赖关系 11systemctl mask sshd ##冻结指定服务 12systemctl unmask sshd ##启用服务 13systemctl set-default multi-user.target ##开机不开启图形 14systemctl set-default graphical.target ##开机启动图形 设置主机名 1$ _hostname_=XXXX 2$ hostnamectl --static set-hostname ${_hostname_} 3$ hostnamectl --transient set-hostname ${_hostname_} 4$ hostnamectl --pretty set-hostname ${_hostname_} 参考文档\n hostnamectl 参考  修改服务器时区 1$ timedatectl set-timezone Asia/Shanghai 参考文档\n timedatectl 参考  ","link":"https://blog.cuile.com/posts/linux/linux_systemd/","section":"posts","tags":["CLI","Systemd"],"title":"Systemd 命令指南"},{"body":"","link":"https://blog.cuile.com/series/proxmox/","section":"series","tags":null,"title":"Proxmox"},{"body":"强制删除虚拟机 1$ rm -f /etc/pve/nodes/*/*/\u0026lt;vm_id\u0026gt;.conf 参考文档\n 修復Proxmox VE：無法刪除虛擬機器  ","link":"https://blog.cuile.com/posts/proxmox/proxmox_cli/","section":"posts","tags":["CLI"],"title":"Proxmox 命令行"},{"body":"","link":"https://blog.cuile.com/series/centos/","section":"series","tags":null,"title":"CentOS"},{"body":"","link":"https://blog.cuile.com/series/hyper-v/","section":"series","tags":null,"title":"Hyper-V"},{"body":"使用Hyper-V安装CentOS虚拟机，使用起来非常方便。但遇到磁盘空间不够时，不像Windows虚拟机那样方便给磁盘空间扩容。 总体两分二步：\n1. vhdx扩容 关闭虚拟机，然后给磁盘扩容，操作方便网上教程多，这里不再赘述。\n2. CentOS扩容 2.1 查看分区表 1$ lsblk 2NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT 3sda 8:0 0 20G 0 disk 4├─sda1 8:1 0 200M 0 part /boot/efi 5├─sda2 8:2 0 1G 0 part /boot 6└─sda3 8:3 0 8.8G 0 part 7 ├─centos-root 253:0 0 7.8G 0 lvm / 8 └─centos-swap 253:1 0 1G 0 lvm [SWAP] 以上内容可以看出，sda已经扩容到20G，但sda1+sda2+sda3只有10G说明vhdx扩容成功。\n2.2 建立新分区 1$ fdisk /dev/sda 2 3The device presents a logical sector size that is smaller than 4the physical sector size. Aligning to a physical sector (or optimal 5I/O) size boundary is recommended, or performance may be impacted. 6欢迎使用 fdisk (util-linux 2.23.2)。 7 8更改将停留在内存中，直到您决定将更改写入磁盘。 9使用写入命令前请三思。 10 11 12命令(输入 m 获取帮助)：n 13Partition type: 14 p primary (1 primary, 0 extended, 3 free) 15 e extended 16Select (default p): 17Using default response p 18分区号 (2-4，默认 2)： 19起始 扇区 (20971520-41943039，默认为 20971520)： 20将使用默认值 20971520 21Last 扇区, +扇区 or +size{K,M,G} (20971520-41943039，默认为 41943039)：+10G 22值超出范围。 23Last 扇区, +扇区 or +size{K,M,G} (20971520-41943039，默认为 41943039)：+9.9G 24不支持的后缀：“.9G”。 25支持：10^N: KB (千字节), MB (兆字节), GB (吉字节) 26 2^N: K (约千字节), M (约兆字节), G (约吉字节) 27Last 扇区, +扇区 or +size{K,M,G} (20971520-41943039，默认为 41943039)：+9G 28分区 2 已设置为 Linux 类型，大小设为 9 GiB 29 30命令(输入 m 获取帮助)：w 31The partition table has been altered! 32 33Calling ioctl() to re-read partition table. 34 35WARNING: Re-reading the partition table failed with error 16: 设备或资源忙. 36The kernel still uses the old table. The new table will be used at 37the next reboot or after you run partprobe(8) or kpartx(8) 38正在同步磁盘。 重读分区表时，发生错误 1$ partprobe 2Error: 备份 GPT 表不像应该的那样出现在磁盘的末尾。这可能意味这其它操作系统相信磁盘小一些。通过将备份移动到末尾 (并删除旧备份) 来修正？ 3Warning: Not all of the space available to /dev/sda appears to be used, you can fix the GPT to use all of the space (an extra 20971520 blocks) or continue with the current setting? 查看分区表时，发现新分区未创建成功 1$ lsblk 2NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT 3sda 8:0 0 20G 0 disk 4├─sda1 8:1 0 200M 0 part /boot/efi 5├─sda2 8:2 0 1G 0 part /boot 6└─sda3 8:3 0 8.8G 0 part 7 ├─centos-root 253:0 0 7.8G 0 lvm / 8 └─centos-swap 253:1 0 1G 0 lvm [SWAP] 9 使用 parted 修复分区表 1$ parted /dev/sda 2GNU Parted 3.1 3使用 /dev/sda 4Welcome to GNU Parted! Type \u0026#39;help\u0026#39; to view a list of commands. 5(parted) p 6错误: 备份 GPT 表不像应该的那样出现在磁盘的末尾。这可能意味这其它操作系统相信磁盘小一些。通过将备份移动到末尾 (并删除旧备份) 来修正？ 7修正/Fix/忽略/Ignore/放弃/Cancel? fix 8警告: Not all of the space available to /dev/sda appears to be used, you can fix the GPT to use all of the space (an extra 20971520 blocks) or continue with the current 9setting? 10修正/Fix/忽略/Ignore? fix 11Model: Msft Virtual Disk (scsi) 12Disk /dev/sda: 21.5GB 13Sector size (logical/physical): 512B/4096B 14Partition Table: gpt 15Disk Flags: 16 17Number Start End Size File system Name 标志 18 1 1049kB 211MB 210MB fat16 EFI System Partition 启动 19 2 211MB 1285MB 1074MB xfs 20 3 1285MB 10.7GB 9452MB lvm 21 22(parted) p 23Model: Msft Virtual Disk (scsi) 24Disk /dev/sda: 21.5GB 25Sector size (logical/physical): 512B/4096B 26Partition Table: gpt 27Disk Flags: 28 29Number Start End Size File system Name 标志 30 1 1049kB 211MB 210MB fat16 EFI System Partition 启动 31 2 211MB 1285MB 1074MB xfs 32 3 1285MB 10.7GB 9452MB lvm 33 34(parted) quit 再次建立新分区 1$ fdisk /dev/sda 2WARNING: fdisk GPT support is currently new, and therefore in an experimental phase. Use at your own discretion. 3欢迎使用 fdisk (util-linux 2.23.2)。 4 5更改将停留在内存中，直到您决定将更改写入磁盘。 6使用写入命令前请三思。 7 8 9命令(输入 m 获取帮助)：n 10分区号 (4-128，默认 4)： 11第一个扇区 (34-41943006，默认 20969472)： 12Last sector, +sectors or +size{K,M,G,T,P} (20969472-41943006，默认 41943006)：+10G 13已创建分区 4 14 15 16命令(输入 m 获取帮助)：w 17The partition table has been altered! 18 19Calling ioctl() to re-read partition table. 20 21WARNING: Re-reading the partition table failed with error 16: 设备或资源忙. 22The kernel still uses the old table. The new table will be used at 23the next reboot or after you run partprobe(8) or kpartx(8) 24正在同步磁盘。 2.3 重读分区表 1$ partprobe 重读分区表，正常不会有任何输出\n再次查看分区表，可以看到 sda4 分区已经创建好了 1$ lsblk 2NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT 3sda 8:0 0 20G 0 disk 4├─sda1 8:1 0 200M 0 part /boot/efi 5├─sda2 8:2 0 1G 0 part /boot 6├─sda3 8:3 0 8.8G 0 part 7│ ├─centos-root 253:0 0 7.8G 0 lvm / 8│ └─centos-swap 253:1 0 1G 0 lvm [SWAP] 9└─sda4 8:4 0 10G 0 part 2.4 将 sda4 分区加入 centos-root 分区 1$ lvm 2lvm\u0026gt; pvcreate /dev/sda4 3 Physical volume \u0026#34;/dev/sda4\u0026#34; successfully created. 4lvm\u0026gt; pvdisplay 5 --- Physical volume --- 6 PV Name /dev/sda3 7 VG Name centos 8 PV Size 8.80 GiB / not usable 2.00 MiB 9 Allocatable yes (but full) 10 PE Size 4.00 MiB 11 Total PE 2253 12 Free PE 0 13 Allocated PE 2253 14 PV UUID D5K7Ds-a0I8-67Kt-LE1J-HKi7-aaKX-CLaJTg 15 16 \u0026#34;/dev/sda4\u0026#34; is a new physical volume of \u0026#34;10.00 GiB\u0026#34; 17 --- NEW Physical volume --- 18 PV Name /dev/sda4 19 VG Name 20 PV Size 10.00 GiB 21 Allocatable NO 22 PE Size 0 23 Total PE 0 24 Free PE 0 25 Allocated PE 0 26 PV UUID digjnH-8XFC-kMQT-nOEL-y9FJ-ImaB-t8FB7d 27 28lvm\u0026gt; vgdisplay 29 --- Volume group --- 30 VG Name centos 31 System ID 32 Format lvm2 33 Metadata Areas 1 34 Metadata Sequence No 3 35 VG Access read/write 36 VG Status resizable 37 MAX LV 0 38 Cur LV 2 39 Open LV 2 40 Max PV 0 41 Cur PV 1 42 Act PV 1 43 VG Size 8.80 GiB 44 PE Size 4.00 MiB 45 Total PE 2253 46 Alloc PE / Size 2253 / 8.80 GiB 47 Free PE / Size 0 / 0 48 VG UUID f77tkP-7xzc-qcyf-t0JN-OYOQ-ZfLL-PJPD8w 49 50lvm\u0026gt; vgextend centos /dev/sda4 51 Volume group \u0026#34;centos\u0026#34; successfully extended 52lvm\u0026gt; vgdisplay 53 --- Volume group --- 54 VG Name centos 55 System ID 56 Format lvm2 57 Metadata Areas 2 58 Metadata Sequence No 4 59 VG Access read/write 60 VG Status resizable 61 MAX LV 0 62 Cur LV 2 63 Open LV 2 64 Max PV 0 65 Cur PV 2 66 Act PV 2 67 VG Size \u0026lt;18.80 GiB 68 PE Size 4.00 MiB 69 Total PE 4812 70 Alloc PE / Size 2253 / 8.80 GiB 71 Free PE / Size 2559 / \u0026lt;10.00 GiB 72 VG UUID f77tkP-7xzc-qcyf-t0JN-OYOQ-ZfLL-PJPD8w 73 74lvm\u0026gt; lvextend -l +100%FREE /dev/centos/root 75 Size of logical volume centos/root changed from 7.80 GiB (1997 extents) to \u0026lt;17.80 GiB (4556 extents). 76 Logical volume centos/root successfully resized. 77lvm\u0026gt; exit 78 Exiting. 79 80$ xfs_growfs /dev/centos/root 81meta-data=/dev/mapper/centos-root isize=512 agcount=4, agsize=511232 blks 82 = sectsz=4096 attr=2, projid32bit=1 83 = crc=1 finobt=0 spinodes=0 84data = bsize=4096 blocks=2044928, imaxpct=25 85 = sunit=0 swidth=0 blks 86naming =version 2 bsize=4096 ascii-ci=0 ftype=1 87log =internal bsize=4096 blocks=2560, version=2 88 = sectsz=4096 sunit=1 blks, lazy-count=1 89realtime =none extsz=4096 blocks=0, rtextents=0 90data blocks changed from 2044928 to 4665344 再次查看磁盘容量与分区表，centos-root分区空间已经扩容为17.8G 1$ df -h 2文件系统 容量 已用 可用 已用% 挂载点 3devtmpfs 876M 0 876M 0% /dev 4tmpfs 887M 0 887M 0% /dev/shm 5tmpfs 887M 8.4M 879M 1% /run 6tmpfs 887M 0 887M 0% /sys/fs/cgroup 7/dev/mapper/centos-root 18G 7.3G 11G 41% / 8/dev/sda2 1014M 215M 800M 22% /boot 9/dev/sda1 200M 12M 189M 6% /boot/efi 10tmpfs 178M 0 178M 0% /run/user/0 11 12$ lsblk 13NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT 14sda 8:0 0 20G 0 disk 15├─sda1 8:1 0 200M 0 part /boot/efi 16├─sda2 8:2 0 1G 0 part /boot 17├─sda3 8:3 0 8.8G 0 part 18│ ├─centos-root 253:0 0 17.8G 0 lvm / 19│ └─centos-swap 253:1 0 1G 0 lvm [SWAP] 20└─sda4 8:4 0 10G 0 part 21 └─centos-root 253:0 0 17.8G 0 lvm / 参考文档  Hyper-v下Centos实现扩容硬盘磁盘空间大小  ","link":"https://blog.cuile.com/posts/hyper-v/centos_disk_expansion_in_hyper-v/","section":"posts","tags":null,"title":"Hyper-V 环境下给 CentOS 磁盘扩容"},{"body":"Hyper-V 环境下安装 Linux 是无法调节分辨率的，但可以通过设置指定分辨率，不过最大只能支持1920x1080\n1. 修改配置文件 1$ sudo nano /etc/default/grub 将配置\n1GRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;quiet splash \u0026#34; 修改为\n1GRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;quiet splash video=hyperv_fb:1920x1080\u0026#34; 这里要注意屏幕的实际分辨率，在15寸的笔记本上，适合的分辨率为1600x900\n2. 更新 Grub 1$ sudo update-grub 3. 重启 1$ reboot 参考文档 Hyper-V 下 Ubuntu/Deepin 如何设置分辨率\n","link":"https://blog.cuile.com/posts/hyper-v/setup_ubuntu_resolution_in_hyper-v/","section":"posts","tags":null,"title":"Hyper-V 环境下设置 Ubuntu 分辨率"},{"body":"","link":"https://blog.cuile.com/series/ubuntu/","section":"series","tags":null,"title":"Ubuntu"},{"body":"","link":"https://blog.cuile.com/series/windows-10/","section":"series","tags":null,"title":"Windows 10"},{"body":"一般新电脑买来都默认安排家庭版，相比专业版一个主要的区别就是没有Hpyer-V 功能。 Hpyer-V 功能支持虚拟机，Windows原生的虚拟机在资源占用方便很有优势，不只是对开发人员有用，对日常办公也非常方便。\n 常用的办公软件环境统一 迁移方便 控制流氓软件占用资源 可随时通过还原点，还原系统  1. 安装脚本 1pushd \u0026#34;%~dp0\u0026#34; 2 3dir /b %SystemRoot%\\servicing\\Packages\\*Hyper-V*.mum \u0026gt;hyper-v.txt 4 5for /f %%i in (\u0026#39;findstr /i . hyper-v.txt 2^\u0026gt;nul\u0026#39;) do dism /online /norestart /add-package:\u0026#34;%SystemRoot%\\servicing\\Packages\\%%i\u0026#34; 6 7del hyper-v.txt 8 9Dism /online /enable-feature /featurename:Microsoft-Hyper-V-All /LimitAccess /ALL 保存为Hyper-V.cmd\n2. 运行脚本 将脚本放到桌面，右键“以管理员身份运行”，等待安装结束后，就可以使用 Hyper-V 功能了。\n","link":"https://blog.cuile.com/posts/hyper-v/install_hyper-v_in_windows10/","section":"posts","tags":null,"title":"Windows 10 家庭版安装 Hyper-V"},{"body":"1. 网络设置 1.1. 基础知识  Hyper-V 安装完后，将自动创建一个“默认虚拟交换机”，并同时创建一个同名的虚拟网卡。此交换机及网卡都无法修改，且每次启动时IP都会发生变化。  如在宿主机同时安装了“Windows沙盒”功能，则沙盒会给每个物理网卡和虚拟网卡，都自动的再创建一个对应的虚拟网卡，容易造成混乱，使用中要注意。   将物理网卡直接共享给“默认虚拟交换机”对应的网卡，是比较省事高效的方法，相当于在物理网卡上做了一个NAT转换，而且IP地址会自动固定为192.168.137.1，网速较快。  缺点是在多个物理网卡之间切换时非常不方便。   Windows 网络共享重启会失效，这个BUG一直没有解决，需要如此解决：  找到“Internet Connection Sharing”服务  启动类型：自动   找到注册表中“HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\SharedAccess”  新建“DWORD(32位)值(D)”：EnableRebootPersistConnection 值（十六进制）：1   重启电脑   在宿主机使用无线网卡时，由于Hyper-V对无线网卡支持的不好，需要做以下操作：  新建“外部虚拟交换机”：  勾选“允许管理操作系统共享此网络适配器”，选择“外部虚拟交换机”对应的网卡，相当于在无线网卡上做了一个NAT转换，而且IP地址会自动固定为192.168.137.1，网速较快。  会在宿主机上添加一个网桥，一个虚拟网卡，且宿主机可同时上网。   反之，则只会添加一个网桥，且宿主机无法同时上网。  这是 Hyper-V 对无线网卡支持不够好的表现，而且网速很慢，慢到什么程度呢？慢到微信连文件都发不出去！     新建“内部虚拟交换机”：  将所有虚拟机都接入自建的“内部虚拟交换机”，可以解决IP变化的问题。      1.2. 网络拓扑 假设使用以下拓扑结构来设计网络： 宿主机直连路由器，宿主机上创建一个虚拟路由器，和一个虚拟机，宿主机与虚拟机都通过虚拟路由器来上网。\n    TP Route 宿主机 OpenWRT 虚拟机     WLAN \u0026gt;DHCP\nIP: 192.168.10.113\nIP: 192.168.10.114\nmac: ac-8f \u0026gt;Bridge\nIP: -\nmac: ac-8f - -   外部网络 - \u0026gt;WLAN\nIP: 192.168.10.113\nmac: ac-8f \u0026gt;WLAN\nIP: 192.168.10.114\nmac: 01-36 -   内部网络 - \u0026gt;DHCP\nIP: 192.168.123.100\nmac: 01-28 \u0026gt;Static\nIP: 192.168.123.1\nmac: 01-29 \u0026gt;DHCP\nIP: 192.168.123.102\nmac: 01-2c   网桥 - \u0026gt;Switch\nIP: -\nmac: ac-8f - -    2. 查看网卡、虚拟网卡、虚拟交换机的命令 使用管理员模式，启动 PowerShell\n1# 查看所有网卡 2\u0026gt; get-netadapter 3 4# 查看虚拟交换机 5\u0026gt; get-vmswitch 6 7# 查看所有虚拟网卡 8\u0026gt; get-vmnetworkadapter -all 9 10# 查看在主机上的虚拟网卡 11\u0026gt; get-vmnetworkadapter -managementos 12 13# 查看网卡组 14\u0026gt; get-netlbfoteam 3. 删除 使用管理员模式，启动 PowerShell\n1# 删除虚拟网卡 2\u0026gt; remove-vmnetworkadapter -managementos -name \u0026#34;xxx\u0026#34; 3 4# 删除虚拟交换机 5\u0026gt; remove-vmswitch -name \u0026#34;xxx\u0026#34; 6 7# 删除网卡组 8\u0026gt; remove-netlbfoteam -name \u0026#34;xxx\u0026#34; 这里要注意删除顺序是，虚拟网卡 \u0026gt; 虚拟交换机 \u0026gt; 网卡组 \u0026gt; 物理网卡。\n当然还有一个最简单粗暴的命令，删除所有设置，只保留物理网卡，非常简单好用。\n1\u0026gt; netcfg -d 参考文档  Hyper-V网络设置  理解Hyper-V外部网络、内部网络、私有网络 删除Windows中隐藏的物理网卡和网络虚拟化失败后的虚拟网卡 Hyper-V 网络配置 如何从设备管理器中删除Hyper-V虚拟交换机扩展适配器 Win10 Hyper-v下虚拟机使用无线网络 hyper-v使用wifi链接网络   Windows 网络共享  Windows 网络共享重启失效解决方案 win10 系统在做双网卡共享Internet问题-已解决！！多谢帮助！！    ","link":"https://blog.cuile.com/posts/hyper-v/hyper-v_network/","section":"posts","tags":["network"],"title":"Hyper-V 网络设置"},{"body":"","link":"https://blog.cuile.com/tags/network/","section":"tags","tags":null,"title":"network"},{"body":"","link":"https://blog.cuile.com/series/docker/","section":"series","tags":null,"title":"Docker"},{"body":"","link":"https://blog.cuile.com/tags/docker-compose/","section":"tags","tags":null,"title":"docker compose"},{"body":"command 指令 字符串方式 1command:/bin/bash -c \u0026#34;cp /app/dtest/config.default.yml /app/config.yml \u0026amp;\u0026amp; python -u /app/dtest/tcc.py\u0026#34;2# 另一种方式3command:/bin/bash -c \u0026#34; while true; do sleep 1; done\u0026#34;配置文件方式 ......\ntty 指令 启动后停在cli，等待登录\n1tty:true参考文档  docker compose command 执行多条指令  ","link":"https://blog.cuile.com/posts/docker/docker_compose/","section":"posts","tags":["docker compose"],"title":"Docker Compose 指令"},{"body":"","link":"https://blog.cuile.com/series/life-tips/","section":"series","tags":null,"title":"life tips"},{"body":"","link":"https://blog.cuile.com/categories/tips/","section":"categories","tags":null,"title":"tips"},{"body":"做朋友式的情人 情人是寂寞路上遇到的人，是相互需要依托的人，是无法光明正大走一辈子的人，是一个和你没有一点家庭关系的人，却让你尝尽男女滋味尽情消魂的人。\n真正的情人是距离的思念，是除了妻子或者丈夫以外的唯一，是锦上添花的极品。但找情人并不容易，也是一种缘分，不是上过床就是情人，它是行走在朋友、红颜知己、爱人边缘的一种感情。比爱人多了一份浪漫，比朋友多了一份知己，比红颜知己多了一层身体上的信息。\n朋友是相互信任，爱人是相互包容，红颜知己是相互欣赏。朋友式的情人就是它们的总和。你成了他的朋友式情人，他会视你为一笔财富，他在你面前会轻松自在。快乐和烦心时都会想到你，他会欣赏你的思想，回味你的笑容，他愿意成为你永远的朋友，任何朋友都取代不了你的位置与感觉，因为你是他朋友式情人。\n做成功情人的秘诀 如果你爱上一个人，又被对方爱着，但又注定你们今后无法生活在一起，而你又不想失去他，那么，你应该懂得做情人的规则，给这个角色一个明确的定位，不该问的不要问，不该说的不要说，不该要求的不要要求，感情要专一、安分，不要有支解和破坏的心理，因为大家都有各自的生活，也不要为他昼夜难眠。分享他的快乐，分担他的痛苦，理解他，把他当作爱人、情人、朋友去疼他，不要给他压力，关心他，体贴他，为他着想。这样的情人才会相爱长久，乃至一生。\n","link":"https://blog.cuile.com/posts/tips/tips10/","section":"posts","tags":null,"title":"情人"},{"body":"青春，是与七个自己相遇。一个明媚，一个忧伤，一个华丽，一个冒险，一个倔强，一个柔软，最后那个正在成长。\n不要轻易对别人好，因为只会让别人觉得你的好很廉价。\n当你心情平白无故变得不好，那你肯定是在想某个人了。\n","link":"https://blog.cuile.com/posts/tips/tips9/","section":"posts","tags":null,"title":"人生不能靠心情活着，而要靠心态去生活。"},{"body":"懂得，是一种难言的柔情，入心入肺,入骨入髓;懂得，即使不言不语，即使山高水远，彼此的心依然贴近，惺惺相惜没有离。懂得，是发自内心的声音！ 有些人，无需相识，却能通过一段话、一篇字明白彼此的心情。虽然隔着一张屏，一本书，一页纸，因为懂得，所以，她就是那个可以走进自己内心深处的人。\n有些情，无需轰轰烈烈，却能深深铭记在心底一辈子。虽然时光荏苒，青春不在，因为懂得，所以他（她）依然是那个不管是开心或是悲伤都可以在心底温情拥抱的人。\n然而，在我们漫长的一生里，又会遇见几个懂自己的人，就算是遇见了，又会有几个真正愿意懂自己的。这样的人，如果遇到了，或男或女，只需一人便足够了。真正的懂得，不是相邀，也不是牵引，更不是逼迫，而是实实在在自然而然的明白，这样的明白，无关风月，无关功利，甚至无关风雨也无关晴天。\n真正的懂得，不必言语，不必刻意，有时，只需浅浅一个微笑。真正的懂得，不必解释，不必逃避，有时，只需轻轻的一声呼唤。真正的懂得是一种心情，一种欣赏，更是一种心灵的默契。\n懂得，是无声的，也是有声的。每当你开心时，忧伤时，伪装时，失落时，流泪时，甚至你对生活不满抱怨时，无需多言，因为他(她)会说出那句足以让你感动流泪话语：“我知道，我懂得，我明白”。这是一句比爱和喜欢更深情的表白。\n","link":"https://blog.cuile.com/posts/tips/tips8/","section":"posts","tags":null,"title":"＂懂你＂比喜欢你更重要"},{"body":"观物  以理观物，看到事物的本质 本性观物，知晓事物的表现 以命观物，知晓过去和未来  上好义则下好义，上好利则下必好利 ","link":"https://blog.cuile.com/posts/tips/tips7/","section":"posts","tags":null,"title":"渔樵问对"},{"body":" 明拍马屁 - 先明夸 暗拍马屁 - 再谈一路走来的心得  ","link":"https://blog.cuile.com/posts/tips/tips6/","section":"posts","tags":null,"title":"如何不尬聊"},{"body":"仁义礼智信，温良恭俭让，忠孝廉耻勇。 ","link":"https://blog.cuile.com/posts/tips/tips5/","section":"posts","tags":null,"title":"传统美德"},{"body":"仗义每多屠狗辈，负心多是读书人。[1]\n参考 [1] 百度百科\n","link":"https://blog.cuile.com/posts/tips/tips4/","section":"posts","tags":null,"title":"俗话说"},{"body":"","link":"https://blog.cuile.com/series/git/","section":"series","tags":null,"title":"git"},{"body":"","link":"https://blog.cuile.com/tags/keychain/","section":"tags","tags":null,"title":"keychain"},{"body":"","link":"https://blog.cuile.com/tags/ssh/","section":"tags","tags":null,"title":"ssh"},{"body":"生成新的 SSH Key 1$ ssh-keygen -t rsa -b 4096 -C \u0026#34;your_email@example.com\u0026#34; 2... 3Enter a file in which to save the key (/home/you/.ssh/algorithm): \u0026lt;密钥文件名\u0026gt; 4Enter passphrase (empty for no passphrase): [输入密码] 5Enter same passphrase again: [再次输入密码] 将新的 SSH Key 添加到 Github  将公钥文件的内容COPY出来  1$ cat ~/.ssh/github.com.key.pub Github.com -\u0026gt; \u0026quot;Settings\u0026quot; -\u0026gt; \u0026quot;SSH and GPG keys\u0026quot; -\u0026gt; \u0026quot;New SSH key\u0026quot;   Title : 为新密钥添加描述性标签\nKey : 粘贴COPY的公钥内容\n \u0026quot;Add SSH key\u0026quot;  使用 SSH 连接到 Github  安装keychain  如果找不到软件，更换软件源 Linux 版本库管理\n1$ yum install -y keychain 2# or 3$ apk add keychain 使用 SSH key  1$ eval `keychain --eval ~/.ssh/github.com.key` 测试连接  1$ ssh -T git@github.com 2... 3Are you sure you want to continue connecting (yes/no)? \u0026lt;yes\u0026gt; 4... 5Hi username! You\u0026#39;ve successfully authenticated, but GitHub does not 6provide shell access. 自动验证 在 ~/.bash_profile 或 ~/.bashrc 文件内添加，在每次登录的时候，自动添加密钥\n1eval `keychain --eval ~/.ssh/github.com.key` 参考文档  Generating a new SSH key and adding it to the ssh-agent Funtoo Keychain Project  ","link":"https://blog.cuile.com/posts/git/connect_with_ssh/","section":"posts","tags":["ssh","keychain"],"title":"使用 SSH 连接 Github"},{"body":"在 Alpine 上安装 Docker 真是一件让人感觉非常愉快的事情，因为过程非常简单。\n修改 apk 源 1~# nano /etc/apk/repositories 因为 docker 在社区的库里，所以要打开 community 的源。\n1#/media/cdrom/apks 2http://mirrors.tuna.tsinghua.edu.cn/alpine/v3.16/main 3http://mirrors.tuna.tsinghua.edu.cn/alpine/v3.16/community 4#http://mirrors.tuna.tsinghua.edu.cn/alpine/edge/main 5#http://mirrors.tuna.tsinghua.edu.cn/alpine/edge/community 6#http://mirrors.tuna.tsinghua.edu.cn/alpine/edge/testing 7 1~# apk update 2 安装 docker 1~# apk add docker docker-cli-compose 2# 这里要特别注意，docker compose 的包名在 Alpine 里是 docker-cli-compose，不是 docker-compose-plugin。 3# docker-compose 包是 compose 的独立安装包，官方已经不再支持这种安装方式。 4... 5~# docker -v 6Docker version 20.10.16, build aa7e414fdcb23a66e8fabbef0a560ef1769eace5 7~# docker compose version 8Docker Compose version v2.12.2 启动 docker 1# 引导时启动 2~# rc-update add docker boot 3# 启动服务 4~# service docker start 测试 1~# docker run hello-world ","link":"https://blog.cuile.com/posts/linux/alpine_linux_docker/","section":"posts","tags":["Alpine linux"],"title":"Alpine Linux 安装 Docker"},{"body":"网卡静态地址 1~# nano /etc/network/interfaces 1auto lo 2iface lo inet loopback 3 4auto eth0 5iface eth0 inet static 6 address 192.168.10.16/24 7 gateway 192.168.10.10 8 hostname alpine DNS 地址 1~# nano /etc/resolv.conf 1nameserver 114.114.114.114 重启网络 1~# service networking restart ","link":"https://blog.cuile.com/posts/linux/alpine_linux_network/","section":"posts","tags":["Alpine linux"],"title":"Alpine Linux 网络设置"},{"body":"","link":"https://blog.cuile.com/series/network/","section":"series","tags":null,"title":"network"},{"body":"1. 准备系统 Alpine 有许多版本，其中 VIRTUAL 是专门针对虚拟环境优化过的，所以主要使用这个版本来安装。\nhttps://www.alpinelinux.org/downloads/\n2. 登录 1... 2# 使用启动盘启动后，直接使用 root 登录系统 3localhost login: root 3. 安装 1... 2localhost:~# setup-alpine 3 4# 选择键盘布局 5# 这里两个都选 cn 或都不选 6... 7Select keyboard layout: [none] cn 8... 9Select variant (or \u0026#39;abort\u0026#39;): cn 10 11# 设置主机名 12... 13Enter system hostname (fully qualified form, e.g. \u0026#39;foo.example.org\u0026#39;) [localhost] home 14 15# 设置网络 16... 17Which one do you want to initialize? (or \u0026#39;?\u0026#39; or \u0026#39;done\u0026#39;) [eth0] eth0 18 19Ip address for eth0? (or \u0026#39;dhcp\u0026#39;, \u0026#39;none\u0026#39;, \u0026#39;?\u0026#39;) [dhcp] dhcp 20Do you want to do any manual network configuration? (y/n) [n] n 21# or 手动输入IP地址 22Ip address for eth0? (or \u0026#39;dhcp\u0026#39;, \u0026#39;none\u0026#39;, \u0026#39;?\u0026#39;) [dhcp] 192.168.10.16/24 23Gateway? (or \u0026#39;none\u0026#39;) [none] 192.168.10.10 24Do you want to do any manual network configuration? (y/n) [n] n 25DNS domain name? (e.g \u0026#39;bar.com\u0026#39;) 26DNS nameserver(s)? 114.114.114.114 27 28# 设置密码 29... 30New password: 31... 32Retype password: 33 34# 设置时区 35# PRC 代理中国，也可以输入 Asia/，再输入 Shanghai 36... 37Which timezone are you in? (\u0026#39;?\u0026#39; for list) [UTC] PRC 38 39# 设备代理 40... 41HTTP/FTP proxy URL? (e.g. \u0026#39;http://proxy:8080\u0026#39;, or \u0026#39;none\u0026#39;) [none] none 42 43# 设置更新源 44# f 是自动测试并选择最快的源，建议使用 45... 46Enter mirror number (1-74) or URL to add (or r/f/e/done) [1] f 47 48#  49Setup a user? (enter a lower-case loginname, or \u0026#39;no\u0026#39;) [no] no 50 51# 设置ssh服务 52Which ssh server? (\u0026#39;openssh\u0026#39;, \u0026#39;dropbear\u0026#39;, or \u0026#39;none\u0026#39;) [openssh] openssh 53# 这里一定要输入 yes  54# 许多教程都说 Alpine 默认没有远程登录，都上手动修改，其实是可以在安装时就设备好的 55Allow root ssh login? (\u0026#39;?\u0026#39; for help) [prohibit-password] yes 56Enter ssh key or URL for root (or \u0026#39;none\u0026#39;) [none] none 57 58# 设置磁盘 59... 60Which disk(s) would you like to use? (or \u0026#39;?\u0026#39; for help or \u0026#39;none\u0026#39;) [none] sda 61... 62How would you like to use it? (\u0026#39;sys\u0026#39;, \u0026#39;data\u0026#39;, \u0026#39;crypt\u0026#39;, \u0026#39;lvm\u0026#39; or \u0026#39;?\u0026#39; for help) [?] sys 63... 64WARNING: Erase the aboue disk(s) and continue? (y/n) [n] y 65... 66Installation is complete. Please reboot. 67# 到这里安装全部完成 68 69# 2.13 reboot命令重启电脑 70home:~# reboot ","link":"https://blog.cuile.com/posts/linux/alpine_linux_install/","section":"posts","tags":["Alpine linux"],"title":"Alpine Linux 3.16 安装"},{"body":"","link":"https://blog.cuile.com/tags/linux/","section":"tags","tags":null,"title":"Linux"},{"body":"","link":"https://blog.cuile.com/tags/ups/","section":"tags","tags":null,"title":"UPS"},{"body":"为家里的微形PVE服务器买了山克的UPS，发现与 linux 连接使用还是需要安装一下的，而且市场上基本都是 OEM 的产品，所以操作过程通用\n 记录Gen8安装PVE+DSM+win10+UPS的一些过程 ViewPower中文使用手册  ","link":"https://blog.cuile.com/posts/ups/ups_install/","section":"posts","tags":["UPS","Linux"],"title":"山克 UPS 安装手册"},{"body":"1、拉取 1$ git pull 1.1、删除本地文件后，从远端重新拉取最新版本 git提示： up-to-date. 但未从远端得到文件\n1# 1 查看本地分支是否发生变化 2$ git branch -a 3 4# 2 如本地库处于另一个分支中，需将本地分支重置回原分支 5$ git checkout \u0026lt;branch name\u0026gt; 6$ git reset --hard 7 8# 3 如本地分支没有变化，则强行 pull 覆盖本地文件 9$ git fetch --all 10$ git reset --hard origin/\u0026lt;branch name\u0026gt; 11$ git pull 2、推送 1# 查看本地项目状态 2$ git status -s 3# 添加文件 | 添加目录 | 添加所有内容 4$ git add \u0026lt; file | dir | . \u0026gt; 5# 删除 add 的文件 6$ git rm [-r] --cached \u0026lt;file | .\u0026gt; 7# 提交变化 8$ git commit -m [message] 9# 推送到远程库 10$ git push 11# or 12$ git push \u0026lt;远程主机名\u0026gt; \u0026lt;本地分支名\u0026gt;:\u0026lt;远程分支名\u0026gt; 2.1、推送新项目到github 先在githubh上创建好项目\n1$ git init 2$ git add . 3$ git status -s 4$ git config --global user.name \u0026#34;Your Name\u0026#34; 5$ git config --global user.email you@example.com 6$ git commit --amend --reset-author 7$ git commit -m \u0026#34;first commit\u0026#34; 8$ git remote add origin git@github.com:Youname/repo_name.git 9$ git push -u origin master 3、分支 1$ git branch -a 切换分支 1$ git checkout \u0026lt;branch name\u0026gt; 拉取远程分支 1$ git fetch origin \u0026lt;branch\u0026gt; 2$ git checkout -b \u0026lt;branch\u0026gt; origin/\u0026lt;branch\u0026gt; 3$ git pull origin \u0026lt;branch\u0026gt; 更新远程分支列表 1# 如果你的 remote branch 不是在 origin 下，把 origin 换成你的名字 2# --prune 删除远程已经删除的分支 3$ git remote update origin --prune  4、标签 1# 查看现有的标签 2$ git tag 3 4# 给最新的提交打标签 5$ git tag 1.0 6 7# 推送所有标签 8$ git push --tags  5、项目 克隆 1$ git clone https://xxxx@bitbucket.org/xxxx/xxxx.git 2# or  3$ git clone git@github.com:xxxxx/xxxxx.git 4# 克隆指定分支，到指定目录 5$ git clone -b \u0026lt;branch\u0026gt; \u0026lt;repo\u0026gt; \u0026lt;path\u0026gt; 导出 1$ git archive --format zip -0 \\ 2 --output output.zip \\ 3 --remote git@github.com:Cuile/NMP.git \\ 4 master \\ 5 ./ 6 7# 使用zip格式，不压缩 8--format zip -0 9# 输出的文件名 10--output output.zip 11# 远程项目地址 12--remote git@github.com:Cuile/NMP.git 13# 分支名 14master 15# 输出到当前目录 16./  6、代理 设置代理 1$ git config --global http.proxy http://[username:passwrod@]\u0026lt;ip or URL\u0026gt;:port 2$ git config --global https.proxy http://[username:passwrod@]\u0026lt;ip or URL\u0026gt;:port 3 4# 只代理github.com 5$ git config --global http.https://github.com.proxy http://[username:passwrod@]\u0026lt;ip or URL\u0026gt;:port 6$ git config --global https.https://github.com.proxy http://[username:passwrod@]\u0026lt;ip or URL\u0026gt;:port 查看代理 1$ git config --global --get http.proxy 2$ git config --global --get https.proxy 3 4$ git config --global --get http.https://github.com.proxy 5$ git config --global --get https.https://github.com.proxy 取消代理 1$ git config --global --unset http.proxy 2$ git config --global --unset https.proxy 3 4$ git config --global --unset http.https://github.com.proxy 5$ git config --global --unset https.https://github.com.proxy ","link":"https://blog.cuile.com/posts/git/git_cli/","section":"posts","tags":null,"title":"Git 命令行"},{"body":"","link":"https://blog.cuile.com/series/harmonyos/","section":"series","tags":null,"title":"HarmonyOS"},{"body":"保持后台进程运行  设置 \u0026gt; 应用启动管理 \u0026gt; 关闭该应用的自动管理开关，并在弹框中勾选允许后台活动。 设置 \u0026gt; 电池优化 \u0026gt; 点击不允许 \u0026gt; 选择所有应用 \u0026gt; 找到无法后台运行的应用 \u0026gt; 设置为不允许。 设置 \u0026gt; 电池，关闭省电模式开关。 设置 \u0026gt; 电池 \u0026gt; 更多电池设置，开启休眠时始终保持网络连接开关。 打开应用 \u0026gt; 进入多任务界面 \u0026gt; 下拉选中的应用卡片，左上角出现加锁图标 \u0026gt; 点击清理图标，清理其他不经常使用的应用。 手机管家 \u0026gt; 设置，打开智能维护开关以确保良好的应用使用体验。  ","link":"https://blog.cuile.com/posts/harmonyos_optimization/","section":"posts","tags":null,"title":"鸿蒙系统优化"},{"body":"","link":"https://blog.cuile.com/categories/%E5%9D%A6%E5%85%8B%E4%B8%96%E7%95%8C/","section":"categories","tags":null,"title":"坦克世界"},{"body":"火炮  开局先找炮位，最好能把车头垫起来。 到达炮位后，预瞄全国点位。了解哪些点能打到，哪些打不到。 开局先瞄传统点位，收过路费。 不瞄与瞄准线垂直运动的车。 不瞄轻坦，视野跟着重坦走。 瞄准速度比装填速度重要。 用 Shift 瞄准后，按 G 切换到弹道视角，可提高命中率。 结合炮弹飞行时间，预留瞄准余量。 利用装填间隙转换炮位。 打击优先级：  火炮 \u0026gt; 反坦克炮 \u0026gt; 重坦 \u0026gt; 中坦 \u0026gt; 轻坦 远端 \u0026gt; 近端 血量少 \u0026gt; 血量多   敌方进入最大侦测范围，与你之间少于二辆已方车辆时，就应考虑转移。  战地升级  近战型选“瞄准圈缩小”，远程型选“减少瞄准时间”。 突击型选“维持速度”。  ","link":"https://blog.cuile.com/posts/games/wot_tips/","section":"posts","tags":["心得体会"],"title":"坦克使用手册"},{"body":"","link":"https://blog.cuile.com/tags/%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A/","section":"tags","tags":null,"title":"心得体会"},{"body":"","link":"https://blog.cuile.com/series/%E7%81%AB%E7%82%AE/","section":"series","tags":null,"title":"火炮"},{"body":"","link":"https://blog.cuile.com/series/snap/","section":"series","tags":null,"title":"Snap"},{"body":"尝试使用 Ubuntu 的 Snap 后，发现真的非常方便。\n看过Snap的介绍以后，发现Snap的沙盒理念非常先进，在存储基本不成问题背景下，会系统环境的影响更小。\n而且docker-compose命令也会一起安装，更是方便。\n1.安装 1$ sudo snap install docker 2.设置 1# 设置开机启动 2$ sudo snap start docker --enable 3# 确认服务状态 4$ sudo snap services docker 5# 查看服务详情 6$ service snap.docker.dockerd status 使用sudo安装后要注意以后调用时，都要使用sudo命令前缀。\n3.其它 1# 安装目录 2/snap/docker/current 3# 服务启动配置文件 4/etc/systemd/system/snap.docker.dockerd.service 5# 配套 AppArmor 配置文件 6/var/lib/snapd/apparmor/profiles/snap.docker.docker 7/var/lib/snapd/apparmor/profiles/snap.docker.dockerd 8# 默认 Unix Socket 文件路径 9unix:///var/snap/docker/current/run/docker/libcontainerd/docker-containerd.sock 4.参考文献 Docker 安装指南\n","link":"https://blog.cuile.com/posts/docker/docker_install_snap/","section":"posts","tags":null,"title":"使用 Snap 安装 Docker"},{"body":"","link":"https://blog.cuile.com/series/work-tips/","section":"series","tags":null,"title":"work tips"},{"body":"1 能力是否特殊？  经济制约性 因果含糊性 路径稀缺性  2 能力是否核心？  是否受到加持 是否适用环境  ","link":"https://blog.cuile.com/posts/tips/tips3/","section":"posts","tags":null,"title":"能力的评价"},{"body":" 见微知著，是对事物发展规律的洞察。 触类旁通，是对事物内在逻辑的洞悉。  ","link":"https://blog.cuile.com/posts/tips/tips2/","section":"posts","tags":null,"title":"小差别"},{"body":" 交浅语深，动机不良。 口说是非，心态不正。 刻薄挑剔，人际不和。 言高行低，品行不端。 至亲成仇，情感不真。 违规为乐，习惯不好。 酒后失控，心态不稳。  ","link":"https://blog.cuile.com/posts/tips/tips1/","section":"posts","tags":null,"title":"七态为品"},{"body":"","link":"https://blog.cuile.com/tags/django/","section":"tags","tags":null,"title":"Django"},{"body":"","link":"https://blog.cuile.com/tags/docker/","section":"tags","tags":null,"title":"docker"},{"body":"1 准备环境 开发环境还是建议使用 Docker 来搭建，方便快捷。 不过 Django 的官方镜像已经弃用了，官方建议新版本使用 Python 官方提供的镜像来构建。\n1Docker 2 ┗ Python == 3.9.12-buster 3 ┗ Django == 3.2.13 LTS 4 ┗ django-simpleui==2022.11.30 可以参考[https://github.com/Cuile/Docker-to-Python/tree/master/Django]，提供了 Dockerfil、yml 文件，还提供全套使用命令。\n2 创建项目 1# 创建项目 2$ django-admin startproject mysite 3$ cd mysite 4 5# 生成项目 6$ python manage.py startapp websrc 7# 运行项目测试 8$ python manage.py runserver 0.0.0.0:80 修改配置后，建议使用项目调试的方式启动，不要使用快捷命令，项目正常启动稳定运行后，再使用快捷命令。\n1# settings.py 2 3# 任意地址都可以访问 Django 4ALLOWED_HOSTS = [\u0026#39;*\u0026#39;] 5 6# 添加 simpleui 模板，和创建的项目 7INSTALLED_APPS = [ 8 \u0026#39;simpleui\u0026#39;, 9 \u0026#39;websrc\u0026#39;, 10 \u0026#39;......\u0026#39;, 11] 12 13# 这个与多语种有关，在项目初始阶段不要修改，后续添加了多语种支持再修改，否则会导致无法启动。 14# 具体参考(http://www.i18nguy.com/unicode/language-identifiers.html)，有个傻逼教程，上来就改成 zh-CN 果然导致项目无法正常启动。 15# 正确的简体中文代码如下： 16LANGUAGE_CODE = \u0026#39;zh-Hans\u0026#39; 17 18# 时区，上海就代表北京时间，这个不能写错，写错就启动不了 19# 具体参考(https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)，这里是标准的，有个傻逼教程非给写成 Asia/Beijing 导致怎么都起不来，太TMD的二逼了。 20# 正解的北京时间时区如下： 21TIME_ZONE = \u0026#39;Asia/Shanghai\u0026#39; 22 23# 启动翻译，与上面的 LANGUAGE_CODE 设置相对应 24USE_I18N = True 25# 启动格式控制 26USE_L10N = True 27# 启动时区 28USE_TZ = True 3 创建管理员账号 1$ python manage.py createsuperuser 2Username: admin 3Email address: admin@example.com 4Password: ********** 5Password (again): ********* 6Superuser created successfully. 访问项目链接，比如\u0026quot;http://127.0.0.1:8000/admin/\n4 创建数据模型 4.1 编辑 models.py 文件，改变模型 ......\n4.2 为模型的改变生成迁移文件 1$ python manage.py makemigrations websrc 2Migrations for \u0026#39;websrc\u0026#39;: 3 polls/migrations/0001_initial.py 4 - Create model Question 5 - Create model Choice 可以查看生成的SQL语句\n1$ python manage.py sqlmigrate websrc 0001 4.3 应用数据库迁移 1$ python manage.py migrate 2Operations to perform: 3 Apply all migrations: admin, auth, contenttypes, polls, sessions 4Running migrations: 5 Rendering model states... DONE 6 Applying websrc.0001_initial... OK 5 向管理页面加入数据模型 1# websrc/admin.py 2 3from django.contrib import admin 4 5from .models import Question 6 7admin.site.register(Question) 6 Gunicorn 托管 Django 6.1 安装 Gunicorn 参考文档\n Gunicorn-配置详解  6.2 收集静态文件 1$ python manage.py collectstatic 2# 如果报错 3django.core.exceptions.ImproperlyConfigured: You\u0026#39;re using the staticfiles app without having set the STATIC_ROOT setting to a filesystem path. 需要修改 settings.py ，添加 STATIC_ROOT\n1# \u0026lt;myproject\u0026gt;/settings.py 2 3# STATICFILES_DIRS = [os.path.join(BASE_DIR, \u0026#34;static\u0026#34;), ] 4STATIC_ROOT = os.path.join(BASE_DIR, \u0026#34;static\u0026#34;) 如果你从 INSTALLED_APPS 中删除一个应用程序，最好使用 collectstatic --clear 选项来删除过时的静态文件。\n参考文档\n Django - STATICFILES_DIRS - STATIC_ROOT 配置  6.3 设置静态文件路由 1# \u0026lt;myproject\u0026gt;/urls.py 2 3... 4urlpatterns = [ 5 ... 6] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) 参考文档\n 开发时提供静态文件服务  7 Supervisor 启动 Gunicorn 注意：使用 docker 时，要确保 nodaemon 选项为 true，否则 docker 不能正常启动\n1[supervisord] 2nodaemon=true 参考文档\n Using Supervisor with Docker  ","link":"https://blog.cuile.com/posts/django/django_development_introduction/","section":"posts","tags":["Django","Python","docker","gunicorn","Supervisor"],"title":"Docker 环境 Django 开发简介"},{"body":"","link":"https://blog.cuile.com/tags/gunicorn/","section":"tags","tags":null,"title":"gunicorn"},{"body":"","link":"https://blog.cuile.com/tags/supervisor/","section":"tags","tags":null,"title":"Supervisor"},{"body":"","link":"https://blog.cuile.com/tags/centos-7/","section":"tags","tags":null,"title":"CentOS 7"},{"body":"1、查看已安装的Python 1# 查看已安装的信息 2$ yum info python3 3# 查看python安装位置 4$ whereis python3 2、卸载已安装的Python环境 1# 卸载已安装的程序 2$ yum erase python3 3# 删除所有残余文件 4$ whereis python3|xargs rm -frv 5# 查看现有的python 6$ whereis python3 3、yum安装依赖环境 1$ yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel 4、官网下载Python3.9.12 1$ yum -y install wget 2# 尽量使用国内镜像站点下载比较快 3$ wget https://mirrors.huaweicloud.com/python/3.9.12/Python-3.9.12.tgz 5、创建安装目录 1$ tar -zxvf Python-3.9.12.tgz -C ./ 2$ cd Python-3.9.12 3$ mkdir /usr/local/python3 4$ ./configure --prefix=/usr/local/python3.9.12 5$ make \u0026amp;\u0026amp; make install 6、创建软链接 1$ ln -s /usr/local/python3.9.12/bin/python3 /usr/bin/python3 2$ ln -s /usr/local/python3.9.12/bin/pip3 /usr/bin/pip3 7、测试 1$ python3 -V 2Python 3.9.12 3 4$ pip3 -V 5pip 22.0.4 from /usr/local/python3.9.12/lib/python3.9/site-packages/pip (python 3.9) 8、pip升级、换源 1# pip升级 2$ python3 -m pip install --upgrade pip 3# pip换源 4# 推荐使用清华的源，因为使用https协议 5$ pip3 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple ","link":"https://blog.cuile.com/posts/python/python3_install/","section":"posts","tags":["Python","pip","CentOS 7"],"title":"CentOS 7 安装 Python3.9.12"},{"body":"","link":"https://blog.cuile.com/tags/pip/","section":"tags","tags":null,"title":"pip"},{"body":"其实网上相关的文章已经非常多了，所以这篇文章的作用只是记录和明确一条确定可行的操作路径，为以后的操作节省时间，毕竟像我一样大部分人都不是专业的系统管理员，能够快速解决问题就可以了，并不想做过多的专业研究与探索。\n本操作手册是官方手册与网上手册的结合版本，集两家之所长，亲自操作可用。\n1.系统准备  查看系统版本  1$ cat /etc/redhat-release 2\u0026gt; CentOS Linux release 7.6.1810 (Core) // CentOs 7 以上版本  查看系统内核版本  1$ uname -r 2\u0026gt; 4.10.4-1.el7.elrepo.x86_64 // 内核版本要\u0026gt;3.10 2.卸载旧版本 1$ yum remove docker \\ 2 docker-client \\ 3 docker-client-latest \\ 4 docker-common \\ 5 docker-latest \\ 6 docker-latest-logrotate \\ 7 docker-logrotate \\ 8 docker-selinux \\ 9 docker-engine-selinux \\ 10 docker-engine 3.安装依赖包 1$ yum install -y yum-utils \\ 2 device-mapper-persistent-data \\ 3 lvm2 4.添加yum软件源 1# 如果系统已切换到阿里云镜像源地址，可跳过此步。 2# 阿里云镜像自带docker源 3$ yum-config-manager \\ 4 --add-repo \\ 5 https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo 6 7# 使用官方源 8$ yum-config-manager \\ 9 --add-repo \\ 10 https://download.docker.com/linux/centos/docker-ce.repo 11 12$ yum makecache fast 13# CentOS 8 使用timer替换fast 14# $ yum makecache timer 5.安装Docker 1$ yum install docker-ce docker-ce-cli containerd.io 2 3# 如果在CentOS 8 系统上，会提示containerd.io版本过低 4# 需要独立安装containerd.io 5Error: 6 Problem: package docker-ce-3:19.03.6-3.el7.x86_64 requires containerd.io \u0026gt;= 1.2.2-3, but none of the providers can be installeddnf install 7 8$ yum install https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm 9$ yum install docker-ce docker-ce-cli 6.启动Docker服务 1# 设为开机启动 2$ systemctl enable docker.service 3# 启动服务 4$ systemctl start docker.service 7.配置仓库镜像 1$ nano /etc/docker/daemon.json 添加官方仓库镜像地址\n1{ 2 \u0026#34;registry-mirrors\u0026#34;: [\u0026#34;https://registry.docker-cn.com\u0026#34;] 3} 其实使用中仓库镜像的速度并不理想，还是设置代理更加实用\n 如何优雅的给 Docker 配置网络代理  8.测试安装结果 1$ docker run hello-world 2 3Unable to find image \u0026#39;hello-world:latest\u0026#39; locally 4latest: Pulling from library/hello-world 51b930d010525: Pull complete 6Digest: sha256:6540fc08ee6e6b7b63468dc3317e3303aae178cb8a45ed3123180328bcc1d20f 7Status: Downloaded newer image for hello-world:latest 8 9Hello from Docker! 10This message shows that your installation appears to be working correctly. 11 12To generate this message, Docker took the following steps: 13 1. The Docker client contacted the Docker daemon. 14 2. The Docker daemon pulled the \u0026#34;hello-world\u0026#34; image from the Docker Hub. 15 (amd64) 16 3. The Docker daemon created a new container from that image which runs the 17 executable that produces the output you are currently reading. 18 4. The Docker daemon streamed that output to the Docker client, which sent it 19 to your terminal. 20 21To try something more ambitious, you can run an Ubuntu container with: 22 $ docker run -it ubuntu bash 23 24Share images, automate workflows, and more with a free Docker ID: 25 https://hub.docker.com/ 26 27For more examples and ideas, visit: 28 https://docs.docker.com/get-started/ 若能正常输出以上信息，则说明安装成功。\n9.安装 docker compose 官方推荐使用插件方式安装\n1$ yum -y install docker-compose-plugin 2 3$ docker compose version 4Docker Compose version v2.5.0 ","link":"https://blog.cuile.com/posts/docker/docker_install_centos/","section":"posts","tags":null,"title":"CentOS 7 安装 Docker"},{"body":"Proxmox系统安装后，日志报错\n1rrdcached[4513]: handle_request_update: Could not read RRD file. 2pmxcfs[4527]: [status] notice: RRDC update error /var/lib/rrdcached/db/pve2-vm/85235: -1 3pmxcfs[4527]: [status] notice: RRD update error /var/lib/rrdcached/db/pve2-vm/85235: mmaping file \u0026#39;/var/lib/rrdcached/db/pve2-vm/85235\u0026#39;: Invalid argument 修复命令\n1$ rm -r /var/lib/rrdcached/db 2$ systemctl restart rrdcached.service 参考文档  Strange RRD error  ","link":"https://blog.cuile.com/posts/proxmox/proxmox_rrd_error/","section":"posts","tags":null,"title":"修复 Proxmox RRD 错误"},{"body":"","link":"https://blog.cuile.com/tags/ffmpeg/","section":"tags","tags":null,"title":"FFmpeg"},{"body":"脚本基于Windows10系统设计\n查看软件版本 1D:\\ffmpeg\\bin\u0026gt;ver 2 3Microsoft Windows [版本 10.0.18362.356] 4 5D:\\ffmpeg\\bin\u0026gt;ffmpeg.exe -version 6 7ffmpeg version N-94600-g661a9b274b Copyright (c) 2000-2019 the FFmpeg developers 8built with gcc 9.1.1 (GCC) 20190807 9configuration: --enable-gpl --enable-version3 --enable-sdl2 --enable-fontconfig --enable-gnutls --enable-iconv --enable-libass --enable-libdav1d --enable-libbluray --enable-li 10bfreetype --enable-libmp3lame --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libopus --enable-libshine --enable-libsnappy --enable-libsoxr 11 --enable-libtheora --enable-libtwolame --enable-libvpx --enable-libwavpack --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libzimg --enable-lzma 12--enable-zlib --enable-gmp --enable-libvidstab --enable-libvorbis --enable-libvo-amrwbenc --enable-libmysofa --enable-libspeex --enable-libxvid --enable-libaom --enable-libmfx 13 --enable-amf --enable-ffnvcodec --enable-cuvid --enable-d3d11va --enable-nvenc --enable-nvdec --enable-dxva2 --enable-avisynth --enable-libopenmpt 14libavutil 56. 33.100 / 56. 33.100 15libavcodec 58. 55.100 / 58. 55.100 16libavformat 58. 31.101 / 58. 31.101 17libavdevice 58. 9.100 / 58. 9.100 18libavfilter 7. 58.100 / 7. 58.100 19libswscale 5. 6.100 / 5. 6.100 20libswresample 3. 6.100 / 3. 6.100 21libpostproc 55. 6.100 / 55. 6.100 添加LOGO 1D:\\ffmpeg\\bin\\ffmpeg^ 2 -c:v h264_qsv ^ 3 -i %1 ^ 4 -i F:\\\\电教馆\\\\logo.png ^ 5 -c:v h264_qsv ^ 6 -b:v 1894k ^ 7 -filter_complex [1:v]scale=125:125[logo];[0:v][logo]overlay=30:25 ^ 8 -c:a copy ^ 9 -y ^ 10 %2 去掉LOGO 1D:\\ffmpeg\\bin\\ffmpeg^ 2 -c:v h264_qsv ^ 3 -i %1 ^ 4 -c:v h264_qsv ^ 5 -b:v 1894k ^ 6 -filter_complex [0:v]split[split_main][split_delogo];[split_delogo]trim=start=1:end=5,delogo=x=270:y=820:w=1420:h=50:show=0[delogoed];[split_main][delogoed]overlay=eof_action=pass ^ 7 -c:a copy ^ 8 -y ^ 9 %2 合并操作 1D:\\ffmpeg\\bin\\ffmpeg^ 2 -c:v h264_qsv ^ 3 -i %1 ^ 4 -i F:\\\\电教馆\\\\logo.png ^ 5 -c:v h264_qsv ^ 6 -b:v 1894k ^ 7 -filter_complex [1:v]scale=125:125[logo];[0:v][logo]overlay=30:25[tmp_video];[tmp_video]split[main][delogo];[delogo]trim=start=1:end=5,delogo=x=270:y=820:w=1420:h=50:show=0[delogoed];[main][delogoed]overlay=eof_action=pass ^ 8 -c:a copy ^ 9 -y ^ 10 %2 遍历文件夹下的MP4文件，打水印、去字幕、截图验证效果 1@echo off \u0026amp; setlocal enabledelayedexpansion 2 3echo ################################################# 4echo 开始处理视频文件 5echo. 6:: 指定起始文件夹 7set DIR=\u0026#34;E:\\六年级\\\u0026#34; 8REM set DIR=\u0026#34;E:\\六年级\\第一学期\\sx6s01001\\\u0026#34; 9echo DIR=%DIR% 10 11REM 指定运行参数 12set scale=\u0026#34;scale=90:90\u0026#34; 13set overlay=\u0026#34;overlay=50:15\u0026#34; 14set trim=\u0026#34;trim=start=2:end=6\u0026#34; 15set delogo=\u0026#34;delogo=x=190:y=545:w=930:h=30:show=0\u0026#34; 16 17:: 参数 /R 表示需要遍历子文件夹,去掉表示不遍历子文件夹 18:: %%f 是一个变量,类似于迭代器,但是这个变量只能由一个字母组成,前面带上%% 19:: 括号中是通配符,可以指定后缀名,*.*表示所有文件 20for /R %DIR% %%f in (*.mp4) do ( 21\techo f=%%f 22\tcall :check_info \u0026#34;%%f\u0026#34; ^ 23\u0026amp;\u0026amp; echo ################################################# ^ 24\u0026amp;\u0026amp; echo bit_rate=!bit_rate! ^ 25\u0026amp;\u0026amp; call :process_mpeg4 \u0026#34;%%f\u0026#34;,\u0026#34;%%~df%%~pf%%~nf_out%%~xf\u0026#34;,!bit_rate!,%scale%,%overlay%,%trim%,%delogo% ^ 26\u0026amp;\u0026amp; call :screenshot \u0026#34;%%~df%%~pf%%~nf_out%%~xf\u0026#34;,\u0026#34;%%~df%%~pf%%~nf_out\u0026#34; 27) 28exit /b 29 30:check_info 31\techo ################################################# 32\techo check_info 33\tfor /F %%s in (\u0026#39;D:\\ffmpeg\\bin\\ffprobe -hide_banner ^ 34-unit -prefix -byte_binary_prefix ^ 35-print_format flat ^ 36-show_format -show_streams ^ 37-i %1^| find \u0026#34;streams.stream.0.bit_rate\u0026#34;\u0026#39;) do (set bit_rate=%%s) 38\tset bit_rate=%bit_rate:~27,5% 39\tset bit_rate=%bit_rate:.=% 40goto :eof 41 42:process_mpeg4 43\techo ################################################# 44\techo process_mpeg4 45\tD:\\ffmpeg\\bin\\ffmpeg -hide_banner ^ 46\t-vcodec mpeg4 ^ 47\t-i %1 -i F:\\\\电教馆\\\\logo.png ^ 48\t-vcodec h264_qsv -b:v %3k ^ 49\t-filter_complex [1:v]%4[logo];[0:v][logo]%5[tmp_video];[tmp_video]split[main][delogo];[delogo]%6,%7[delogoed];[main][delogoed]overlay=eof_action=pass ^ 50\t-acodec copy ^ 51\t-y %2 52goto :eof 53 54:process_h264_qsv 55\techo ################################################# 56\techo process_h264_qsv 57\tD:\\ffmpeg\\bin\\ffmpeg -hide_banner ^ 58\t-vcodec h264_qsv ^ 59\t-i %1 -i F:\\\\电教馆\\\\logo.png ^ 60\t-vcodec h264_qsv -b:v %3k ^ 61\t-filter_complex [1:v]%4[logo];[0:v][logo]%5[tmp_video];[tmp_video]split[main][delogo];[delogo]%6,%7[delogoed];[main][delogoed]overlay=eof_action=pass ^ 62\t-acodec copy ^ 63\t-y %2 64goto :eof 65 66:screenshot 67\techo ################################################# 68\techo screenshot 69\tfor /L %%i in (3,1,5) do ( 70\tD:\\ffmpeg\\bin\\ffmpeg -hide_banner ^ 71\t-ss 00:0%%i -vcodec h264_qsv ^ 72\t-i %1 ^ 73\t-vframes 1 -f image2 ^ 74\t-y %2_%%is_screenshot.jpg 75\t) 76goto :eof ","link":"https://blog.cuile.com/posts/ffmpeg_manual/","section":"posts","tags":["FFmpeg","Windwos 10"],"title":"FFmpeg脚本"},{"body":"","link":"https://blog.cuile.com/tags/windwos-10/","section":"tags","tags":null,"title":"Windwos 10"},{"body":"","link":"https://blog.cuile.com/tags/centos/","section":"tags","tags":null,"title":"CentOS"},{"body":"脚本基于Centos 7\n更换阿里云软件安装源 1# 备份原镜像文件，以免出错后可以恢复。 2$ mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup \\ 3 \u0026amp;\u0026amp; mv /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel.repo.backup \\ 4 \u0026amp;\u0026amp; mv /etc/yum.repos.d/epel-testing.repo /etc/yum.repos.d/epel-testing.repo.backup 5 6# 下载新的CentOS-Base.repo 到/etc/yum.repos.d/ 7$ wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo \\ 8 \u0026amp;\u0026amp; wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo \\ 9 \u0026amp;\u0026amp; wget -O /etc/yum.repos.d/epel-testing.repo http://mirrors.aliyun.com/repo/epel-testing.repo 10 11# 运行yum makecache生成缓存 12$ yum clean all \u0026amp;\u0026amp; yum makecache 查看已安装软件 1$ yum list installed 升级所有包同时也升级软件和系统内核 1$ yum -y update 只升级所有包，不升级软件和系统内核 1$ yum -y upgrade 查看源是否生效 1$ yum repolist 查询仓库 1# 显示所有启动的仓库 2$ yum repolist enabled 3# 显示所有禁用的仓库 4$ yum repolist disabled 5# 显示所有仓库 6$ yum repolist all 修改仓库 最常用的修改操作就是启动和停用, 可以使用以下命令实现:\n1$ yum-config-manager --enable repository… 2$ yum-config-manager --disable repository… 参考文档  查RPM 找不到包的时候，可以在这上面查查，非常有帮助 阿里巴巴开源镜像站  centos epel    ","link":"https://blog.cuile.com/posts/linux/linux_repo_manual/","section":"posts","tags":["repo","CentOS"],"title":"Linux 版本库管理"},{"body":"","link":"https://blog.cuile.com/tags/repo/","section":"tags","tags":null,"title":"repo"},{"body":"","link":"https://blog.cuile.com/tags/kernel/","section":"tags","tags":null,"title":"kernel"},{"body":"脚本基于Centos 7\n1、查看系统内核版本 1$ uname -r 23.10.0-514.26.2.el7.x86_64 3$ cat /etc/redhat-release 4CentOS Linux release 7.6.1810 (Core) 2、升级内核 导入elrepo的key，然后安装elrepo的yum源\n1$ rpm -import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org 2$ rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm 查看可用的内核相关包\n1$ yum --disablerepo=\u0026#34;*\u0026#34; --enablerepo=\u0026#34;elrepo-kernel\u0026#34; list available 主分支ml(mainline)，稳定版(stable)，长期维护版lt(longterm) 安装内核\n1$ yum -y --enablerepo=elrepo-kernel install kernel-ml.x86_64 kernel-ml-devel.x86_64 3、修改grub 1$ awk -F\\\u0026#39; \u0026#39;$1==\u0026#34;menuentry \u0026#34; {print $2}\u0026#39; /etc/grub2.cfg 2CentOS Linux (5.2.11-1.el7.elrepo.x86_64) 7 (Core) 3CentOS Linux (3.10.0-957.27.2.el7.x86_64) 7 (Core) 4CentOS Linux (3.10.0-514.26.2.el7.x86_64) 7 (Core) 5CentOS Linux (3.10.0-514.el7.x86_64) 7 (Core) 6CentOS Linux (0-rescue-963c2c41b08343f7b063dddac6b2e486) 7 (Core) 7# 新内核（5.2.11）在0的位置上 8 9$ vim /etc/default/grub 10#将 GRUB_DEFAULT=saved 改为 GRUB_DEFAULT=0 11 12# 重建内核配置 13$ grub2-mkconfig -o /boot/grub2/grub.cfg 4、重启系统 1$ reboot 2 3#查看内核版本 4$ uname -r 55.2.11-1.el7.elrepo.x86_64 ","link":"https://blog.cuile.com/posts/linux/linux_kernel_update/","section":"posts","tags":["kernel","CLI"],"title":"Linux系统内核升级"},{"body":"","link":"https://blog.cuile.com/tags/firewall/","section":"tags","tags":null,"title":"Firewall"},{"body":"","link":"https://blog.cuile.com/tags/iptables/","section":"tags","tags":null,"title":"iptables"},{"body":"脚本基于Centos 7\n注意：CentOS 7默认的防火墙不是iptables,而是firewalld\n停止firewalld服务 1#停止firewalld服务 2$ systemctl stop firewalld 3#禁用firewalld服务 4$ systemctl mask firewalld 安装 iptables 1#先检查是否安装了iptables 2$ service iptables status 3#安装iptables 4$ yum install -y iptables 5#升级iptables 6$ yum update iptables 7#安装iptables-services 8$ yum install iptables-services 启动 iptables 1#注册iptables服务，相当于以前的chkconfig iptables on 2$ systemctl enable iptables.service 3#开启服务 4$ systemctl start iptables.service 5#查看状态 6$ systemctl status iptables.service 创建规则 1# 允许ping 2$ iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT 3# or 4$ iptables -A INPUT -p icmp -j ACCEPT 5 6# 允许本地回环接口(即运行本机访问本机) 7$ iptables -A INPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT 8 9# 如果要添加内网ip信任（接受其所有TCP请求） 10$ iptables -A INPUT -p tcp -s 45.96.174.68 -j ACCEPT 11 12# 允许已建立的或相关连的通行 13$ iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT 14 15# 允许访问指定端口 16$ iptables -A INPUT -p tcp -m tcp --dport 28124 -j ACCEPT 17$ iptables -A INPUT -p tcp -m tcp --dport 6443 -j ACCEPT 18# 允许访问连续端口 19$ iptables -A INPUT -p tcp -m tcp --dport 21:25 -j ACCEPT 20# 允许访问不连续端口 21$ iptables -A INPUT -p tcp -m multiport --dport 21:25,135:139 -j ACCEPT 22 23# 过滤所有非以上规则的请求 24$ iptables -P INPUT DROP 25# 封停一个IP 26$ iptables -I INPUT -s ***.***.***.*** -j DROP 27 28 29#允许所有本机向外的访问 30$ iptables -P OUTPUT ACCEPT 31 32# 禁止其他未允许的规则访问 33$ iptables -P INPUT DROP // 默认入站规则为拒绝 34$ iptables -P FORWARD DROP // 默认转发规则为拒绝 35 36# 转发数据包 37# 将\u0026lt;本地端口\u0026gt;接收到的TCP数据包，直接转发到\u0026lt;目标IP\u0026gt;的\u0026lt;目标端口\u0026gt; 38$ iptables -t nat -A PREROUTING -p tcp --dport \u0026lt;本地端口\u0026gt; -j DNAT --to-destination \u0026lt;目标IP\u0026gt;:\u0026lt;目标端口\u0026gt; 39# 将\u0026lt;目标IP\u0026gt;的\u0026lt;目标端口\u0026gt;发来的TCP数据包，IP地址修改为\u0026lt;本地IP\u0026gt;后，原路转发回去 40$ iptables -t nat -A POSTROUTING -p tcp -d \u0026lt;目标IP\u0026gt; --dport \u0026lt;目标端口\u0026gt; -j SNAT --to \u0026lt;本地IP\u0026gt; 删除规则 1$ iptables -D INPUT #rulenum# 2# or 使用建立规则时条件，删除指定规则，这个方法比如适合代码使用 3$ iptables -D INPUT -p tcp -m tcp --dport 6443 -j ACCEPT 4# 解封一个IP 5$ iptables -D INPUT -s ***.***.***.*** -j DROP 重启防火墙 1$ service iptables restart 保存规则 1$ service iptables save 查看规则 1$ iptables -L -n --line-numbers 重置规则 1# 使用这些命令刷新和重置 iptables 到默认状态 2 3# 清除已有iptables规则 4$ iptables -F 5 6$ iptables -X 7 8$ iptables -t nat -F 9 10$ iptables -t nat -X 11 12$ iptables -t mangle -F 13 14$ iptables -t mangle -X 15 16$ iptables -t raw -F 17 18$ iptables -t raw -X 19 20$ iptables -t security -F 21 22$ iptables -t security -X 23 24$ iptables -P INPUT ACCEPT 25 26$ iptables -P FORWARD ACCEPT 27 28$ iptables -P OUTPUT ACCEPT ","link":"https://blog.cuile.com/posts/linux/linux_iptables_manual/","section":"posts","tags":["iptables","Firewall","CLI"],"title":"iptables 命令"},{"body":"","link":"https://blog.cuile.com/tags/make/","section":"tags","tags":null,"title":"make"},{"body":"","link":"https://blog.cuile.com/series/openwrt/","section":"series","tags":null,"title":"OpenWRT"},{"body":"","link":"https://blog.cuile.com/categories/%E7%BC%96%E8%AF%91/","section":"categories","tags":null,"title":"编译"},{"body":"1、准备环境 建议使用纯linux系统进行编译，如 Ubuntu 20.04 LTS，这样环境比较简单，兼容问题也少。\n 用WSL环境编译，可参考\n 使用 Windows 子系统 ( WSL ) 编译 OpenWrt   为提高编译的成功率，采用国内大神Lean的版本。\n官方版本因编译过程中，下载、兼容等等太多问题，建议不要使用。\n1sudo apt-get update 2sudo apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync 2、下载代码 国内用户请准备好梯子\n1git clone https://github.com/coolsnowwolf/lede 2cd lede 3./scripts/feeds update -a 4./scripts/feeds install -a 3、配置组件 1make menuconfig  Hyper-V平台配置，可参考\n 让OpenWRT完美适应Hyper-V   4、开始编译 1make -j8 download V=sc 2make -j1 V=sc 编译过程中下载库很难一次成功，如果编译报错，可多尝试几次，每次都可以补全几个文件\n 详细的命令说明，可参考\n OpenWrt 编译步骤与命令详解教程 如何编译一个属于自己的OpenWrt固件   编译完成无报错的情况下，最终文件在\n1cd ./bin/targets/x86/64/ 5、转成vhdx格式 vhdx格式，可以方便的在Hyper-V虚拟机中使用\n1qemu-img convert something.vmdk -O vhdx something.vhdx  如何使用，可参考\n 在 Windows 10 上使用 Hyper-V 安装 LEDE 软路由   参考文档  Lean Github openwrt.org Quickstart build images  ","link":"https://blog.cuile.com/posts/openwrt/openwrt_make/","section":"posts","tags":["make"],"title":"编译x86_64版本的OpenWrt"},{"body":"","link":"https://blog.cuile.com/tags/nat/","section":"tags","tags":null,"title":"NAT"},{"body":"1. 升级系统软件包 1$ apt-get update 2$ apt-get dist-upgrade 2. 安装 ifupdown2 使用 ifupdown2 网络管理软件包，还可以实时重新加载网络配置，而无需重新启动。\n1$ apt install ifupdown2 3. 配置物理网卡 使用 PVE 的 WEB 管理界面，设置物理网卡的配置。\n注意：一定要分配一个静态的IP地址，否则无法正常登录 PVE\n节点 \u0026gt; 系统 \u0026gt; 网络：\n address：192.168.10.66/24 gateway：192.168.10.1  保存后应用配置\n4. 配置虚拟网卡 4.1 修改虚拟网卡配置 使用 PVE 提供管理界面进行配置。 删除 vmbr0 设备的所有配置内容。\n编辑 /etc/network/interfaces\n1$ nano /etc/network/interfaces 加入\n1source /etc/network/interfaces.d/* 1# network interface settings; autogenerated 2# Please do NOT modify this file directly, unless you know what 3# you\u0026#39;re doing. 4# 5# If you want to manage parts of the network configuration manually, 6# please utilize the \u0026#39;source\u0026#39; or \u0026#39;source-directory\u0026#39; directives to do 7# so. 8# PVE will preserve these directives, but will NOT read its network 9# configuration from sourced files, so do not attempt to move any of 10# the PVE managed interfaces into external files! 11 12source /etc/network/interfaces.d/* 13 14auto lo 15iface lo inet loopback 16 17auto enp1s0 18iface enp1s0 inet static 19 address 192.168.10.66/24 20 gateway 192.168.10.1 21 22iface vmbr0 inet manual 23 bridge-ports none 24 bridge-stp off 25 brideg-fd 4.2 新建虚拟网卡配置 创建新的虚拟网卡配置\n注意：给虚拟网卡指定一个新的静态地址，是为下一级网络提供NAT服务\n1$ nano /etc/network/interfaces.d/vmbr0-nat 配置内容\n1auto vmbr0 2# private sub network 3iface vmbr0 inet static 4 address 192.168.100.1/24 5 bridge-ports none 6 bridge-stp off 7 bridge-fd 0 8 9 post-up echo 1 \u0026gt; /proc/sys/net/ipv4/ip_forward 10 post-down echo 0 \u0026gt; /proc/sys/net/ipv4/ip_forward 11 post-up iptables -t nat -A POSTROUTING -s \u0026#39;192.168.100.0/24\u0026#39; -o enp1s0 -j MASQUERADE 12 post-down iptables -t nat -D POSTROUTING -s \u0026#39;192.168.100.0/24\u0026#39; -o enp1s0 -j MASQUERADE 4.3 应用配置 1$ ifup -a ","link":"https://blog.cuile.com/posts/proxmox/proxmox_nat/","section":"posts","tags":["NAT"],"title":"Proxmox 配置 NAT 网络"},{"body":"本文记录OpenWrt设置透明代理的步骤及原理。\n1. 系统环境  硬件环境：Windows 10 Hyper-V虚拟机，单核处理器，256M内存 固件版本：OpenWrt 19.07.6 r11278-8055e38794 / LuCI openwrt-19.07 branch git-21.101.59933-c56d9f2 shadowsocks-libev：3.3.5 luci-app-shadowsocks：2.0.2 v2ray-plugin：4.37.3-20210413 ChinaDNS：1.3.3 luci-app-chinadns：1.6.2 https-dns-proxy：2021-01-17-5 luci-app-https-dns-proxy：git-21.062.76689-a607f9c-1 luci-i18n-https-dns-proxy-zh-cn：git-21.062.76689-a607f9c-1  2. 运行流程 透明代理的运行原理主要由DNS访问流程、IP访问流程两部分组成组成\n2.1 DNS访问流程 1graph LR 2 lh((localhost)); 3 dm(Dnsmasq); 4 cd(ChinaDNS); 5 hdp(https-dns-proxy); 6 ss(Shadowsocks); 7 fd(国外DNS); 8 dd(国内DNS); 9 10 lh -- 1 udp:53 --\u0026gt; dm; 11 dm -- 2 udp:5555 --\u0026gt; cd; 12 cd -- 3.1 udp:5353--\u0026gt; hdp; 13 cd -- 3.2 udp --\u0026gt; dd; 14 hdp -- 4 tcp --\u0026gt; ss; 15 ss -- 5 tcp --\u0026gt; fd; 16 17 fd -. 6 .-\u0026gt; ss; 18 ss -. 7 .-\u0026gt; hdp; 19 hdp -. 8.1 .-\u0026gt; cd; 20 dd -. 8.2 .-\u0026gt; cd; 21 cd -. 9 缓存 .-\u0026gt; dm; 22 dm -. 10 IP地址 .-\u0026gt; lh; 2.2 IP访问流程 1graph LR 2 fs(国外服务器); 3 ds(国内服务器); 4 lh((localhost)); 5 route{chinadns_chnroute.txt}; 6 ss(Shadowsocks); 7 8 lh -- 1 --\u0026gt; route; 9 route -- 2.1 国内IP --\u0026gt; ds; 10 route -- 2.2 国外IP --\u0026gt; ss; 11 ss -- 3 加密访问 --\u0026gt; fs; 12 13 fs -. 4 返回加密数据 .-\u0026gt; ss; 14 ds -. 5.1 返回数据 .-\u0026gt; lh; 15 ss -. 5.2 返回解密数据 .-\u0026gt; lh; 3. 配置 3.1 Shadowsocks-libev + v2ray-plugin  服务器管理-编辑服务器-插件参数：一定要加上\u0026quot;loglevel=none\u0026quot;，如果不加v2ray-plugin插件几分钟就会被系统杀死 访问控制-被忽略IP列表：/etc/chinadns_chnroute.txt  3.2 https-dns-proxy 由于使用了v2ray-plugin 插件，导致Shadowsocks不再支持UDP包，所以使用TCP的方式查询DNS\n 在开始/停止时更新DNSMASQ配置：不更新配置 如果自动更新配置，会影响到ChinaDNS的配置 Force Router DNS：Let local devices use their own DNS servers if set 实例  谷歌, 127.0.0.1, 5353 Cloudflare(安全防护), 127.0.0.1, 5454    3.3 ChinaDNS  启用双向过滤：勾选 监听端口：5555 上游服务器：114.114.114.114,127.0.0.1:5353,127.0.0.1:5454  3.4 DHCP/DNS 将OpenWrt的上游DNS指向ChinaDNS\n 常规设置-DNS转发：127.0.0.1#5555  关闭使用解析文件，指定上游DNS\n HOSTS和解析文件-忽略解析文件：勾选  3.5 计划任务 1## For ipip.net 2## 每周一12:30执行 330 12 * * 1 wget https://raw.githubusercontent.com/17mon/china_ip_list/master/china_ip_list.txt -O /tmp/china_ip_list.txt \u0026amp;\u0026amp; mv /tmp/china_ip_list.txt /etc/chinadns_chnroute.txt 45 * * * * /usr/bin/ss-subscribe auto \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 3.6 防火墙  常规设置-区域-wan-IP动态伪装：一定要勾选！！！  参考文档  OpenWRT下安装和配置shadowsocks Shadowsocks + ChnRoute 实现 OpenWRT / LEDE 路由器自动科学上网 Shadowsocks for OpenWRT / LEDE 拾遗 ChinaDNS原理与源码分析  ","link":"https://blog.cuile.com/posts/openwrt/openwrt_shadowsocks_proxy/","section":"posts","tags":["v2ray","proxy"],"title":"OpenWRT 配置透明代理"},{"body":"","link":"https://blog.cuile.com/tags/proxy/","section":"tags","tags":null,"title":"proxy"},{"body":"","link":"https://blog.cuile.com/series/shadowsocks/","section":"series","tags":null,"title":"ShadowSocks"},{"body":"","link":"https://blog.cuile.com/tags/v2ray/","section":"tags","tags":null,"title":"v2ray"},{"body":"","link":"https://blog.cuile.com/tags/dns/","section":"tags","tags":null,"title":"DNS"},{"body":"1. 使用自定义域名访问WEB管理界面  网络-DHCP/DNS-常规设置-DNS转发：/openwrt.lan/192.168.xxx.xxx 网络-DHCP/DNS-常规设置-重绑定保护：不勾选 /etc/config/uhttpd-option redirect_https：'1' 不强制跳转https  ","link":"https://blog.cuile.com/posts/openwrt/openwrt_dns/","section":"posts","tags":["DNS"],"title":"OpenWRT DNS设置"},{"body":"","link":"https://blog.cuile.com/tags/alg/","section":"tags","tags":null,"title":"ALG"},{"body":"","link":"https://blog.cuile.com/tags/ftp/","section":"tags","tags":null,"title":"FTP"},{"body":"1. 安装软件包 1# opkg install kmod-nf-nathelper-extra 2# opkg install kmod-nf-ipvs-ftp 2. 添加配置 1# nano /etc/sysctl.d/11-nf-conntrack.conf 增加\u0026quot;net.netfilter.nf_conntrack_helper=1\u0026quot;\n在使用FTP的主动模式时，要注意关闭网关上的ALG功能（如Windows ALG服务），同时使用可能引起失败\n参考文档\n 原版OpenWRT启用FTP ALG功能 防火墙设置了NAT ALG功能导致FTP数据连接故障  ","link":"https://blog.cuile.com/posts/openwrt/openwrt_ftp_alg/","section":"posts","tags":["FTP","ALG"],"title":"OpenWRT 启用 ALG 功能"},{"body":"","link":"https://blog.cuile.com/tags/mysql/","section":"tags","tags":null,"title":"mysql"},{"body":"1. 复制  复制表数据，表结构的3种方法  2. 导入 2.1 使用 LOAD DATA   如果是导入有中文的数据，我的mysql 设置的utf8 字符集，所以你要导入的 文件也要保存utf-8的字符集，数据表列的顺序必须和excel的对应，否则导入的数据会有错误,\n  文件路径名要上的 \u0026quot; \\ \u0026quot;要变成 “ \\ ”或者 \u0026quot; / \u0026quot;,否则会报错\n  如果mysql用户没有读取本地文件的权限，那必须添加local参数，通过mysql client来读取文件\n  通过load data infile，20秒导入100W数据\n  LOAD DATA INFILE语句导入数据进入MySQL的一些注意事项\n  3. 删除  清空表(truncate)与删除表中数据(delete) 详解  ","link":"https://blog.cuile.com/posts/mysql_manual/","section":"posts","tags":["mysql"],"title":"MySQL 数据操作"},{"body":" urllib.parse.urlencode(query, doseq=False, safe='', encoding=None, errors=None, quote_via=quote_plus) urllib.parse.urlencode 将对象或两元素序列转换为百分比编码的ASCII文本字符串，字符串是由'\u0026amp;'字符分隔的一系列 key=value 对，其中 key 和 value 都使用 quote_via 函数引用。\n GET 请求 1import urllib 2params = urllib.parse.urlencode({\u0026#39;spam\u0026#39;: 1, \u0026#39;eggs\u0026#39;: 2, \u0026#39;bacon\u0026#39;: 0}) 3url = \u0026#34;http://www.musi-cal.com/cgi-bin/query?%s\u0026#34; % params 4with urllib.request.urlopen(url) as f: 5 print(f.read().decode(\u0026#39;utf-8\u0026#39;)) POST 请求 1import urllib.request 2import urllib.parse 3data = urllib.parse.urlencode({\u0026#39;spam\u0026#39;: 1, \u0026#39;eggs\u0026#39;: 2, \u0026#39;bacon\u0026#39;: 0}) 4data = data.encode(\u0026#39;ascii\u0026#39;) 5with urllib.request.urlopen(\u0026#34;http://requestb.in/xrbl82xr\u0026#34;, data) as f: 6 print(f.read().decode(\u0026#39;utf-8\u0026#39;))  如果结果字符串要用作具有 urlopen() 函数的POST操作的 data，则它应该被编码为字节，否则将导致 TypeError。\n 默认情况下 urlencode 函数使用 quote_plus() 函数进行编码，也可以选用 quote() 函数进行编码，两者最大的不同在于对特定字符的处理。\n urllib.parse.quote_plus(string, safe='', encoding=None, errors=None) 默认情况下使用 quote_plus() 函数，它将空格被编码为 '+' 字符，而“/”字符被编码为 %2F，它遵循GET请求（application/x-www-form-urlencoded）的标准。 urllib.parse.quote(string, safe='/', encoding=None, errors=None) 可以作为备用的函数是 quote()，它将空格编码为 %20，字母，数字和 '_.-'字符不被编码，而“/”字符被默认为安全字符不被编码。\n 编码时会对所有字符进行编码处理，这会导致一些情况下编码后的参数不能被正确的识别，所以在使用时可根据编码的需求，指定一个编码函数。\n1urllib.parse.urlencode({\u0026#39;spam\u0026#39;: 1, \u0026#39;eggs\u0026#39;: 2, \u0026#39;bacon\u0026#39;: 0}, quote_via=urllib.parse.quote) 但即使指定函数，还会有一些特殊情况，需要保留一些特定的字符不被编码。 比如，我们想得到下面的参数\n1constraints[colors][0]=blue\u0026amp;amp;constraints[colors][1]=%E7%99%BD%20%E8%89%B2\u0026amp;amp;constraints[colors][2]=red\u0026amp;amp;order=newest 但无论使用 quote_plus() 或 quote()，“[” 和 “]” 字符一定会被编码。\n 要最大限度地控制编码的内容，请使用 quote() 并指定 safe 的值。\n 遇到这种情况，就需要根据手册的说明，指定 safe 的值来保证某字符不会被编码。\n1urllib.parse.urlencode(data, safe=\u0026#39;/[]\u0026#39;, quote_via=urllib.parse.quote)  safe，encoding 和 errors 参数被传递到 quote_via (encoding 和 errors 参数仅当查询元素是 str 时被传递)。\n 参考  urllib.parse.urlencode 手册 urllib.parse.quote 手册  ","link":"https://blog.cuile.com/posts/python/urllib.parse.urlencode_manual/","section":"posts","tags":["url编码","Python"],"title":"urllib.parse.urlencode 使用详解"},{"body":"","link":"https://blog.cuile.com/tags/url%E7%BC%96%E7%A0%81/","section":"tags","tags":null,"title":"url编码"},{"body":"","link":"https://blog.cuile.com/tags/nmcli/","section":"tags","tags":null,"title":"nmcli"},{"body":"脚本基于Centos 7\n查看接口设备信息 1# 简单接口状态 2$ nmcli dev status 3# 详细的接口信息 4$ nmcli dev show 5# 接口的详细信息 6$ nmcli dev show interface-name 查看连接(connection)的信息 1# 简单信息 2$ nmcli con show 3# 详细的连接信息 4$ nmcli con show 5# 某个连接的详细信息 6$ nmcli con show con-name 创建连接 1$ nmcli con add type ethernet con-name static-vm100 ifname eth0 ipv4 192.168.100.100/24 gw4 192.168.100.1 激活连接 1$ nmcli con up static-vm100 参考链接  https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/networking_guide/sec-using_the_networkmanager_command_line_tool_nmcli https://www.jianshu.com/p/5d5560e9e26a  ","link":"https://blog.cuile.com/posts/linux/linux_nmcli_manual/","section":"posts","tags":["nmcli","CLI"],"title":"使用 nmcli 配置网络"},{"body":"","link":"https://blog.cuile.com/tags/sed/","section":"tags","tags":null,"title":"sed"},{"body":"","link":"https://blog.cuile.com/tags/ubuntu/","section":"tags","tags":null,"title":"Ubuntu"},{"body":"脚本基于Ubuntu 20.04\n合并文件 1cat info.log error.log \u0026gt; merge.log.bak 2cp merge.log.bak merge.log 删除冗余信息 1sed -i \u0026#39;s/.*a2p_replyclient_log.*[infoerror].[0-9].log.gz://\u0026#39; merge.log \\ 2\u0026amp;\u0026amp; sed -i \u0026#39;s/org.springframework.amqp.rabbit.RabbitListenerEndpointContainer.* - //\u0026#39; merge.log \\ 3\u0026amp;\u0026amp; sed -i \u0026#39;/.*send 1 time for the url is .*/d\u0026#39; merge.log \\ 4\u0026amp;\u0026amp; sed -i \u0026#39;/.*redis key:[0-9]*,value:.*/d\u0026#39; merge.log 5 6sed -i \u0026#39;/\u0026gt;\u0026gt;\u0026gt;\u0026gt;.* retry:2/d\u0026#39; 2021.8.log 7sed -i \u0026#39;s/the content of the url:.*receiveStatusReportResultChinaMobile.shtml //\u0026#39; 2021.8.log 统计 1sed -n \u0026#39;/ status:DELIVRD,/p\u0026#39; result.log | wc -l 2sed -n \u0026#39;/\u0026#34;originalStatus\u0026#34;:\u0026#34;DELIVRD\u0026#34;/p\u0026#39; merge.log | wc -l 删除毫秒 1sed -i \u0026#39;s/\\.[0-9]\\{0,3\\}\\( \\[\\)/\\1/\u0026#39; merge.log 删除时间 1sed -i \u0026#39;s/.*\\(\\[INFO\\]\\)/\\1/\u0026#39; 2021.8.log 2sed -i \u0026#39;s/.*\\(\\[ERROR\\]\\)/\\1/\u0026#39; 2021.8.log 3sed -i \u0026#39;s/time:.*,\\(is_china_mobile\\)/\\1/\u0026#39; 2021.8.log 删除冗余字符 1sed -i \u0026#39;s/error for the url//\u0026#39; merge.log 2sed -i \u0026#39;s/can not read content from the url//\u0026#39; merge.log 去重复 1$ awk \u0026#39;!x[$0]++\u0026#39; merge.log 2$ sort -n merge.log | uniq 删除空行 1$ sed -i \u0026#39;/^\\s*$/d\u0026#39; merge1.log 修改Ubuntu源地址 1$ sudo sed -i \u0026#39;s/\\(archive\\|security\\).ubuntu/mirrors.aliyun/\u0026#39; /etc/apt/sources.list SSH连接不自动断开 1$ sed -i \u0026#39;s|^#\\(ClientAliveInterval\\) 0$|\\1 60|g\u0026#39; /etc/ssh/sshd_config 2$ sed -i \u0026#39;s|^#\\(ClientAliveCountMax\\) 3$|\\1 5|g\u0026#39; /etc/ssh/sshd_config 3$ systemctl restart sshd /etc/hosts 1# sed 参考 http://man.linuxde.net/sed 2 # https://www.cnblogs.com/ggjucheng/archive/2013/01/13/2856901.html 3$ sed ...... ","link":"https://blog.cuile.com/posts/linux/linux_sed_manual/","section":"posts","tags":["sed","Ubuntu","CLI"],"title":"使用 sed 命令操作"},{"body":"脚本基于Centos 7\n系统进程操作 1# 定位高CPU占用 2$ ps H -eo user,pid,ppid,tid,time,%cpu,cmd --sort=%cpu 3# 可视化显示CPU的使用状况的工具 4$ yum install -y htop 5$ htop 6# 查看进程的启动目录 7$ ls -l /proc/\u0026lt;PID\u0026gt;/cwd 参考文档\n 查看CPU和内存使用情况 查看运行进程的启动目录  磁盘操作 1# 修改硬盘挂载目录 2# 卸载硬盘 3$ umount -v /mnt/raid1-2disk-500G 4# 修改挂载目录 5$ mv /mnt/raid1-2disk-500G /mnt/raid1-250G-2disk 6# 修改/etc/fstab文件里的挂载目录 7$ nano /etc/fstab 8# 重装挂载 9$ mount -av /dev/md127 /mnt/raid1-250G-2disk 参考文档\n 查询并筛选 磁盘空间 统计 排序  网络端口操作 1# 查看端口占用 2# 查看所有端口占用情况 3$ netstat -tlunp 4# 查看指定端口占用情况 5$ netstat -tlunp | grep \u0026lt;port\u0026gt; 文件操作  文件截取  修改命令提示符 1$ nano .bash_profile 1# [HH:MM user@hostname path] 命令提示符 2export PS1=\u0026#34;[\\A \\u@\\H \\w]\\\\$\u0026#34; 3 4# [yyyy-mm-dd HH:MM] path 5# [user@hostname] 命令提示符 6export PS1=\u0026#39;\\[\\e[36;40m\\][\\D{%Y-%m-%d} \\A] \\[\\e[0m\\] \\[\\e[35;40m\\]\\w\\[\\e[0m\\]\\n\\[\\e[33;40m\\][\\u@\\H]\\[\\e[0m\\] \\\\$ \u0026#39;  命令提示符设置参考  查看系统版本 1$ lsb_release -a 2$ cat /etc/redhat-release 3$ cat /etc/issue 修改密码 1$ passwd \u0026lt;user_name\u0026gt; ","link":"https://blog.cuile.com/posts/linux/linux_cli_manual/","section":"posts","tags":["CLI"],"title":"Linux系统命令"},{"body":"","link":"https://blog.cuile.com/tags/blog/","section":"tags","tags":null,"title":"Blog"},{"body":"","link":"https://blog.cuile.com/tags/github/","section":"tags","tags":null,"title":"Github"},{"body":"设置流程 不过多说明了，网上教程非常多，可以找来看。\n参考文档\n 使用 Github Actions 自动发布 hugo 站点 Hugo的基本安装｜网站生成｜托管至Github Pages  各种坑位 1. 网页正常部署后，访问时页面却无法正常显示，部局完全是乱的。 这可能是https请求报\u0026quot;block:mixed-content\u0026quot;错误导致的，是浏览器不允许在https页面里嵌入http的请求，现在高版本的浏览器为了用户体验，都不会弹窗报错，只会在控制台上打印一条错误信息。\n解决这个问题，可以从以下2点入手：\n1.1. 在\u0026quot;theme/\u0026lt;YouThemeName\u0026gt;/layouts/partials/head.html\u0026quot;文件内，添加代码\n1\u0026lt;meta http-equiv=\u0026#34;Content-Security-Policy\u0026#34; content=\u0026#34;upgrade-insecure-requests\u0026#34;\u0026gt; ** 参考文档 **\n https请求报错block:mixed-content问题的解决办法  1.2. 确保config.toml文件内，\u0026quot;baseUrl\u0026quot;的值与实际地址一致。\n2. config.toml 里的 theme 值，要与主题文档夹名一致，不然可能会导致主题无法应用的问题。 3. Github Actions 设置里的 gh-pages.yml 写法要注意 \u0026quot;Setup Hugo\u0026quot;项目里，标准版本与扩展版本的参数写法不一样。\n1# 使用扩展版本2- name:Setup Hugo3uses:peaceiris/actions-hugo@v24with:5hugo-version:\u0026#39;0.91.2\u0026#39;6extended:true1# 使用标准版本2- name:Setup Hugo3uses:peaceiris/actions-hugo@v24with:5hugo-version:\u0026#39;latest\u0026#39;参考文档\n GitHub Actions for Hugo  ","link":"https://blog.cuile.com/posts/hugo_setup_for_github/","section":"posts","tags":["Hugo","Github","Blog"],"title":"Github使用Hugo生成Blog"},{"body":"","link":"https://blog.cuile.com/tags/hugo/","section":"tags","tags":null,"title":"Hugo"},{"body":"镜像列表 1$ docker image ls -a 2# or 3$ docker images 容器列表 1$ docker container ls -a 2# or 3$ docker ps 删除冗余镜像 1$ docker system prune 创建桥接网络 1$ docker network create [name] Docker快捷命令 1$ echo \u0026#34;alias d-ll=\u0026#39;docker image ls -a; echo; docker container ls -a\u0026#39;\u0026#34; \u0026gt;\u0026gt; ~/.bashrc \\ 2 \u0026amp;\u0026amp; echo \u0026#34;alias d-ps=\u0026#39;docker ps\u0026#39;\u0026#34; \u0026gt;\u0026gt; ~/.bashrc \\ 3 \u0026amp;\u0026amp; echo \u0026#34;alias d-clean=\u0026#39;docker system prune -f\u0026#39;\u0026#34; \u0026gt;\u0026gt; ~/.bashrc \\ 4 \u0026amp;\u0026amp; echo \u0026#34;alias d-rm=\u0026#39;_a(){ docker image rm $1; echo; docker container rm $1; }; _a\u0026#39;\u0026#34; \u0026gt;\u0026gt; ~/.bashrc \\ 5 \u0026amp;\u0026amp; echo \u0026#34;alias d-exec=\u0026#39;_a(){ docker exec -it $1/bin/bash; }; _a\u0026#39;\u0026#34; \u0026gt;\u0026gt; ~/.bashrc \\ 6 \u0026amp;\u0026amp; echo \u0026#34;alias d-stop=\u0026#39;_a(){ docker container stop $1; }; _a\u0026#39;\u0026#34; \u0026gt;\u0026gt; ~/.bashrc \\ 7 \u0026amp;\u0026amp; echo \u0026#34;alias d-kill=\u0026#39;_a(){ docker container kill $1; }; _a\u0026#39;\u0026#34; \u0026gt;\u0026gt; ~/.bashrc 8 9$ source ~/.bashrc ","link":"https://blog.cuile.com/posts/docker/docker_cli/","section":"posts","tags":null,"title":"Docker使用命令"},{"body":"","link":"https://blog.cuile.com/archives/","section":"","tags":null,"title":""},{"body":"Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\n https://github.com/yuin/goldmark https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nWebsites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.\nLearn more and contribute on GitHub.\n","link":"https://blog.cuile.com/about/","section":"","tags":null,"title":"About"},{"body":"","link":"https://blog.cuile.com/tags/pypi/","section":"tags","tags":null,"title":"PyPi"},{"body":"Python 的 pypi.python.org 站点终于要退休了，而新的接任者 pypi.org 无论从美观、风格上都让人大大的喜欢，终于在审美一这项上及格了。\n而且新的 pypi.org 能够正确的渲染 Markdown 格式的描述，实在是让人欣慰，终于可以和 Github 同步了，不用在麻烦的转换一次了。\n下面就来聊聊，如何正确的把库发布到 pypi.org 上：\n1. 注册 pypi.org 账号 嗯，这是正确的废话！\n2. 编写 setup.py setup.py 的内容比较重要，但其它的细节不谈，主要聊聊 long_description 部分，这部分是对库能力的详细描述。\n 如果说 keywords 和 description 能提高别人搜索到项目的概率的话，那 long_description 就在很大程度上决定别人对你对项目有没有进一步的想法了。\n 在针对 long_description 的网上介绍中，对具体使用方法明确写出的是少之又少，所以我今天就特别举例说明一下。\n2.1 setup.py 1#!/usr/bin/env python 2# coding: utf-8 3 4from setuptools import setup 5 6setup( 7name=\u0026#39;sequence2hash\u0026#39;, 8version=\u0026#39;1.1.2\u0026#39;, 9keywords=\u0026#39;tuple dict list sequence hash key/value\u0026#39;, 10packages=[\u0026#39;sequence2hash\u0026#39;], 11 12url=\u0026#39;https://github.com/Cuile/sequence2hash\u0026#39;, 13description=\u0026#39;This tool converts a valid value in a sequence to a hash and contains a path to a valid value in the key field\u0026#39;, 14long_description_content_type=\u0026#39;text/markdown\u0026#39;, 15long_description=open(\u0026#39;README.md\u0026#39;, encoding=\u0026#39;utf8\u0026#39;).read(), 16 17author=\u0026#39;cuile\u0026#39;, 18author_email=\u0026#39;i@cuile.com\u0026#39; 19) 2.2 读取 readme.md 文件 1long_description=open(\u0026#39;README.md\u0026#39;, encoding=\u0026#39;utf8\u0026#39;).read() 这句代码是较少明确说明的，可以不引用 io 库，而直接使用 open 函数读取文件内容，由于 pypi.org 支持 Markdown ，所以可以和 Github 使用同一份 README.md 文件。\n2.3 设置内容类型 1long_description_content_type=\u0026#39;text/markdown\u0026#39; 2 这句很重要，标明元数据字段中 long_description 的格式，支持 text/plain, text/x-rst, text/markdown 。\n A content type can be specified with the long_description_content_type argument, which can be one of text/plain, text/x-rst, or text/markdown, corresponding to no formatting, reStructuredText (reST), and the Github-flavored Markdown dialect of Markdown respectively.\n 3. 打包上传 先升级一下必要的打包工具，setuptools\u0026gt;= 38.6.0 才能使用新的元数据生成发布包， twine\u0026gt; = 1.11.0 才能将元数据正确发送到 PyPI 。\n1$ pip install -U setuptools twine 2 3# 打包 4$ python setup.py sdist 5 6# 上传 7$ twine upload dist/* twine 会依次上传 dist 文件夹下的所有内容，但 pypi.org 对已上传过的文件和版本是不允许再次上传的，所以每次更新内容时除了 version 字段递增外，还要在打包前删除 dist 文件夹，由打包命令重新生成，以防文件夹内有老版本的包，导致上传失败。\n参考  如何将自己的程序发布到 PyPI PyPI 终于支持 Markdown 了 打包 python package 到 pypi 在Pypi上发布自己的Python包 Packaging and distributing projects EMOJI CHEAT SHEET GitHub上README写法暨GFM语法解读  ","link":"https://blog.cuile.com/posts/python/release_pypi_package/","section":"posts","tags":["PyPi","Python"],"title":"在pypi上发布自己的Python库"}]