<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>瘦了就帅了</title><link>https://blog.cuile.com/</link><description>Recent content on 瘦了就帅了</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 08 Feb 2022 10:31:15 +0800</lastBuildDate><atom:link href="https://blog.cuile.com/index.xml" rel="self" type="application/rss+xml"/><item><title>FFmpeg脚本</title><link>https://blog.cuile.com/posts/ffmpeg_manual/</link><pubDate>Tue, 08 Feb 2022 10:31:15 +0800</pubDate><guid>https://blog.cuile.com/posts/ffmpeg_manual/</guid><description>
脚本基于Windows10系统设计
查看软件版本 D:\ffmpeg\bin&amp;gt;ver Microsoft Windows [版本 10.0.18362.356] D:\ffmpeg\bin&amp;gt;ffmpeg.exe -version ffmpeg version N-94600-g661a9b274b Copyright (c) 2000-2019 the FFmpeg developers built with gcc 9.1.1 (GCC) 20190807 configuration: --enable-gpl --enable-version3 --enable-sdl2 --enable-fontconfig --enable-gnutls --enable-iconv --enable-libass --enable-libdav1d --enable-libbluray --enable-li bfreetype --enable-libmp3lame --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libopus --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libtheora --enable-libtwolame --enable-libvpx --enable-libwavpack --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libzimg --enable-lzma --enable-zlib --enable-gmp --enable-libvidstab --enable-libvorbis --enable-libvo-amrwbenc --enable-libmysofa --enable-libspeex --enable-libxvid --enable-libaom --enable-libmfx --enable-amf --enable-ffnvcodec --enable-cuvid --enable-d3d11va --enable-nvenc --enable-nvdec --enable-dxva2 --enable-avisynth --enable-libopenmpt libavutil 56.</description></item><item><title>Linux 版本库管理</title><link>https://blog.cuile.com/posts/linux/linux_repo_manual/</link><pubDate>Tue, 08 Feb 2022 10:28:50 +0800</pubDate><guid>https://blog.cuile.com/posts/linux/linux_repo_manual/</guid><description>
脚本基于Centos 7
查看已安装软件 $ yum list installed 升级所有包同时也升级软件和系统内核 $ yum -y update 只升级所有包，不升级软件和系统内核 $ yum -y upgrade 更换阿里云软件安装源 # 备份原镜像文件，以免出错后可以恢复。 $ mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.back # 下载新的CentOS-Base.repo 到/etc/yum.repos.d/ $ wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo # 运行yum makecache生成缓存 $ yum clean all $ yum makecache 查看源是否生效 $ yum repolist 查询仓库 # 显示所有启动的仓库 $ yum repolist enabled # 显示所有禁用的仓库 $ yum repolist disabled # 显示所有仓库 $ yum repolist all 修改仓库 最常用的修改操作就是启动和停用, 可以使用以下命令实现:
$ yum-config-manager --enable repository… $ yum-config-manager --disable repository…</description></item><item><title>Linux系统内核升级</title><link>https://blog.cuile.com/posts/linux/linux_kernel_update/</link><pubDate>Tue, 08 Feb 2022 10:17:48 +0800</pubDate><guid>https://blog.cuile.com/posts/linux/linux_kernel_update/</guid><description>
脚本基于Centos 7
1、查看系统内核版本 $ uname -r 3.10.0-514.26.2.el7.x86_64 $ cat /etc/redhat-release CentOS Linux release 7.6.1810 (Core) 2、升级内核 导入elrepo的key，然后安装elrepo的yum源
$ rpm -import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org $ rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm 查看可用的内核相关包
$ yum --disablerepo=&amp;#34;*&amp;#34; --enablerepo=&amp;#34;elrepo-kernel&amp;#34; list available 主分支ml(mainline)，稳定版(stable)，长期维护版lt(longterm) 安装内核
$ yum -y --enablerepo=elrepo-kernel install kernel-ml.x86_64 kernel-ml-devel.x86_64 3、修改grub $ awk -F\&amp;#39; &amp;#39;$1==&amp;#34;menuentry &amp;#34; {print $2}&amp;#39; /etc/grub2.cfg CentOS Linux (5.2.11-1.el7.elrepo.x86_64) 7 (Core) CentOS Linux (3.10.0-957.27.2.el7.x86_64) 7 (Core) CentOS Linux (3.10.0-514.26.2.el7.x86_64) 7 (Core) CentOS Linux (3.10.0-514.el7.x86_64) 7 (Core) CentOS Linux (0-rescue-963c2c41b08343f7b063dddac6b2e486) 7 (Core) # 新内核（5.</description></item><item><title>iptables 命令</title><link>https://blog.cuile.com/posts/linux/linux_iptables_manual/</link><pubDate>Tue, 08 Feb 2022 10:09:48 +0800</pubDate><guid>https://blog.cuile.com/posts/linux/linux_iptables_manual/</guid><description>
脚本基于Centos 7
注意：CentOS 7默认的防火墙不是iptables,而是firewalld
停止firewalld服务 #停止firewalld服务 $ systemctl stop firewalld #禁用firewalld服务 $ systemctl mask firewalld 安装 iptables #先检查是否安装了iptables $ service iptables status #安装iptables $ yum install -y iptables #升级iptables $ yum update iptables #安装iptables-services $ yum install iptables-services 启动 iptables #注册iptables服务，相当于以前的chkconfig iptables on $ systemctl enable iptables.service #开启服务 $ systemctl start iptables.service #查看状态 $ systemctl status iptables.service 创建规则 # 允许ping $ iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT # or $ iptables -A INPUT -p icmp -j ACCEPT # 允许本地回环接口(即运行本机访问本机) $ iptables -A INPUT -s 127.</description></item><item><title>编译x86_64版本的OpenWrt</title><link>https://blog.cuile.com/posts/openwrt/openwrt_make/</link><pubDate>Tue, 08 Feb 2022 10:05:20 +0800</pubDate><guid>https://blog.cuile.com/posts/openwrt/openwrt_make/</guid><description>
1、准备环境 建议使用纯linux系统进行编译，如 Ubuntu 20.04 LTS，这样环境比较简单，兼容问题也少。
用WSL环境编译，可参考
使用 Windows 子系统 ( WSL ) 编译 OpenWrt 为提高编译的成功率，采用国内大神Lean的版本。
官方版本因编译过程中，下载、兼容等等太多问题，建议不要使用。
sudo apt-get update sudo apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync 2、下载代码 国内用户请准备好梯子</description></item><item><title>Proxmox 配置 NAT 网络</title><link>https://blog.cuile.com/posts/proxmox_nat/</link><pubDate>Mon, 07 Feb 2022 14:07:32 +0800</pubDate><guid>https://blog.cuile.com/posts/proxmox_nat/</guid><description>
1. 升级系统软件包 $ apt-get update $ apt-get dist-upgrade 2. 安装 ifupdown2 使用 ifupdown2 网络管理软件包，还可以实时重新加载网络配置，而无需重新启动。
$ apt install ifupdown2 3. 配置物理网卡 使用 PVE 的 WEB 管理界面，设置物理网卡的配置。
注意：一定要分配一个静态的IP地址，否则无法正常登录 PVE
节点 &amp;gt; 系统 &amp;gt; 网络：
address：192.168.10.66/24 gateway：192.168.10.1 保存后应用配置
4. 配置虚拟网卡 4.1 修改虚拟网卡配置 使用 PVE 提供管理界面进行配置。 删除 vmbr0 设备的所有配置内容。
编辑 /etc/network/interfaces
$ nano /etc/network/interfaces 加入
source /etc/network/interfaces.d/* # network interface settings; autogenerated # Please do NOT modify this file directly, unless you know what # you&amp;#39;re doing.</description></item><item><title>OpenWRT 配置透明代理</title><link>https://blog.cuile.com/posts/openwrt/openwrt_shadowsocks_proxy/</link><pubDate>Mon, 07 Feb 2022 13:37:19 +0800</pubDate><guid>https://blog.cuile.com/posts/openwrt/openwrt_shadowsocks_proxy/</guid><description>
本文记录OpenWrt设置透明代理的步骤及原理。
1. 系统环境 硬件环境：Windows 10 Hyper-V虚拟机，单核处理器，256M内存 固件版本：OpenWrt 19.07.6 r11278-8055e38794 / LuCI openwrt-19.07 branch git-21.101.59933-c56d9f2 shadowsocks-libev：3.3.5 luci-app-shadowsocks：2.0.2 v2ray-plugin：4.37.3-20210413 ChinaDNS：1.3.3 luci-app-chinadns：1.6.2 https-dns-proxy：2021-01-17-5 luci-app-https-dns-proxy：git-21.062.76689-a607f9c-1 luci-i18n-https-dns-proxy-zh-cn：git-21.062.76689-a607f9c-1 2. 运行流程 透明代理的运行原理主要由DNS访问流程、IP访问流程两部分组成组成
2.1 DNS访问流程 graph LR lh((localhost)); dm(Dnsmasq); cd(ChinaDNS); hdp(https-dns-proxy); ss(Shadowsocks); fd(国外DNS); dd(国内DNS); lh -- 1 udp:53 --&amp;gt; dm; dm -- 2 udp:5555 --&amp;gt; cd; cd -- 3.1 udp:5353--&amp;gt; hdp; cd -- 3.2 udp --&amp;gt; dd; hdp -- 4 tcp --&amp;gt; ss; ss -- 5 tcp --&amp;gt; fd; fd -.</description></item><item><title>OpenWRT DNS设置</title><link>https://blog.cuile.com/posts/openwrt/openwrt_dns/</link><pubDate>Mon, 07 Feb 2022 13:17:39 +0800</pubDate><guid>https://blog.cuile.com/posts/openwrt/openwrt_dns/</guid><description>
1. 使用自定义域名访问WEB管理界面 网络-DHCP/DNS-常规设置-DNS转发：/openwrt.lan/192.168.xxx.xxx 网络-DHCP/DNS-常规设置-重绑定保护：不勾选 /etc/config/uhttpd-option redirect_https：&amp;lsquo;1&amp;rsquo; 不强制跳转https</description></item><item><title>OpenWRT 启用 ALG 功能</title><link>https://blog.cuile.com/posts/openwrt/openwrt_ftp_alg/</link><pubDate>Mon, 07 Feb 2022 10:08:02 +0800</pubDate><guid>https://blog.cuile.com/posts/openwrt/openwrt_ftp_alg/</guid><description>
1. 安装软件包 # opkg install kmod-nf-nathelper-extra # opkg install kmod-nf-ipvs-ftp 2. 添加配置 # nano /etc/sysctl.d/11-nf-conntrack.conf 增加&amp;quot;net.netfilter.nf_conntrack_helper=1&amp;quot;
在使用FTP的主动模式时，要注意关闭网关上的ALG功能（如Windows ALG服务），同时使用可能引起失败
参考文档
原版OpenWRT启用FTP ALG功能 防火墙设置了NAT ALG功能导致FTP数据连接故障</description></item><item><title>MySQL 数据操作</title><link>https://blog.cuile.com/posts/mysql_manual/</link><pubDate>Tue, 18 Jan 2022 14:50:28 +0800</pubDate><guid>https://blog.cuile.com/posts/mysql_manual/</guid><description>
1. 复制 复制表数据，表结构的3种方法 2. 导入 2.1 使用 LOAD DATA 如果是导入有中文的数据，我的mysql 设置的utf8 字符集，所以你要导入的 文件也要保存utf-8的字符集，数据表列的顺序必须和excel的对应，否则导入的数据会有错误,
文件路径名要上的 &amp;quot; \ &amp;ldquo;要变成 “ \ ”或者 &amp;quot; / &amp;ldquo;,否则会报错
如果mysql用户没有读取本地文件的权限，那必须添加local参数，通过mysql client来读取文件
通过load data infile，20秒导入100W数据
LOAD DATA INFILE语句导入数据进入MySQL的一些注意事项
3. 删除 清空表(truncate)与删除表中数据(delete) 详解</description></item><item><title>urllib.parse.urlencode 使用详解</title><link>https://blog.cuile.com/posts/urllib.parse.urlencode_manual/</link><pubDate>Mon, 17 Jan 2022 15:24:58 +0800</pubDate><guid>https://blog.cuile.com/posts/urllib.parse.urlencode_manual/</guid><description>
urllib.parse.urlencode(query, doseq=False, safe='', encoding=None, errors=None, quote_via=quote_plus) urllib.parse.urlencode 将对象或两元素序列转换为百分比编码的ASCII文本字符串，字符串是由'&amp;amp;&amp;lsquo;字符分隔的一系列 key=value 对，其中 key 和 value 都使用 quote_via 函数引用。
GET 请求 import urllib params = urllib.parse.urlencode({&amp;#39;spam&amp;#39;: 1, &amp;#39;eggs&amp;#39;: 2, &amp;#39;bacon&amp;#39;: 0}) url = &amp;#34;http://www.musi-cal.com/cgi-bin/query?%s&amp;#34; % params with urllib.request.urlopen(url) as f: print(f.read().decode(&amp;#39;utf-8&amp;#39;)) POST 请求 import urllib.request import urllib.parse data = urllib.parse.urlencode({&amp;#39;spam&amp;#39;: 1, &amp;#39;eggs&amp;#39;: 2, &amp;#39;bacon&amp;#39;: 0}) data = data.encode(&amp;#39;ascii&amp;#39;) with urllib.request.urlopen(&amp;#34;http://requestb.in/xrbl82xr&amp;#34;, data) as f: print(f.read().decode(&amp;#39;utf-8&amp;#39;)) 如果结果字符串要用作具有 urlopen() 函数的POST操作的 data，则它应该被编码为字节，否则将导致 TypeError。
默认情况下 urlencode 函数使用 quote_plus() 函数进行编码，也可以选用 quote() 函数进行编码，两者最大的不同在于对特定字符的处理。</description></item><item><title>使用 nmcli 配置网络</title><link>https://blog.cuile.com/posts/linux/linux_nmcli_manual/</link><pubDate>Mon, 17 Jan 2022 15:17:58 +0800</pubDate><guid>https://blog.cuile.com/posts/linux/linux_nmcli_manual/</guid><description>
脚本基于Centos 7
查看接口设备信息 # 简单接口状态 $ nmcli dev status # 详细的接口信息 $ nmcli dev show # 接口的详细信息 $ nmcli dev show interface-name 查看连接(connection)的信息 # 简单信息 $ nmcli con show # 详细的连接信息 $ nmcli con show # 某个连接的详细信息 $ nmcli con show con-name 创建连接 $ nmcli con add type ethernet con-name static-vm100 ifname eth0 ipv4 192.168.100.100/24 gw4 192.168.100.1 激活连接 $ nmcli con up static-vm100 参考链接 https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/networking_guide/sec-using_the_networkmanager_command_line_tool_nmcli https://www.jianshu.com/p/5d5560e9e26a</description></item><item><title>使用 sed 命令操作文本文件</title><link>https://blog.cuile.com/posts/linux/linux_sed_manual/</link><pubDate>Mon, 17 Jan 2022 11:18:47 +0800</pubDate><guid>https://blog.cuile.com/posts/linux/linux_sed_manual/</guid><description>
脚本基于Ubuntu 20.04
合并文件 cat info.log error.log &amp;gt; merge.log.bak cp merge.log.bak merge.log 删除冗余信息 sed -i &amp;#39;s/.*a2p_replyclient_log.*[infoerror].[0-9].log.gz://&amp;#39; merge.log \ &amp;amp;&amp;amp; sed -i &amp;#39;s/org.springframework.amqp.rabbit.RabbitListenerEndpointContainer.* - //&amp;#39; merge.log \ &amp;amp;&amp;amp; sed -i &amp;#39;/.*send 1 time for the url is .*/d&amp;#39; merge.log \ &amp;amp;&amp;amp; sed -i &amp;#39;/.*redis key:[0-9]*,value:.*/d&amp;#39; merge.log sed -i &amp;#39;/&amp;gt;&amp;gt;&amp;gt;&amp;gt;.* retry:2/d&amp;#39; 2021.8.log sed -i &amp;#39;s/the content of the url:.*receiveStatusReportResultChinaMobile.shtml //&amp;#39; 2021.8.log 统计 sed -n &amp;#39;/ status:DELIVRD,/p&amp;#39; result.log | wc -l sed -n &amp;#39;/&amp;#34;originalStatus&amp;#34;:&amp;#34;DELIVRD&amp;#34;/p&amp;#39; merge.</description></item><item><title>Linux系统命令</title><link>https://blog.cuile.com/posts/linux/linux_cli_manual/</link><pubDate>Mon, 17 Jan 2022 11:07:07 +0800</pubDate><guid>https://blog.cuile.com/posts/linux/linux_cli_manual/</guid><description>
脚本基于Centos 7
系统进程操作 查看CPU和内存使用情况 # 定位高CPU占用 $ ps H -eo user,pid,ppid,tid,time,%cpu,cmd --sort=%cpu # 可视化显示CPU的使用状况的工具 $ yum install -y htop $ htop 磁盘操作 查询并筛选 磁盘空间 统计 排序 # 修改硬盘挂载目录 # 卸载硬盘 $ umount -v /mnt/raid1-2disk-500G # 修改挂载目录 $ mv /mnt/raid1-2disk-500G /mnt/raid1-250G-2disk # 修改/etc/fstab文件里的挂载目录 $ nano /etc/fstab # 重装挂载 $ mount -av /dev/md127 /mnt/raid1-250G-2disk 网络端口操作 # 查看端口占用 # 查看所有端口占用情况 $ netstat -tlunp # 查看指定端口占用情况 $ netstat -tlunp | grep &amp;lt;port&amp;gt; 文件操作 文件截取 系统设置操作 # systemctl命令 systemctl list-units ##列出当前系统服务的状态 systemctl list-unit-files ##列出服务的开机状态 systemctl status sshd ##查看指定服务的状态 systemctl stop sshd ##关闭指定服务 systemctl start sshd ##开启指定服务 systemctl restart sshd ##从新启动服务 systemctl enable sshd ##设定指定服务开机开启 systemctl disable sshd ##设定指定服务开机关闭 systemctl reload sshd ##使指定服务从新加载配置 systemctl list-dependencies sshd ##查看指定服务的倚赖关系 systemctl mask sshd ##冻结指定服务 systemctl unmask sshd ##启用服务 systemctl set-default multi-user.</description></item><item><title>Github使用Hugo生成Blog</title><link>https://blog.cuile.com/posts/hugo_setup_for_github/</link><pubDate>Fri, 14 Jan 2022 17:15:06 +0800</pubDate><guid>https://blog.cuile.com/posts/hugo_setup_for_github/</guid><description>
设置流程 不过多说明了，网上教程非常多，可以找来看。
参考文档
使用 Github Actions 自动发布 hugo 站点 Hugo的基本安装｜网站生成｜托管至Github Pages 各种坑位 1. 网页正常部署后，访问时页面却无法正常显示，部局完全是乱的。 这可能是https请求报&amp;quot;block:mixed-content&amp;quot;错误导致的，是浏览器不允许在https页面里嵌入http的请求，现在高版本的浏览器为了用户体验，都不会弹窗报错，只会在控制台上打印一条错误信息。
解决这个问题，可以从以下2点入手：
1.1. 在&amp;quot;theme/&amp;lt;YouThemeName&amp;gt;/layouts/partials/head.html&amp;quot;文件内，添加代码
&amp;lt;meta http-equiv=&amp;#34;Content-Security-Policy&amp;#34; content=&amp;#34;upgrade-insecure-requests&amp;#34;&amp;gt; 参考文档
https请求报错block:mixed-content问题的解决办法 1.2. 确保config.toml文件内，&amp;ldquo;baseUrl&amp;quot;的值与实际地址一致。
2. config.toml 里的 theme 值，要与主题文档夹名一致，不然可能会导致主题无法应用的问题。 3. Github Actions 设置里的 gh-pages.yml 写法要注意 &amp;ldquo;Setup Hugo&amp;quot;项目里，标准版本与扩展版本的参数写法不一样。
# 使用扩展版本 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: &amp;#39;0.91.2&amp;#39; extended: true # 使用标准版本 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: &amp;#39;latest&amp;#39; 参考文档
GitHub Actions for Hugo</description></item><item><title>Docker使用命令</title><link>https://blog.cuile.com/posts/docker_cli/</link><pubDate>Thu, 13 Jan 2022 22:20:52 +0800</pubDate><guid>https://blog.cuile.com/posts/docker_cli/</guid><description>
镜像列表 $ docker image ls -a # or $ docker images 容器列表 $ docker container ls -a # or $ docker ps 删除冗余镜像 $ docker system prune 创建桥接网络 $ docker network create [name] Docker快捷命令 $ echo &amp;#34;alias d-ll=&amp;#39;docker image ls -a; echo; docker container ls -a&amp;#39;&amp;#34; &amp;gt;&amp;gt; ~/.bashrc \ &amp;amp;&amp;amp; echo &amp;#34;alias d-ps=&amp;#39;docker ps&amp;#39;&amp;#34; &amp;gt;&amp;gt; ~/.bashrc \ &amp;amp;&amp;amp; echo &amp;#34;alias d-clean=&amp;#39;docker system prune -f&amp;#39;&amp;#34; &amp;gt;&amp;gt; ~/.bashrc \ &amp;amp;&amp;amp; echo &amp;#34;alias d-rm=&amp;#39;_a(){ docker image rm $1; echo; docker container rm $1; }; _a&amp;#39;&amp;#34; &amp;gt;&amp;gt; ~/.</description></item><item><title>在pypi上发布自己的Python库</title><link>https://blog.cuile.com/posts/release_pypi_package/</link><pubDate>Fri, 11 May 2018 14:49:57 +0800</pubDate><guid>https://blog.cuile.com/posts/release_pypi_package/</guid><description>
Python 的 pypi.python.org 站点终于要退休了，而新的接任者 pypi.org 无论从美观、风格上都让人大大的喜欢，终于在审美一这项上及格了。
而且新的 pypi.org 能够正确的渲染 Markdown 格式的描述，实在是让人欣慰，终于可以和 Github 同步了，不用在麻烦的转换一次了。
下面就来聊聊，如何正确的把库发布到 pypi.org 上：
1. 注册 pypi.org 账号 嗯，这是正确的废话！
2. 编写 setup.py setup.py 的内容比较重要，但其它的细节不谈，主要聊聊 long_description 部分，这部分是对库能力的详细描述。
如果说 keywords 和 description 能提高别人搜索到项目的概率的话，那 long_description 就在很大程度上决定别人对你对项目有没有进一步的想法了。
在针对 long_description 的网上介绍中，对具体使用方法明确写出的是少之又少，所以我今天就特别举例说明一下。
2.1 setup.py #!/usr/bin/env python # coding: utf-8 from setuptools import setup setup( name=&amp;#39;sequence2hash&amp;#39;, version=&amp;#39;1.1.2&amp;#39;, keywords=&amp;#39;tuple dict list sequence hash key/value&amp;#39;, packages=[&amp;#39;sequence2hash&amp;#39;], url=&amp;#39;https://github.com/Cuile/sequence2hash&amp;#39;, description=&amp;#39;This tool converts a valid value in a sequence to a hash and contains a path to a valid value in the key field&amp;#39;, long_description_content_type=&amp;#39;text/markdown&amp;#39;, long_description=open(&amp;#39;README.</description></item></channel></rss>