<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>瘦了就帅了</title><link>https://blog.cuile.com/</link><description>Recent content on 瘦了就帅了</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 19 Jun 2022 16:08:06 +0800</lastBuildDate><atom:link href="https://blog.cuile.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Alpine Linux 安装 Docker</title><link>https://blog.cuile.com/posts/alpine_linux/docker/</link><pubDate>Sun, 19 Jun 2022 16:08:06 +0800</pubDate><guid>https://blog.cuile.com/posts/alpine_linux/docker/</guid><description>
在 Alpine 上安装 Docker 真是一件让人感觉非常愉快的事情，因为过程非常简单。
修改 apk 源 ~# nano /etc/apk/repositories 因为 docker 在社区的库里，所以要打开 community 的源。
#/media/cdrom/apks http://mirrors.tuna.tsinghua.edu.cn/alpine/v3.16/main http://mirrors.tuna.tsinghua.edu.cn/alpine/v3.16/community #http://mirrors.tuna.tsinghua.edu.cn/alpine/edge/main #http://mirrors.tuna.tsinghua.edu.cn/alpine/edge/community #http://mirrors.tuna.tsinghua.edu.cn/alpine/edge/testing ~# apk update 安装 docker ~# apk add docker ... ~# apk add docker-compose ... ~# docker -v Docker version 20.10.16, build aa7e414fdcb23a66e8fabbef0a560ef1769eace5 ~# docker-compose -v docker-compose version 1.29.2, build unknown 启动 docker # 引导时启动 ~# rc-update add docker boot # 启动服务 ~# service docker start 测试 ~# docker run hello-world</description></item><item><title>Alpine Linux 网络设置</title><link>https://blog.cuile.com/posts/alpine_linux/network/</link><pubDate>Sun, 19 Jun 2022 15:25:18 +0800</pubDate><guid>https://blog.cuile.com/posts/alpine_linux/network/</guid><description>
网卡静态地址 ~# nano /etc/network/interfaces auto lo iface lo inet loopback auto eth0 iface eth0 inet static address 192.168.10.16/24 gateway 192.168.10.10 hostname alpine DNS 地址 ~# nano /etc/resolv.conf nameserver 114.114.114.114 重启网络 ~# service networking restart</description></item><item><title>Alpine Linux 3.16 安装</title><link>https://blog.cuile.com/posts/alpine_linux/alpine_linux_install/</link><pubDate>Sun, 19 Jun 2022 11:46:55 +0800</pubDate><guid>https://blog.cuile.com/posts/alpine_linux/alpine_linux_install/</guid><description>
1. 准备系统 Alpine 有许多版本，其中 VIRTUAL 是专门针对虚拟环境优化过的，所以主要使用这个版本来安装。
https://www.alpinelinux.org/downloads/
2. 登录 ... # 使用启动盘启动后，直接使用 root 登录系统 localhost login: root 3. 安装 ... localhost:~# setup-alpine # 选择键盘布局 # 这里两个都选 cn 或都不选 ... Select keyboard layout: [none] cn ... Select variant (or &amp;#39;abort&amp;#39;): cn # 设置主机名 ... Enter system hostname (fully qualified form, e.g. &amp;#39;foo.example.org&amp;#39;) [localhost] home # 设置网络 ... Which one do you want to initialize? (or &amp;#39;?&amp;#39; or &amp;#39;done&amp;#39;) [eth0] eth0 Ip address for eth0?</description></item><item><title>山克 UPS 安装手册</title><link>https://blog.cuile.com/posts/ups/ups_install/</link><pubDate>Sat, 18 Jun 2022 17:35:15 +0800</pubDate><guid>https://blog.cuile.com/posts/ups/ups_install/</guid><description>
为家里的微形PVE服务器买了山克的UPS，发现与 linux 连接使用还是需要安装一下的，而且市场上基本都是 OEM 的产品，所以操作过程通用
记录Gen8安装PVE+DSM+win10+UPS的一些过程 ViewPower中文使用手册</description></item><item><title>Git 命令行</title><link>https://blog.cuile.com/posts/git_cli/</link><pubDate>Mon, 16 May 2022 14:32:27 +0800</pubDate><guid>https://blog.cuile.com/posts/git_cli/</guid><description>
拉取 $ git pull 删除本地文件后，从远端重新拉取最新版本 git提示： up-to-date. 但未从远端得到文件
查看本地分支是否发生变化 $ git branch -a 如本地库处于另一个分支中，需将本地分支熏置回原分支 $ git checkout ***** $ git reset --hard 如本地分支没有变化，则强行 pull 覆盖本地文件 $ git fetch --all $ git reset --hard origin/***** $ git pull 分支 $ git branch -a 切换分支 $ git checkout &amp;lt;branch&amp;gt; 拉取远程分支 $ git fetch origin &amp;lt;branch&amp;gt; $ git checkout -b &amp;lt;branch&amp;gt; origin/&amp;lt;branch&amp;gt; $ git pull origin &amp;lt;branch&amp;gt; 更新远程分支列表 # 如果你的 remote branch 不是在 origin 下，把 origin 换成你的名字 # --prune 删除远程已经删除的分支 $ git remote update origin --prune 标签 # 查看现有的标签 $ git tag # 给最新的提交打标签 $ git tag 1.</description></item><item><title>鸿蒙系统优化</title><link>https://blog.cuile.com/posts/harmonyos_optimization/</link><pubDate>Mon, 16 May 2022 11:09:59 +0800</pubDate><guid>https://blog.cuile.com/posts/harmonyos_optimization/</guid><description>
保持后台进程运行 设置 &amp;gt; 应用启动管理 &amp;gt; 关闭该应用的自动管理开关，并在弹框中勾选允许后台活动。 设置 &amp;gt; 电池优化 &amp;gt; 点击不允许 &amp;gt; 选择所有应用 &amp;gt; 找到无法后台运行的应用 &amp;gt; 设置为不允许。 设置 &amp;gt; 电池，关闭省电模式开关。 设置 &amp;gt; 电池 &amp;gt; 更多电池设置，开启休眠时始终保持网络连接开关。 打开应用 &amp;gt; 进入多任务界面 &amp;gt; 下拉选中的应用卡片，左上角出现加锁图标 &amp;gt; 点击清理图标，清理其他不经常使用的应用。 手机管家 &amp;gt; 设置，打开智能维护开关以确保良好的应用使用体验。</description></item><item><title>火炮使用手册</title><link>https://blog.cuile.com/posts/wot_tips/</link><pubDate>Fri, 13 May 2022 14:30:22 +0800</pubDate><guid>https://blog.cuile.com/posts/wot_tips/</guid><description>
开局先找炮位，最好能把车头垫起来。 到达炮位后，预瞄全国点位。了解哪些点能打到，哪些打不到。 开局先瞄传统点位，收过路费。 不瞄与瞄准线垂直运动的车。 不瞄轻坦，视野跟着重坦走。 瞄准速度比装填速度重要。 用 Shift 瞄准后，按 G 切换到弹道视角，可提高命中率。 结合炮弹飞行时间，预留瞄准余量。 利用装填间隙转换炮位。 打击优先级： 火炮 &amp;gt; 反坦克炮 &amp;gt; 重坦 &amp;gt; 中坦 &amp;gt; 轻坦 远端 &amp;gt; 近端 血量少 &amp;gt; 血量多 敌方进入最大侦测范围，与你之间少于二辆已方车辆时，就应考虑转移。</description></item><item><title>使用 Snap 安装 Docker</title><link>https://blog.cuile.com/posts/docker/docker_install_snap/</link><pubDate>Wed, 11 May 2022 18:41:48 +0800</pubDate><guid>https://blog.cuile.com/posts/docker/docker_install_snap/</guid><description>
尝试使用 Ubuntu 的 Snap 后，发现真的非常方便。
看过Snap的介绍以后，发现Snap的沙盒理念非常先进，在存储基本不成问题背景下，会系统环境的影响更小。
而且docker-compose命令也会一起安装，更是方便。
1.安装 $ sudo snap install docker 2.设置 # 设置开机启动 $ sudo snap start docker --enable # 确认服务状态 $ sudo snap services docker # 查看服务详情 $ service snap.docker.dockerd status 使用sudo安装后要注意以后调用时，都要使用sudo命令前缀。
3.其它 # 安装目录 /snap/docker/current # 服务启动配置文件 /etc/systemd/system/snap.docker.dockerd.service # 配套 AppArmor 配置文件 /var/lib/snapd/apparmor/profiles/snap.docker.docker /var/lib/snapd/apparmor/profiles/snap.docker.dockerd # 默认 Unix Socket 文件路径 unix:///var/snap/docker/current/run/docker/libcontainerd/docker-containerd.sock 4.参考文献 Docker 安装指南</description></item><item><title>能力的评价</title><link>https://blog.cuile.com/posts/life_tips/tips3/</link><pubDate>Tue, 10 May 2022 17:28:52 +0800</pubDate><guid>https://blog.cuile.com/posts/life_tips/tips3/</guid><description>
1 能力是否特殊？ 经济制约性 因果含糊性 路径稀缺性 2 能力是否核心？ 是否受到加持 是否适用环境</description></item><item><title>小差别</title><link>https://blog.cuile.com/posts/life_tips/tips2/</link><pubDate>Tue, 10 May 2022 17:18:14 +0800</pubDate><guid>https://blog.cuile.com/posts/life_tips/tips2/</guid><description>
见微知著，是对事物发展规律的洞察。 触类旁通，是对事物内在逻辑的洞悉。</description></item><item><title>七态为品</title><link>https://blog.cuile.com/posts/life_tips/tips1/</link><pubDate>Tue, 10 May 2022 17:09:59 +0800</pubDate><guid>https://blog.cuile.com/posts/life_tips/tips1/</guid><description>
交浅语深，动机不良。 口说是非，心态不正。 刻薄挑剔，人际不和。 言高行低，品行不端。 至亲成仇，情感不真。 违规为乐，习惯不好。 酒后失控，心态不稳。</description></item><item><title>Django 开发简介</title><link>https://blog.cuile.com/posts/django/django_development_introduction/</link><pubDate>Tue, 10 May 2022 16:30:13 +0800</pubDate><guid>https://blog.cuile.com/posts/django/django_development_introduction/</guid><description>
1 开发环境 开发环境还是建议使用 Docker 来搭建，方便快捷。 不过 Django 的官方镜像已经弃用了，官方建议新版本使用 Python 官方提供的镜像来构建。
Django 的 LTS 版本是 3.2.13，Python 稳定版本镜像是 3.9.12-buster ，所以建议使用这两个版本来构建 Django 环境。
1.1 环境搭建 可以参考[https://github.com/Cuile/Docker-to-Python/tree/master/Django]，提供了 Dockerfil、yml 文件，还提供全套使用命令。
1.2 配置项 修改配置后，建议使用项目调试的方式启动，不要使用快捷命令，项目正常启动稳定运行后，再使用快捷命令。
ALLOWED_HOSTS = [&amp;#39;*&amp;#39;] # 任意地址都可以访问 Django LANGUAGE_CODE = &amp;#39;en-us&amp;#39; # 这个与多语种有关，在项目初始阶段不要修改，后续添加了多语种支持再修改，否则会导致无法启动。 # 具体参考[http://www.i18nguy.com/unicode/language-identifiers.html]，有个傻逼教程，上来就改成 zh-CN 果然导致项目无法正常启动。 TIME_ZONE = &amp;#39;Asia/Shanghai&amp;#39; # 时区，上海就代表北京时间，这个不能写错，写错就启动不了 # 具体参考[https://en.wikipedia.org/wiki/List_of_tz_database_time_zones]，这里是标准的，有个傻逼教程非给写成 Asia/Beijing 导致怎么都起不来，太TMD的二逼了。 2 常用命令 # 创建项目 $ django-admin startproject xxx $ cd xxx # 生成项目 $ python manage.py startapp websrc # 运行项目测试 $ python manage.</description></item><item><title>CentOS 7 安装 Python3.9.12</title><link>https://blog.cuile.com/posts/python/python3_install/</link><pubDate>Fri, 06 May 2022 13:11:27 +0800</pubDate><guid>https://blog.cuile.com/posts/python/python3_install/</guid><description>
1、卸载已安装的Python环境 # 查看已安装的信息 $ yum info python3 # 卸载已安装的程序 $ yum erase python3 # 删除所有残余文件 $ whereis python3|xargs rm -frv 查看现有的python $ whereis python 2、yum安装依赖环境 $ yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel 3、官网下载Python3.9.12 $ yum -y install wget # 尽量使用国内镜像站点下载比较快 $ wget https://mirrors.huaweicloud.com/python/3.9.12/Python-3.9.12.tgz 4、创建安装目录 $ tar -zxvf Python-3.9.12.tgz -C ./ $ cd Python-3.9.12 $ mkdir /usr/local/python3 $ ./configure --prefix=/usr/local/python3.9.12 $ make &amp;amp;&amp;amp; make install 5、创建软链接 $ ln -s /usr/local/python3.</description></item><item><title>CentOS 7 安装 Docker</title><link>https://blog.cuile.com/posts/docker/docker_install_centos/</link><pubDate>Fri, 06 May 2022 11:05:23 +0800</pubDate><guid>https://blog.cuile.com/posts/docker/docker_install_centos/</guid><description>
其实网上相关的文章已经非常多了，所以这篇文章的作用只是记录和明确一条确定可行的操作路径，为以后的操作节省时间，毕竟像我一样大部分人都不是专业的系统管理员，能够快速解决问题就可以了，并不想做过多的专业研究与探索。
本操作手册是官方手册与网上手册的结合版本，集两家之所长，亲自操作可用。
1.系统准备 查看系统版本 $ cat /etc/redhat-release &amp;gt; CentOS Linux release 7.6.1810 (Core) // CentOs 7 以上版本 查看系统内核版本 $ uname -r &amp;gt; 4.10.4-1.el7.elrepo.x86_64 // 内核版本要&amp;gt;3.10 2.卸载旧版本 $ yum remove docker \ docker-client \ docker-client-latest \ docker-common \ docker-latest \ docker-latest-logrotate \ docker-logrotate \ docker-selinux \ docker-engine-selinux \ docker-engine 3.安装依赖包 $ yum install -y yum-utils \ device-mapper-persistent-data \ lvm2 4.</description></item><item><title>修复 Proxmox RRD 错误</title><link>https://blog.cuile.com/posts/proxmox/proxmox_rrd_error/</link><pubDate>Tue, 08 Feb 2022 10:42:35 +0800</pubDate><guid>https://blog.cuile.com/posts/proxmox/proxmox_rrd_error/</guid><description>
Proxmox系统安装后，日志报错
rrdcached[4513]: handle_request_update: Could not read RRD file. pmxcfs[4527]: [status] notice: RRDC update error /var/lib/rrdcached/db/pve2-vm/85235: -1 pmxcfs[4527]: [status] notice: RRD update error /var/lib/rrdcached/db/pve2-vm/85235: mmaping file '/var/lib/rrdcached/db/pve2-vm/85235': Invalid argument 修复命令
$ rm -r /var/lib/rrdcached/db $ systemctl restart rrdcached.service 参考文档 Strange RRD error</description></item><item><title>FFmpeg脚本</title><link>https://blog.cuile.com/posts/ffmpeg_manual/</link><pubDate>Tue, 08 Feb 2022 10:31:15 +0800</pubDate><guid>https://blog.cuile.com/posts/ffmpeg_manual/</guid><description>
脚本基于Windows10系统设计
查看软件版本 D:\ffmpeg\bin&amp;gt;ver Microsoft Windows [版本 10.0.18362.356] D:\ffmpeg\bin&amp;gt;ffmpeg.exe -version ffmpeg version N-94600-g661a9b274b Copyright (c) 2000-2019 the FFmpeg developers built with gcc 9.1.1 (GCC) 20190807 configuration: --enable-gpl --enable-version3 --enable-sdl2 --enable-fontconfig --enable-gnutls --enable-iconv --enable-libass --enable-libdav1d --enable-libbluray --enable-li bfreetype --enable-libmp3lame --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libopus --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libtheora --enable-libtwolame --enable-libvpx --enable-libwavpack --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libzimg --enable-lzma --enable-zlib --enable-gmp --enable-libvidstab --enable-libvorbis --enable-libvo-amrwbenc --enable-libmysofa --enable-libspeex --enable-libxvid --enable-libaom --enable-libmfx --enable-amf --enable-ffnvcodec --enable-cuvid --enable-d3d11va --enable-nvenc --enable-nvdec --enable-dxva2 --enable-avisynth --enable-libopenmpt libavutil 56.</description></item><item><title>Linux 版本库管理</title><link>https://blog.cuile.com/posts/centos/linux_repo_manual/</link><pubDate>Tue, 08 Feb 2022 10:28:50 +0800</pubDate><guid>https://blog.cuile.com/posts/centos/linux_repo_manual/</guid><description>
脚本基于Centos 7
查看已安装软件 $ yum list installed 升级所有包同时也升级软件和系统内核 $ yum -y update 只升级所有包，不升级软件和系统内核 $ yum -y upgrade 更换阿里云软件安装源 # 备份原镜像文件，以免出错后可以恢复。 $ mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.back # 下载新的CentOS-Base.repo 到/etc/yum.repos.d/ $ wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo # 运行yum makecache生成缓存 $ yum clean all $ yum makecache 查看源是否生效 $ yum repolist 查询仓库 # 显示所有启动的仓库 $ yum repolist enabled # 显示所有禁用的仓库 $ yum repolist disabled # 显示所有仓库 $ yum repolist all 修改仓库 最常用的修改操作就是启动和停用, 可以使用以下命令实现:
$ yum-config-manager --enable repository… $ yum-config-manager --disable repository…</description></item><item><title>Linux系统内核升级</title><link>https://blog.cuile.com/posts/centos/linux_kernel_update/</link><pubDate>Tue, 08 Feb 2022 10:17:48 +0800</pubDate><guid>https://blog.cuile.com/posts/centos/linux_kernel_update/</guid><description>
脚本基于Centos 7
1、查看系统内核版本 $ uname -r 3.10.0-514.26.2.el7.x86_64 $ cat /etc/redhat-release CentOS Linux release 7.6.1810 (Core) 2、升级内核 导入elrepo的key，然后安装elrepo的yum源
$ rpm -import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org $ rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm 查看可用的内核相关包
$ yum --disablerepo=&amp;#34;*&amp;#34; --enablerepo=&amp;#34;elrepo-kernel&amp;#34; list available 主分支ml(mainline)，稳定版(stable)，长期维护版lt(longterm) 安装内核
$ yum -y --enablerepo=elrepo-kernel install kernel-ml.x86_64 kernel-ml-devel.x86_64 3、修改grub $ awk -F\&amp;#39; &amp;#39;$1==&amp;#34;menuentry &amp;#34; {print $2}&amp;#39; /etc/grub2.cfg CentOS Linux (5.2.11-1.el7.elrepo.x86_64) 7 (Core) CentOS Linux (3.10.0-957.27.2.el7.x86_64) 7 (Core) CentOS Linux (3.10.0-514.26.2.el7.x86_64) 7 (Core) CentOS Linux (3.10.0-514.el7.x86_64) 7 (Core) CentOS Linux (0-rescue-963c2c41b08343f7b063dddac6b2e486) 7 (Core) # 新内核（5.</description></item><item><title>iptables 命令</title><link>https://blog.cuile.com/posts/centos/linux_iptables_manual/</link><pubDate>Tue, 08 Feb 2022 10:09:48 +0800</pubDate><guid>https://blog.cuile.com/posts/centos/linux_iptables_manual/</guid><description>
脚本基于Centos 7
注意：CentOS 7默认的防火墙不是iptables,而是firewalld
停止firewalld服务 #停止firewalld服务 $ systemctl stop firewalld #禁用firewalld服务 $ systemctl mask firewalld 安装 iptables #先检查是否安装了iptables $ service iptables status #安装iptables $ yum install -y iptables #升级iptables $ yum update iptables #安装iptables-services $ yum install iptables-services 启动 iptables #注册iptables服务，相当于以前的chkconfig iptables on $ systemctl enable iptables.service #开启服务 $ systemctl start iptables.service #查看状态 $ systemctl status iptables.service 创建规则 # 允许ping $ iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT # or $ iptables -A INPUT -p icmp -j ACCEPT # 允许本地回环接口(即运行本机访问本机) $ iptables -A INPUT -s 127.</description></item><item><title>编译x86_64版本的OpenWrt</title><link>https://blog.cuile.com/posts/openwrt/openwrt_make/</link><pubDate>Tue, 08 Feb 2022 10:05:20 +0800</pubDate><guid>https://blog.cuile.com/posts/openwrt/openwrt_make/</guid><description>
1、准备环境 建议使用纯linux系统进行编译，如 Ubuntu 20.04 LTS，这样环境比较简单，兼容问题也少。
用WSL环境编译，可参考
使用 Windows 子系统 ( WSL ) 编译 OpenWrt 为提高编译的成功率，采用国内大神Lean的版本。
官方版本因编译过程中，下载、兼容等等太多问题，建议不要使用。
sudo apt-get update sudo apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync 2、下载代码 国内用户请准备好梯子</description></item><item><title>Proxmox 配置 NAT 网络</title><link>https://blog.cuile.com/posts/proxmox/proxmox_nat/</link><pubDate>Mon, 07 Feb 2022 14:07:32 +0800</pubDate><guid>https://blog.cuile.com/posts/proxmox/proxmox_nat/</guid><description>
1. 升级系统软件包 $ apt-get update $ apt-get dist-upgrade 2. 安装 ifupdown2 使用 ifupdown2 网络管理软件包，还可以实时重新加载网络配置，而无需重新启动。
$ apt install ifupdown2 3. 配置物理网卡 使用 PVE 的 WEB 管理界面，设置物理网卡的配置。
注意：一定要分配一个静态的IP地址，否则无法正常登录 PVE
节点 &amp;gt; 系统 &amp;gt; 网络：
address：192.168.10.66/24 gateway：192.168.10.1 保存后应用配置
4. 配置虚拟网卡 4.1 修改虚拟网卡配置 使用 PVE 提供管理界面进行配置。 删除 vmbr0 设备的所有配置内容。
编辑 /etc/network/interfaces
$ nano /etc/network/interfaces 加入
source /etc/network/interfaces.d/* # network interface settings; autogenerated # Please do NOT modify this file directly, unless you know what # you&amp;#39;re doing.</description></item><item><title>OpenWRT 配置透明代理</title><link>https://blog.cuile.com/posts/openwrt/openwrt_shadowsocks_proxy/</link><pubDate>Mon, 07 Feb 2022 13:37:19 +0800</pubDate><guid>https://blog.cuile.com/posts/openwrt/openwrt_shadowsocks_proxy/</guid><description>
本文记录OpenWrt设置透明代理的步骤及原理。
1. 系统环境 硬件环境：Windows 10 Hyper-V虚拟机，单核处理器，256M内存 固件版本：OpenWrt 19.07.6 r11278-8055e38794 / LuCI openwrt-19.07 branch git-21.101.59933-c56d9f2 shadowsocks-libev：3.3.5 luci-app-shadowsocks：2.0.2 v2ray-plugin：4.37.3-20210413 ChinaDNS：1.3.3 luci-app-chinadns：1.6.2 https-dns-proxy：2021-01-17-5 luci-app-https-dns-proxy：git-21.062.76689-a607f9c-1 luci-i18n-https-dns-proxy-zh-cn：git-21.062.76689-a607f9c-1 2. 运行流程 透明代理的运行原理主要由DNS访问流程、IP访问流程两部分组成组成
2.1 DNS访问流程 graph LR lh((localhost)); dm(Dnsmasq); cd(ChinaDNS); hdp(https-dns-proxy); ss(Shadowsocks); fd(国外DNS); dd(国内DNS); lh -- 1 udp:53 --&amp;gt; dm; dm -- 2 udp:5555 --&amp;gt; cd; cd -- 3.1 udp:5353--&amp;gt; hdp; cd -- 3.2 udp --&amp;gt; dd; hdp -- 4 tcp --&amp;gt; ss; ss -- 5 tcp --&amp;gt; fd; fd -.</description></item><item><title>OpenWRT DNS设置</title><link>https://blog.cuile.com/posts/openwrt/openwrt_dns/</link><pubDate>Mon, 07 Feb 2022 13:17:39 +0800</pubDate><guid>https://blog.cuile.com/posts/openwrt/openwrt_dns/</guid><description>
1. 使用自定义域名访问WEB管理界面 网络-DHCP/DNS-常规设置-DNS转发：/openwrt.lan/192.168.xxx.xxx 网络-DHCP/DNS-常规设置-重绑定保护：不勾选 /etc/config/uhttpd-option redirect_https：&amp;lsquo;1&amp;rsquo; 不强制跳转https</description></item><item><title>OpenWRT 启用 ALG 功能</title><link>https://blog.cuile.com/posts/openwrt/openwrt_ftp_alg/</link><pubDate>Mon, 07 Feb 2022 10:08:02 +0800</pubDate><guid>https://blog.cuile.com/posts/openwrt/openwrt_ftp_alg/</guid><description>
1. 安装软件包 # opkg install kmod-nf-nathelper-extra # opkg install kmod-nf-ipvs-ftp 2. 添加配置 # nano /etc/sysctl.d/11-nf-conntrack.conf 增加&amp;quot;net.netfilter.nf_conntrack_helper=1&amp;quot;
在使用FTP的主动模式时，要注意关闭网关上的ALG功能（如Windows ALG服务），同时使用可能引起失败
参考文档
原版OpenWRT启用FTP ALG功能 防火墙设置了NAT ALG功能导致FTP数据连接故障</description></item><item><title>MySQL 数据操作</title><link>https://blog.cuile.com/posts/mysql_manual/</link><pubDate>Tue, 18 Jan 2022 14:50:28 +0800</pubDate><guid>https://blog.cuile.com/posts/mysql_manual/</guid><description>
1. 复制 复制表数据，表结构的3种方法 2. 导入 2.1 使用 LOAD DATA 如果是导入有中文的数据，我的mysql 设置的utf8 字符集，所以你要导入的 文件也要保存utf-8的字符集，数据表列的顺序必须和excel的对应，否则导入的数据会有错误,
文件路径名要上的 &amp;quot; \ &amp;ldquo;要变成 “ \ ”或者 &amp;quot; / &amp;ldquo;,否则会报错
如果mysql用户没有读取本地文件的权限，那必须添加local参数，通过mysql client来读取文件
通过load data infile，20秒导入100W数据
LOAD DATA INFILE语句导入数据进入MySQL的一些注意事项
3. 删除 清空表(truncate)与删除表中数据(delete) 详解</description></item><item><title>urllib.parse.urlencode 使用详解</title><link>https://blog.cuile.com/posts/urllib.parse.urlencode_manual/</link><pubDate>Mon, 17 Jan 2022 15:24:58 +0800</pubDate><guid>https://blog.cuile.com/posts/urllib.parse.urlencode_manual/</guid><description>
urllib.parse.urlencode(query, doseq=False, safe='', encoding=None, errors=None, quote_via=quote_plus) urllib.parse.urlencode 将对象或两元素序列转换为百分比编码的ASCII文本字符串，字符串是由'&amp;amp;&amp;lsquo;字符分隔的一系列 key=value 对，其中 key 和 value 都使用 quote_via 函数引用。
GET 请求 import urllib params = urllib.parse.urlencode({&amp;#39;spam&amp;#39;: 1, &amp;#39;eggs&amp;#39;: 2, &amp;#39;bacon&amp;#39;: 0}) url = &amp;#34;http://www.musi-cal.com/cgi-bin/query?%s&amp;#34; % params with urllib.request.urlopen(url) as f: print(f.read().decode(&amp;#39;utf-8&amp;#39;)) POST 请求 import urllib.request import urllib.parse data = urllib.parse.urlencode({&amp;#39;spam&amp;#39;: 1, &amp;#39;eggs&amp;#39;: 2, &amp;#39;bacon&amp;#39;: 0}) data = data.encode(&amp;#39;ascii&amp;#39;) with urllib.request.urlopen(&amp;#34;http://requestb.in/xrbl82xr&amp;#34;, data) as f: print(f.read().decode(&amp;#39;utf-8&amp;#39;)) 如果结果字符串要用作具有 urlopen() 函数的POST操作的 data，则它应该被编码为字节，否则将导致 TypeError。
默认情况下 urlencode 函数使用 quote_plus() 函数进行编码，也可以选用 quote() 函数进行编码，两者最大的不同在于对特定字符的处理。</description></item><item><title>使用 nmcli 配置网络</title><link>https://blog.cuile.com/posts/centos/linux_nmcli_manual/</link><pubDate>Mon, 17 Jan 2022 15:17:58 +0800</pubDate><guid>https://blog.cuile.com/posts/centos/linux_nmcli_manual/</guid><description>
脚本基于Centos 7
查看接口设备信息 # 简单接口状态 $ nmcli dev status # 详细的接口信息 $ nmcli dev show # 接口的详细信息 $ nmcli dev show interface-name 查看连接(connection)的信息 # 简单信息 $ nmcli con show # 详细的连接信息 $ nmcli con show # 某个连接的详细信息 $ nmcli con show con-name 创建连接 $ nmcli con add type ethernet con-name static-vm100 ifname eth0 ipv4 192.168.100.100/24 gw4 192.168.100.1 激活连接 $ nmcli con up static-vm100 参考链接 https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/networking_guide/sec-using_the_networkmanager_command_line_tool_nmcli https://www.jianshu.com/p/5d5560e9e26a</description></item><item><title>使用 sed 命令操作文本文件</title><link>https://blog.cuile.com/posts/centos/linux_sed_manual/</link><pubDate>Mon, 17 Jan 2022 11:18:47 +0800</pubDate><guid>https://blog.cuile.com/posts/centos/linux_sed_manual/</guid><description>
脚本基于Ubuntu 20.04
合并文件 cat info.log error.log &amp;gt; merge.log.bak cp merge.log.bak merge.log 删除冗余信息 sed -i &amp;#39;s/.*a2p_replyclient_log.*[infoerror].[0-9].log.gz://&amp;#39; merge.log \ &amp;amp;&amp;amp; sed -i &amp;#39;s/org.springframework.amqp.rabbit.RabbitListenerEndpointContainer.* - //&amp;#39; merge.log \ &amp;amp;&amp;amp; sed -i &amp;#39;/.*send 1 time for the url is .*/d&amp;#39; merge.log \ &amp;amp;&amp;amp; sed -i &amp;#39;/.*redis key:[0-9]*,value:.*/d&amp;#39; merge.log sed -i &amp;#39;/&amp;gt;&amp;gt;&amp;gt;&amp;gt;.* retry:2/d&amp;#39; 2021.8.log sed -i &amp;#39;s/the content of the url:.*receiveStatusReportResultChinaMobile.shtml //&amp;#39; 2021.8.log 统计 sed -n &amp;#39;/ status:DELIVRD,/p&amp;#39; result.log | wc -l sed -n &amp;#39;/&amp;#34;originalStatus&amp;#34;:&amp;#34;DELIVRD&amp;#34;/p&amp;#39; merge.</description></item><item><title>Linux系统命令</title><link>https://blog.cuile.com/posts/centos/linux_cli_manual/</link><pubDate>Mon, 17 Jan 2022 11:07:07 +0800</pubDate><guid>https://blog.cuile.com/posts/centos/linux_cli_manual/</guid><description>
脚本基于Centos 7
系统进程操作 查看CPU和内存使用情况 # 定位高CPU占用 $ ps H -eo user,pid,ppid,tid,time,%cpu,cmd --sort=%cpu # 可视化显示CPU的使用状况的工具 $ yum install -y htop $ htop 磁盘操作 查询并筛选 磁盘空间 统计 排序 # 修改硬盘挂载目录 # 卸载硬盘 $ umount -v /mnt/raid1-2disk-500G # 修改挂载目录 $ mv /mnt/raid1-2disk-500G /mnt/raid1-250G-2disk # 修改/etc/fstab文件里的挂载目录 $ nano /etc/fstab # 重装挂载 $ mount -av /dev/md127 /mnt/raid1-250G-2disk 网络端口操作 # 查看端口占用 # 查看所有端口占用情况 $ netstat -tlunp # 查看指定端口占用情况 $ netstat -tlunp | grep &amp;lt;port&amp;gt; 文件操作 文件截取 系统设置操作 # systemctl命令 systemctl list-units ##列出当前系统服务的状态 systemctl list-unit-files ##列出服务的开机状态 systemctl status sshd ##查看指定服务的状态 systemctl stop sshd ##关闭指定服务 systemctl start sshd ##开启指定服务 systemctl restart sshd ##从新启动服务 systemctl enable sshd ##设定指定服务开机开启 systemctl disable sshd ##设定指定服务开机关闭 systemctl reload sshd ##使指定服务从新加载配置 systemctl list-dependencies sshd ##查看指定服务的倚赖关系 systemctl mask sshd ##冻结指定服务 systemctl unmask sshd ##启用服务 systemctl set-default multi-user.</description></item><item><title>Github使用Hugo生成Blog</title><link>https://blog.cuile.com/posts/hugo_setup_for_github/</link><pubDate>Fri, 14 Jan 2022 17:15:06 +0800</pubDate><guid>https://blog.cuile.com/posts/hugo_setup_for_github/</guid><description>
设置流程 不过多说明了，网上教程非常多，可以找来看。
参考文档
使用 Github Actions 自动发布 hugo 站点 Hugo的基本安装｜网站生成｜托管至Github Pages 各种坑位 1. 网页正常部署后，访问时页面却无法正常显示，部局完全是乱的。 这可能是https请求报&amp;quot;block:mixed-content&amp;quot;错误导致的，是浏览器不允许在https页面里嵌入http的请求，现在高版本的浏览器为了用户体验，都不会弹窗报错，只会在控制台上打印一条错误信息。
解决这个问题，可以从以下2点入手：
1.1. 在&amp;quot;theme/&amp;lt;YouThemeName&amp;gt;/layouts/partials/head.html&amp;quot;文件内，添加代码
&amp;lt;meta http-equiv=&amp;#34;Content-Security-Policy&amp;#34; content=&amp;#34;upgrade-insecure-requests&amp;#34;&amp;gt; ** 参考文档 **
https请求报错block:mixed-content问题的解决办法 1.2. 确保config.toml文件内，&amp;ldquo;baseUrl&amp;quot;的值与实际地址一致。
2. config.toml 里的 theme 值，要与主题文档夹名一致，不然可能会导致主题无法应用的问题。 3. Github Actions 设置里的 gh-pages.yml 写法要注意 &amp;ldquo;Setup Hugo&amp;quot;项目里，标准版本与扩展版本的参数写法不一样。
# 使用扩展版本 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: &amp;#39;0.91.2&amp;#39; extended: true # 使用标准版本 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: &amp;#39;latest&amp;#39; 参考文档
GitHub Actions for Hugo</description></item><item><title>Docker使用命令</title><link>https://blog.cuile.com/posts/docker/docker_cli/</link><pubDate>Thu, 13 Jan 2022 22:20:52 +0800</pubDate><guid>https://blog.cuile.com/posts/docker/docker_cli/</guid><description>
镜像列表 $ docker image ls -a # or $ docker images 容器列表 $ docker container ls -a # or $ docker ps 删除冗余镜像 $ docker system prune 创建桥接网络 $ docker network create [name] Docker快捷命令 $ echo &amp;#34;alias d-ll=&amp;#39;docker image ls -a; echo; docker container ls -a&amp;#39;&amp;#34; &amp;gt;&amp;gt; ~/.bashrc \ &amp;amp;&amp;amp; echo &amp;#34;alias d-ps=&amp;#39;docker ps&amp;#39;&amp;#34; &amp;gt;&amp;gt; ~/.bashrc \ &amp;amp;&amp;amp; echo &amp;#34;alias d-clean=&amp;#39;docker system prune -f&amp;#39;&amp;#34; &amp;gt;&amp;gt; ~/.bashrc \ &amp;amp;&amp;amp; echo &amp;#34;alias d-rm=&amp;#39;_a(){ docker image rm $1; echo; docker container rm $1; }; _a&amp;#39;&amp;#34; &amp;gt;&amp;gt; ~/.</description></item><item><title>在pypi上发布自己的Python库</title><link>https://blog.cuile.com/posts/release_pypi_package/</link><pubDate>Fri, 11 May 2018 14:49:57 +0800</pubDate><guid>https://blog.cuile.com/posts/release_pypi_package/</guid><description>
Python 的 pypi.python.org 站点终于要退休了，而新的接任者 pypi.org 无论从美观、风格上都让人大大的喜欢，终于在审美一这项上及格了。
而且新的 pypi.org 能够正确的渲染 Markdown 格式的描述，实在是让人欣慰，终于可以和 Github 同步了，不用在麻烦的转换一次了。
下面就来聊聊，如何正确的把库发布到 pypi.org 上：
1. 注册 pypi.org 账号 嗯，这是正确的废话！
2. 编写 setup.py setup.py 的内容比较重要，但其它的细节不谈，主要聊聊 long_description 部分，这部分是对库能力的详细描述。
如果说 keywords 和 description 能提高别人搜索到项目的概率的话，那 long_description 就在很大程度上决定别人对你对项目有没有进一步的想法了。
在针对 long_description 的网上介绍中，对具体使用方法明确写出的是少之又少，所以我今天就特别举例说明一下。
2.1 setup.py #!/usr/bin/env python # coding: utf-8 from setuptools import setup setup( name=&amp;#39;sequence2hash&amp;#39;, version=&amp;#39;1.1.2&amp;#39;, keywords=&amp;#39;tuple dict list sequence hash key/value&amp;#39;, packages=[&amp;#39;sequence2hash&amp;#39;], url=&amp;#39;https://github.com/Cuile/sequence2hash&amp;#39;, description=&amp;#39;This tool converts a valid value in a sequence to a hash and contains a path to a valid value in the key field&amp;#39;, long_description_content_type=&amp;#39;text/markdown&amp;#39;, long_description=open(&amp;#39;README.</description></item></channel></rss>